{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":["Logger","encode","decode","logger","init","io","restService","on","openWatchers","Set","socket","forEach","watcher","stop","type","restName","json","args","callback","Array","isArray","debug","Error","restResource","get","info","options","createCursor","user","then","cursor","toArray","results","catch","error","err","message","result","key","eventName","otherArgs","startsWith","query","queries","emit","add","warn"],"mappings":"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","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport { encode, decode } from '../extended-json';\n\nconst logger = new Logger('liwi:rest-websocket');\n\nexport default function init(io, restService) {\n  io.on('connection', socket => {\n    let openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on(\n      'rest',\n      (\n        { type, restName, json }: { type: string, restName: string, json: ?string },\n        args: ?Array<any> | Function,\n        callback: ?Function,\n      ) => {\n        try {\n          if (json) {\n            if (!PRODUCTION && callback) {\n              throw new Error('Cannot have args and json.');\n            }\n\n            callback = args;\n            args = decode(json);\n            if (!Array.isArray(args)) {\n              logger.debug('args', { args });\n\n              if (callback) {\n                throw new Error('Invalid args');\n              }\n            }\n          }\n\n          if (!callback) {\n            logger[!PRODUCTION ? 'warn' : 'error']('callback missing');\n            return;\n          }\n\n          const restResource = restService.get(restName);\n\n          logger.info('rest', { type, restName, args });\n          switch (type) {\n            case 'cursor toArray': {\n              const [options] = args;\n              return restService\n                .createCursor(restResource, socket.user, options)\n                .then(cursor => cursor.toArray())\n                .then(results => callback(null, encode(results)))\n                .catch(err => {\n                  logger.error(type, err);\n                  callback(err.message);\n                });\n            }\n\n            case 'insertOne':\n            case 'updateOne':\n            case 'updateSeveral':\n            case 'partialUpdateByKey':\n            case 'partialUpdateOne':\n            case 'partialUpdateMany':\n            case 'deleteByKey':\n            case 'deleteOne':\n            case 'findOne':\n              try {\n                if (!PRODUCTION && !restResource[type]) {\n                  throw new Error(`rest: ${restName}.${type} is not available`);\n                }\n\n                // eslint-disable-next-line prettier/prettier\n                return restResource[type](socket.user, ...args)\n                  .then(result => callback(null, encode(result)))\n                  .catch(err => {\n                    logger.error(type, { err });\n                    callback(err.message || err);\n                  });\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            case 'fetch':\n            case 'subscribe':\n            case 'fetchAndSubscribe':\n              try {\n                const [key, eventName, otherArgs = []] = args;\n\n                if (!key.startsWith('query')) {\n                  throw new Error('Invalid query key');\n                }\n\n                const query = restResource.queries[key]; // todo pass connected user\n                if (!query) {\n                  throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n                }\n\n                if (type === 'fetch') {\n                  // eslint-disable-next-line prettier/prettier\n                  return query[type](result => callback(null, result && encode(result)), ...otherArgs)\n                    .catch(err => {\n                      logger.error(type, { err });\n                      callback(err.message || err);\n                    });\n                } else {\n                  const watcher = query[type]((err, result) => {\n                    if (err) {\n                      logger.error(type, { err });\n                    }\n\n                    socket.emit(eventName, err, result && encode(result));\n                  });\n                  watcher.then(\n                    () => callback(),\n                    err => {\n                      logger.error(type, { err });\n                      callback(err.message || err);\n                    },\n                  );\n\n                  openWatchers.add(watcher);\n                }\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            default:\n              try {\n                logger.warn('Unknown command', { type });\n                callback(`rest: unknown command \"${type}\"`);\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n          }\n        } catch (err) {\n          logger.warn('rest error', { err });\n          callback(err.message || err);\n        }\n      },\n    );\n  });\n}\n"]}