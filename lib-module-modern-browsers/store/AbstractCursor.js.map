{"version":3,"sources":["../../src/store/AbstractCursor.js"],"names":["AbstractCursor","constructor","store","_store","close","Error","next","nextResult","then","result","limit","count","applyLimit","findByKey","key","delete","deleteByKey","forEachKeys","callback","forEach","keysIterator","Symbol","iterator","keyPromise"],"mappings":"IAGqBA,c,GAAN,MAA4B;;AAGzCC,cAAYC,KAAZ,EAA0B;AACxB,SAAKC,MAAL,GAAcD,KAAd;AACD;;AAED,MAAIA,KAAJ,GAAmB;AACjB,WAAO,KAAKC,MAAZ;AACD;;AAEDC,UAAQ;AACN,UAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDC,SAAqB;AACnB,UAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAEDE,eAA2B;AAAA;;AACzB,WAAO,KAAKD,IAAL,GAAYE,IAAZ,CAAiB;AAAA,aAAM,MAAKC,MAAL,EAAN;AAAA,KAAjB,CAAP;AACD;;AAEDC,UAAuC;AACrC,UAAM,IAAIL,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDM,QAAMC,aAAsB,KAA5B,EAAmC;AACjC,UAAM,IAAIP,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDI,WAA8B;AAC5B,WAAO,KAAKP,KAAL,CAAWW,SAAX,CAAqB,KAAKC,GAA1B,CAAP;AACD;;AAEDC,WAAwB;AACtB,WAAO,KAAKb,KAAL,CAAWc,WAAX,CAAuB,KAAKF,GAA5B,CAAP;AACD;;AAED,QAAMG,WAAN,CAAkBC,QAAlB,EAAqD;AACnD,WAAO,IAAP,EAAa;AACX,YAAMJ,MAAM,MAAM,KAAKR,IAAL,EAAlB;AACA,UAAI,CAACQ,GAAL,EAAU;;AAEV,YAAMI,SAASJ,GAAT,CAAN;AACD;AACF;;AAEDK,UAAQD,QAAR,EAAiC;AAAA;;AAC/B,WAAO,KAAKD,WAAL,CAAiB;AAAA,aAAM,OAAKR,MAAL,GAAcD,IAAd,CAAmB;AAAA,eAAUU,SAAST,MAAT,CAAV;AAAA,OAAnB,CAAN;AAAA,KAAjB,CAAP;AACD;;AAED,GAACW,YAAD,GAAgB;AACd,WAAO,IAAP,EAAa;AACX,YAAM,KAAKd,IAAL,EAAN;AACD;AACF;;AAED,IAAEe,OAAOC,QAAT,IAAqB;AAAA;;AACnB;AACA,SAAK,IAAIC,UAAT,IAAuB,KAAKH,YAAL,EAAvB,EAA4C;AAC1C,YAAMG,WAAWf,IAAX,CAAgB;AAAA,eAAOM,OAAO,OAAKL,MAAL,EAAd;AAAA,OAAhB,CAAN;AACD;AACF;;AAED;AACA;;;;;;;;;;;;;;AAlEyC,C,EAH3C;;SAGqBT,c","file":"AbstractCursor.js","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport type { ResultType } from '../types';\n\nexport default class AbstractCursor<Store> {\n  key: any;\n\n  constructor(store: Store) {\n    this._store = store;\n  }\n\n  get store(): Store {\n    return this._store;\n  }\n\n  close() {\n    throw new Error('close() missing implementation');\n  }\n\n  next(): Promise<any> {\n    throw new Error('next() missing implementation');\n  }\n\n  nextResult(): Promise<any> {\n    return this.next().then(() => this.result());\n  }\n\n  limit(newLimit: number): Promise<void> {\n    throw new Error('limit() missing implementation');\n  }\n\n  count(applyLimit: boolean = false) {\n    throw new Error('count() missing implementation');\n  }\n\n  result(): Promise<ResultType> {\n    return this.store.findByKey(this.key);\n  }\n\n  delete(): Promise<void> {\n    return this.store.deleteByKey(this.key);\n  }\n\n  async forEachKeys(callback: Function): Promise<void> {\n    while (true) {\n      const key = await this.next();\n      if (!key) return;\n\n      await callback(key);\n    }\n  }\n\n  forEach(callback): Promise<void> {\n    return this.forEachKeys(() => this.result().then(result => callback(result)));\n  }\n\n  *keysIterator() {\n    while (true) {\n      yield this.next();\n    }\n  }\n\n  *[Symbol.iterator]() {\n    // eslint-disable-next-line no-restricted-syntax\n    for (let keyPromise of this.keysIterator()) {\n      yield keyPromise.then(key => key && this.result());\n    }\n  }\n\n  // TODO Symbol.asyncIterator, https://phabricator.babeljs.io/T7356\n  /*\n    async *keysAsyncIterator() {\n        while (true) {\n             const key = await this.next();\n             if (!key) return;\n\n             yield key;\n        }\n     }\n\n     async *[Symbol.asyncIterator] {\n        for await (let key of this.keysAsyncIterator()) {\n            yield await this.result();\n        }\n     }\n     */\n}\n"]}