{"version":3,"sources":["../../src/mongo/MongoConnection.js"],"names":["Logger","MongoClient","AbstractConnection","logger","MongoConnection","constructor","config","has","set","Error","connectionString","get","connect","info","connectPromise","then","connection","on","warn","connectionFailed","getConnection","Promise","reject","resolve","_connection","err","_connecting","catch","console","error","message","process","nextTick","exit","close"],"mappings":"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","file":"MongoConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection: Db | null;\n  _connecting: Promise<void> | null;\n  connectionFailed: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}`\n       + `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = null;\n        this.getConnection = () => Promise.resolve(this._connection);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n          // throw err;\n        process.nextTick(() => {\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.close().then(() => {\n        this._connection = null;\n      });\n    } else if (this._connecting) {\n      return this._connecting.then(() => this.close());\n    }\n  }\n}\n"]}