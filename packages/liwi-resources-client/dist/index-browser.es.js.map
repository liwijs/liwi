{"version":3,"file":"index-browser.es.js","sources":["../src/ClientQuery.ts","../src/index.ts"],"sourcesContent":["import {\n  Query,\n  QuerySubscription,\n  SubscribeCallback,\n  QueryParams,\n  QueryResult,\n  ToServerQueryPayload,\n} from 'liwi-resources';\nimport Logger from 'nightingale-logger';\nimport { TransportClient } from './TransportClient';\n\nconst logger = new Logger('liwi:resources:query');\n\nexport default class ClientQuery<\n  Result,\n  Params extends QueryParams<Params> = undefined\n> implements Query<Result, Params> {\n  private readonly resourceName: string;\n\n  private readonly transportClient: TransportClient;\n\n  key: string;\n\n  private params: Params;\n\n  constructor(\n    resourceName: string,\n    transportClient: TransportClient,\n    key: string,\n    params: Params,\n  ) {\n    this.resourceName = resourceName;\n    this.transportClient = transportClient;\n    this.key = key;\n    this.params = params;\n  }\n\n  changePartialParams(params: Partial<Params>): void {\n    this.params = { ...this.params, ...params };\n  }\n\n  private getTransportPayload(): ToServerQueryPayload {\n    return {\n      resourceName: this.resourceName,\n      key: this.key,\n      params: this.params,\n    };\n  }\n\n  fetch<T>(onFulfilled?: (result: QueryResult<Result>) => T): Promise<T> {\n    logger.debug('fetch', {\n      resourceName: this.resourceName,\n      key: this.key,\n    });\n    return this.transportClient\n      .send<'fetch', QueryResult<Result>>('fetch', this.getTransportPayload())\n      .then(onFulfilled);\n  }\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<any, Result>,\n  ): QuerySubscription {\n    logger.debug('fetchAndSubscribe', {\n      resourceName: this.resourceName,\n      key: this.key,\n    });\n\n    return this.transportClient.subscribe(\n      'fetchAndSubscribe',\n      this.getTransportPayload(),\n      callback,\n    );\n  }\n\n  subscribe(callback: SubscribeCallback<any, Result>): QuerySubscription {\n    logger.debug('subscribe', {\n      resourceName: this.resourceName,\n      key: this.key,\n    });\n\n    return this.transportClient.subscribe(\n      'subscribe',\n      this.getTransportPayload(),\n      callback,\n    );\n  }\n}\n","import type { ServiceInterface, Query, QueryParams } from 'liwi-resources';\nimport ClientQuery from './ClientQuery';\nimport type { TransportClient } from './TransportClient';\n\nexport { ResourcesServerError } from 'liwi-resources';\nexport type {\n  AckError,\n  ToClientMessage,\n  ToServerMessages,\n  ToServerSubscribeMessages,\n  ToServerQueryPayload,\n  ToServerSubscribeQueryPayload,\n  QuerySubscription,\n  Query,\n  QueryParams,\n  QueryResult,\n  QueryMeta,\n  SubscribeCallback,\n} from 'liwi-resources';\nexport type { default as ClientQuery } from './ClientQuery';\nexport type {\n  TransportClient,\n  TransportClientSubscribeCallback,\n  TransportClientSubscribeResult,\n  ConnectionStateChangeListener,\n  ConnectionStateChangeListenerCreator,\n  ConnectionStates,\n} from './TransportClient';\n\nconst getKeys = <T extends {}>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n\ninterface CreateResourceClientOptions<\n  QueryKeys extends keyof any,\n  OperationKeys extends keyof any\n> {\n  queries: Record<QueryKeys, null>;\n  operations: Record<OperationKeys, null>;\n}\n\nexport type ServiceQuery<Result, Params extends QueryParams<Params>> = (\n  params: Params,\n) => Query<Result, Params>;\n\nexport interface ClientServiceInterface<\n  QueryKeys extends keyof any,\n  OperationKeys extends keyof any\n> extends ServiceInterface<QueryKeys, OperationKeys> {\n  queries: {\n    [key in QueryKeys]: ServiceQuery<any, any>;\n  };\n  operations: {\n    [key in OperationKeys]: (params: any) => Promise<any>;\n  };\n}\n\nexport const createResourceClientService = <\n  Service extends ClientServiceInterface<\n    keyof Service['queries'],\n    keyof Service['operations']\n  >\n>(\n  resourceName: string,\n  options: CreateResourceClientOptions<\n    keyof Service['queries'],\n    keyof Service['operations']\n  >,\n) => {\n  return (transportClient: TransportClient): Service => {\n    const queries: Partial<Service['queries']> = {};\n    const operations: Partial<Service['operations']> = {};\n\n    getKeys(options.queries).forEach((queryKey) => {\n      queries[queryKey] = ((params: any) =>\n        new ClientQuery(\n          resourceName,\n          transportClient,\n          queryKey as string,\n          params,\n        )) as any;\n    });\n\n    getKeys(options.operations).forEach((operationKey) => {\n      operations[operationKey] = ((params: any) =>\n        transportClient.send('do', {\n          resourceName,\n          operationKey: operationKey as string,\n          params,\n        })) as any;\n    });\n\n    return ({\n      queries,\n      operations,\n    } as unknown) as Service;\n  };\n};\n"],"names":["logger","Logger","ClientQuery","resourceName","transportClient","key","params","changePartialParams","getTransportPayload","fetch","onFulfilled","debug","send","then","fetchAndSubscribe","callback","subscribe","getKeys","o","Object","keys","createResourceClientService","options","queries","operations","forEach","queryKey","operationKey"],"mappings":"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"}