{"version":3,"file":"index-browser-dev.es.js","sources":["../src/ClientQuery.ts","../src/AbstractClient.ts","../src/index.ts"],"sourcesContent":["import { PRODUCTION } from 'pob-babel';\nimport Logger from 'nightingale-logger';\nimport { decode } from 'extended-json';\nimport { AbstractQuery } from 'liwi-store';\nimport { BaseModel } from 'liwi-types';\nimport AbstractClient from './AbstractClient';\n\ninterface SubscribeReturn {\n  cancel: () => void;\n  stop: () => void;\n  then: (cb: any) => Promise<any>;\n}\n\ntype UnsubscribeCallback = () => void;\ntype Callback = (err: Error | null, result: any) => void;\n\nconst logger = new Logger('liwi:resources:query');\n\nexport default class Query<\n  Model extends BaseModel,\n  KeyPath extends string\n> extends AbstractQuery<Model> {\n  client: AbstractClient<Model, KeyPath>;\n\n  key: string;\n\n  constructor(client: AbstractClient<Model, KeyPath>, key: string) {\n    super();\n    this.client = client;\n    this.key = key;\n  }\n\n  fetch(onFulfilled?: (value: any) => any): Promise<any> {\n    return this.client.send('fetch', this.key).then(onFulfilled);\n  }\n\n  _subscribe(\n    callback: Callback,\n    _includeInitial = false,\n    args: any[],\n  ): SubscribeReturn {\n    const eventName = `subscribe:${this.client.resourceName}.${this.key}`;\n    const listener = (err: Error | null, result?: string) => {\n      const decodedResult = result && decode(result);\n      if (!PRODUCTION) logger.debug(eventName, { result, decodedResult });\n      callback(err, decodedResult);\n    };\n\n    this.client.on(eventName, listener);\n\n    let _stopEmitSubscribe: UnsubscribeCallback;\n    let promise: Promise<void> | undefined = this.client\n      .emitSubscribe(_includeInitial ? 'fetchAndSubscribe' : 'subscribe', [\n        this.key,\n        eventName,\n        args,\n      ])\n      .then((stopEmitSubscribe: UnsubscribeCallback) => {\n        _stopEmitSubscribe = stopEmitSubscribe;\n        logger.info('subscribed');\n      })\n      .catch((err: Error) => {\n        this.client.off(eventName, listener);\n        throw err;\n      });\n\n    const stop = () => {\n      if (!promise) return;\n      _stopEmitSubscribe();\n      promise.then(() => {\n        promise = undefined;\n        this.client.off(eventName, listener);\n      });\n    };\n\n    return {\n      cancel: stop,\n      stop,\n      then: (cb) => Promise.resolve(promise).then(cb),\n    };\n  }\n}\n","import { InternalCommonStoreClient } from 'liwi-store';\nimport {\n  BaseModel,\n  Update,\n  QueryOptions,\n  ResourceOperationKey,\n} from 'liwi-types';\nimport ClientCursor from './ClientCursor';\nimport ClientQuery from './ClientQuery';\n\ntype UnsubscribeCallback = () => void;\n\nexport default abstract class AbstractClient<\n  Model extends BaseModel,\n  KeyPath extends string\n>\n  implements\n    InternalCommonStoreClient<\n      Model,\n      KeyPath,\n      ClientCursor<Model, KeyPath, any>\n    > {\n  readonly resourceName: string;\n\n  readonly keyPath: KeyPath;\n\n  constructor(resourceName: string, keyPath: KeyPath) {\n    this.resourceName = resourceName;\n\n    if (!resourceName) {\n      throw new Error(`Invalid resourceName: \"${resourceName}\"`);\n    }\n\n    this.keyPath = keyPath;\n  }\n\n  createQuery(key: string): ClientQuery<Model, KeyPath> {\n    return new ClientQuery(this, key);\n  }\n\n  abstract createCursor(options: QueryOptions<Model>): Promise<number>;\n\n  abstract send<T>(key: ResourceOperationKey, value: any): Promise<T>;\n\n  abstract on(event: string, listener: Function): void;\n\n  abstract off(event: string, listener: Function): void;\n\n  abstract emitSubscribe(\n    type: string,\n    args: any[],\n  ): Promise<UnsubscribeCallback>;\n\n  // cursor(\n  //   criteria?: Criteria<Model>,\n  //   sort?: Sort<Model>,\n  // ): Promise<ClientCursor<Model, KeyPath>> {\n  //   return Promise.resolve(new ClientCursor(this, { criteria, sort }));\n  // }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    throw new Error('Use operations instead');\n  }\n\n  replaceOne(object: Model): Promise<Model> {\n    throw new Error('Use operations instead');\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Update<Model>): Promise<Model> {\n    throw new Error('Use operations instead');\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    throw new Error('Use operations instead');\n  }\n}\n","import { BaseModel } from 'liwi-types';\nimport { OperationDescription } from 'liwi-resources';\nimport ClientQuery from './ClientQuery';\nimport AbstractClient from './AbstractClient';\n\nexport { default as AbstractClient } from './AbstractClient';\n\nexport type ResourcesClientOperations<\n  Operations extends Record<string, OperationDescription<any, any>>\n> = {\n  [P in keyof Operations]: (\n    params: Operations[P]['params'],\n  ) => Promise<Operations[P]['result']>\n};\n\nexport interface ResourcesClientService<\n  QueryKeys extends string,\n  Operations extends Record<string, OperationDescription<any, any>>,\n  Model extends BaseModel,\n  KeyPath extends string = '_id'\n> {\n  queries: Record<QueryKeys, ClientQuery<Model, KeyPath>>;\n  operations: ResourcesClientOperations<Operations>;\n}\n\ninterface CreateResourceClientOptions<\n  QueryKeys extends string,\n  OperationKeys extends string\n> {\n  queries: QueryKeys[];\n  operations: OperationKeys[];\n}\n\nexport const createResourceClient = <\n  QueryKeys extends string,\n  OperationKeys extends string,\n  Operations extends Record<OperationKeys, OperationDescription<any, any>>,\n  Model extends BaseModel,\n  KeyPath extends string = '_id'\n>(\n  client: AbstractClient<Model, KeyPath>,\n  options: CreateResourceClientOptions<QueryKeys, OperationKeys>,\n): ResourcesClientService<QueryKeys, Operations, Model, KeyPath> => ({\n  queries: (options.queries.map((queryKey) =>\n    client.createQuery(queryKey),\n  ) as unknown) as Record<QueryKeys, ClientQuery<Model, KeyPath>>,\n  operations: (options.operations.map((operationKey) => (params: any) =>\n    client.send('do', [operationKey, params]),\n  ) as unknown) as ResourcesClientOperations<Operations>,\n});\n"],"names":["logger","Logger","Query","client","key","fetch","onFulfilled","send","then","_subscribe","callback","_includeInitial","args","eventName","resourceName","listener","err","result","decodedResult","decode","debug","on","_stopEmitSubscribe","promise","emitSubscribe","stopEmitSubscribe","info","catch","off","stop","undefined","cancel","cb","Promise","resolve","AbstractQuery","AbstractClient","keyPath","Error","createQuery","ClientQuery","findByKey","replaceOne","partialUpdateByKey","deleteByKey","createResourceClient","options","queries","map","queryKey","operations","operationKey","params"],"mappings":"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"}