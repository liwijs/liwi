{"version":3,"file":"index-node.mjs","sources":["../src/ClientQuery.ts","../src/createResourceClientService.ts"],"sourcesContent":["import type {\n  Query,\n  QueryParams,\n  QueryResult,\n  QuerySubscription,\n  SubscribeCallback,\n  ToServerQueryPayload,\n} from \"liwi-resources\";\nimport { Logger } from \"nightingale-logger\";\nimport type { TransportClient } from \"./TransportClient\";\n\nconst logger = new Logger(\"liwi:resources:query\");\n\nexport class ClientQuery<Result, Params extends QueryParams<Params>>\n  implements Query<Result, Params>\n{\n  private readonly resourceName: string;\n\n  private readonly transportClient: TransportClient;\n\n  key: string;\n\n  private params: Params;\n\n  // eslint-disable-next-line @typescript-eslint/max-params\n  constructor(\n    resourceName: string,\n    transportClient: TransportClient,\n    key: string,\n    params: Params,\n  ) {\n    this.resourceName = resourceName;\n    this.transportClient = transportClient;\n    this.key = key;\n    this.params = params;\n  }\n\n  changeParams(params: Params): void {\n    this.params = params;\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): void {\n    this.params = { ...this.params, ...params };\n  }\n\n  private getTransportPayload(): ToServerQueryPayload {\n    return {\n      resourceName: this.resourceName,\n      key: this.key,\n      params: this.params,\n    };\n  }\n\n  fetch<T>(onFulfilled?: (result: QueryResult<Result>) => T): Promise<T> {\n    logger.debug(\"fetch\", {\n      resourceName: this.resourceName,\n      key: this.key,\n    });\n    return this.transportClient\n      .send<\"fetch\", QueryResult<Result>>(\"fetch\", this.getTransportPayload())\n      .then(onFulfilled);\n  }\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<any, Result>,\n  ): QuerySubscription {\n    logger.debug(\"fetchAndSubscribe\", {\n      resourceName: this.resourceName,\n      key: this.key,\n    });\n\n    return this.transportClient.subscribe(\n      \"fetchAndSubscribe\",\n      this.getTransportPayload(),\n      callback,\n    );\n  }\n\n  subscribe(callback: SubscribeCallback<any, Result>): QuerySubscription {\n    logger.debug(\"subscribe\", {\n      resourceName: this.resourceName,\n      key: this.key,\n    });\n\n    return this.transportClient.subscribe(\n      \"subscribe\",\n      this.getTransportPayload(),\n      callback,\n    );\n  }\n}\n","import type { ServiceInterface as ClientServiceInterface } from \"liwi-resources\";\nimport { ClientQuery } from \"./ClientQuery\";\nimport type { TransportClient } from \"./TransportClient\";\n\nconst getKeys = <T extends Record<keyof T, unknown>>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n\ninterface CreateResourceClientOptions<\n  QueryKeys extends keyof any,\n  OperationKeys extends keyof any,\n> {\n  queries: Record<QueryKeys, null>;\n  operations: Record<OperationKeys, null>;\n}\n\nexport const createResourceClientService = <\n  Service extends ClientServiceInterface<any, any>,\n>(\n  resourceName: string,\n  options: CreateResourceClientOptions<\n    keyof Service[\"queries\"],\n    keyof Service[\"operations\"]\n  >,\n): ((transportClient: TransportClient) => Service) => {\n  return (transportClient: TransportClient): Service => {\n    const queries: Partial<Service[\"queries\"]> = {};\n    const operations: Partial<Service[\"operations\"]> = {};\n    getKeys(options.queries).forEach((queryKey) => {\n      queries[queryKey] = ((params: any) =>\n        new ClientQuery(\n          resourceName,\n          transportClient,\n          queryKey as string,\n          params,\n        )) as any;\n    });\n    getKeys(options.operations).forEach((operationKey) => {\n      operations[operationKey] = ((params: any) =>\n        transportClient.send(\"do\", {\n          resourceName,\n          operationKey: operationKey as string,\n          params,\n        })) as any;\n    });\n    return {\n      queries,\n      operations,\n    } as unknown as Service;\n  };\n};\n"],"names":[],"mappings":"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"}