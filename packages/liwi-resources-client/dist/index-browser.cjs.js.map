{"version":3,"file":"index-browser.cjs.js","sources":["../src/ClientQuery.ts","../src/AbstractClient.ts","../src/index.ts"],"sourcesContent":["import { PRODUCTION } from 'pob-babel';\nimport Logger from 'nightingale-logger';\nimport { decode } from 'extended-json';\nimport { AbstractQuery } from 'liwi-store';\nimport { BaseModel } from 'liwi-types';\nimport AbstractClient from './AbstractClient';\n\ninterface SubscribeReturn {\n  cancel: () => void;\n  stop: () => void;\n  then: (cb: any) => Promise<any>;\n}\n\ntype UnsubscribeCallback = () => void;\ntype Callback = (err: Error | null, result: any) => void;\n\nconst logger = new Logger('liwi:resources:query');\n\nexport default class Query<\n  Model extends BaseModel,\n  KeyPath extends string\n> extends AbstractQuery<Model> {\n  client: AbstractClient<Model, KeyPath>;\n\n  key: string;\n\n  private readonly params: any;\n\n  constructor(\n    client: AbstractClient<Model, KeyPath>,\n    key: string,\n    params: any,\n  ) {\n    super();\n    this.client = client;\n    this.key = key;\n    this.params = params;\n  }\n\n  fetch(onFulfilled?: (value: any) => any): Promise<any> {\n    return this.client\n      .send('fetch', [this.key, this.params, undefined])\n      .then(onFulfilled);\n  }\n\n  _subscribe(callback: Callback, _includeInitial = false): SubscribeReturn {\n    const eventName = `subscribe:${this.client.resourceName}.${this.key}`;\n    const listener = (err: Error | null, result?: string) => {\n      const decodedResult = result && decode(result);\n      if (!PRODUCTION) logger.debug(eventName, { result, decodedResult });\n      callback(err, decodedResult);\n    };\n\n    this.client.on(eventName, listener);\n\n    let _stopEmitSubscribe: UnsubscribeCallback;\n    let promise: Promise<void> | undefined = this.client\n      .emitSubscribe(_includeInitial ? 'fetchAndSubscribe' : 'subscribe', [\n        this.key,\n        this.params,\n        eventName,\n      ])\n      .then((stopEmitSubscribe: UnsubscribeCallback) => {\n        _stopEmitSubscribe = stopEmitSubscribe;\n        logger.info('subscribed');\n      })\n      .catch((err: Error) => {\n        this.client.off(eventName, listener);\n        throw err;\n      });\n\n    const stop = () => {\n      if (!promise) return;\n      _stopEmitSubscribe();\n      promise.then(() => {\n        promise = undefined;\n        this.client.off(eventName, listener);\n      });\n    };\n\n    return {\n      cancel: stop,\n      stop,\n      then: (cb) => Promise.resolve(promise).then(cb),\n    };\n  }\n}\n","import { InternalCommonStoreClient } from 'liwi-store';\nimport {\n  BaseModel,\n  Update,\n  QueryOptions,\n  ResourceOperationKey,\n} from 'liwi-types';\nimport ClientCursor from './ClientCursor';\nimport ClientQuery from './ClientQuery';\n\ntype UnsubscribeCallback = () => void;\n\nexport default abstract class AbstractClient<\n  Model extends BaseModel,\n  KeyPath extends string\n>\n  implements\n    InternalCommonStoreClient<\n      Model,\n      KeyPath,\n      ClientCursor<Model, KeyPath, any>\n    > {\n  readonly resourceName: string;\n\n  readonly keyPath: KeyPath;\n\n  constructor(resourceName: string, keyPath: KeyPath) {\n    this.resourceName = resourceName;\n\n    if (!resourceName) {\n      throw new Error(`Invalid resourceName: \"${resourceName}\"`);\n    }\n\n    this.keyPath = keyPath;\n  }\n\n  createQuery(key: string, params: any): ClientQuery<Model, KeyPath> {\n    return new ClientQuery(this, key, params);\n  }\n\n  abstract createCursor(options: QueryOptions<Model>): Promise<number>;\n\n  abstract send<T>(key: ResourceOperationKey, value: any): Promise<T>;\n\n  abstract on(event: string, listener: Function): void;\n\n  abstract off(event: string, listener: Function): void;\n\n  abstract emitSubscribe(\n    type: string,\n    args: any[],\n  ): Promise<UnsubscribeCallback>;\n\n  // cursor(\n  //   criteria?: Criteria<Model>,\n  //   sort?: Sort<Model>,\n  // ): Promise<ClientCursor<Model, KeyPath>> {\n  //   return Promise.resolve(new ClientCursor(this, { criteria, sort }));\n  // }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    throw new Error('Use operations instead');\n  }\n\n  replaceOne(object: Model): Promise<Model> {\n    throw new Error('Use operations instead');\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Update<Model>): Promise<Model> {\n    throw new Error('Use operations instead');\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    throw new Error('Use operations instead');\n  }\n}\n","import { BaseModel } from 'liwi-types';\nimport { QueryDescriptions, OperationDescriptions } from 'liwi-resources';\nimport ClientQuery from './ClientQuery';\nimport AbstractClient from './AbstractClient';\n\nexport { default as AbstractClient } from './AbstractClient';\n\nexport type ResourcesClientQueries<Queries extends QueryDescriptions> = {\n  [P in keyof Queries]: (\n    params: Queries[P]['params'],\n  ) => ClientQuery<Queries[P]['model'], '_id'>\n};\n\nexport type ResourcesClientOperations<\n  Operations extends OperationDescriptions\n> = {\n  [P in keyof Operations]: (\n    params: Operations[P]['params'],\n  ) => Promise<Operations[P]['result']>\n};\n\nexport interface ResourcesClientService<\n  Queries extends QueryDescriptions,\n  Operations extends OperationDescriptions\n> {\n  queries: ResourcesClientQueries<Queries>;\n  operations: ResourcesClientOperations<Operations>;\n}\n\ninterface CreateResourceClientOptions<\n  QueryKeys extends string,\n  OperationKeys extends string\n> {\n  queries: QueryKeys[];\n  operations: OperationKeys[];\n}\n\nexport const createResourceClient = <\n  Queries extends QueryDescriptions,\n  Operations extends OperationDescriptions,\n  Model extends BaseModel,\n  KeyPath extends string = '_id'\n>(\n  client: AbstractClient<Model, KeyPath>,\n  options: CreateResourceClientOptions<string, string>,\n): ResourcesClientService<Queries, Operations> => ({\n  queries: (options.queries.map((queryKey: string) => (params: any) =>\n    client.createQuery(queryKey, params),\n  ) as unknown) as ResourcesClientQueries<Queries>,\n  operations: (options.operations.map((operationKey) => (params: any) =>\n    client.send('do', [operationKey, params]),\n  ) as unknown) as ResourcesClientOperations<Operations>,\n});\n"],"names":["logger","Logger","Query","client","key","params","fetch","onFulfilled","send","undefined","then","_subscribe","callback","_includeInitial","eventName","resourceName","listener","err","result","decodedResult","decode","on","_stopEmitSubscribe","promise","emitSubscribe","stopEmitSubscribe","info","catch","off","stop","cancel","cb","Promise","resolve","AbstractQuery","AbstractClient","keyPath","Error","createQuery","ClientQuery","findByKey","replaceOne","partialUpdateByKey","deleteByKey","createResourceClient","options","queries","map","queryKey","operations","operationKey"],"mappings":"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"}