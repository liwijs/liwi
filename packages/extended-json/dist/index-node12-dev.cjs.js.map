{"version":3,"file":"index-node12-dev.cjs.js","sources":["../src/stringify.ts","../src/parse.ts"],"sourcesContent":["import type { ExtendedJsonValue } from './ExtendedJsonValue';\n\ntype JsonReplacer = (\n  key: string,\n  value: any,\n) => number | string | boolean | Record<string, any> | undefined;\n\n// const internalReplacer = (key, value) => {\n//   return value;\n// };\n\n/**\n * @param {*} value The value to convert to a JSON string\n * @param {function} [replacer] A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.\n * @param {string|number} [space]\n * @return {string}\n */\nexport default function stringify(\n  value: ExtendedJsonValue,\n  replacer?: JsonReplacer,\n  space?: string | number,\n): string {\n  return JSON.stringify(\n    value,\n    // replacer == null ? internalReplacer : (key, value) => replacer(key, internalReplacer(value)),\n    replacer,\n    space,\n  );\n}\n","import type { ExtendedJsonValue } from './ExtendedJsonValue';\n\n// eslint-disable-next-line unicorn/no-unsafe-regex\nconst regexpStringDate = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/;\n\ntype JsonReviver = <T extends ExtendedJsonValue>(\n  key: string,\n  value: T,\n) => ExtendedJsonValue;\n\nconst internalReviver: JsonReviver = function <T extends ExtendedJsonValue>(\n  key: string,\n  value: T,\n): T | Date {\n  if (typeof value === 'string') {\n    const matchDate = regexpStringDate.exec(value);\n    if (matchDate) {\n      return new Date(\n        Date.UTC(\n          +matchDate[1],\n          +matchDate[2] - 1,\n          +matchDate[3],\n          +matchDate[4],\n          +matchDate[5],\n          +matchDate[6],\n        ),\n      );\n    }\n  }\n\n  return value;\n};\n\n/**\n * @param  {string}   text      The string to parse as JSON\n * @param  {function} [reviver] If a function, prescribes how the value originally produced by parsing is transformed, before being returned\n * @return {*}\n */\nexport default function parse<Value = ExtendedJsonValue>(\n  text: string,\n  reviver?: JsonReviver,\n): Value {\n  return JSON.parse(\n    text,\n    reviver == null\n      ? internalReviver\n      : (key, value) => reviver(key, internalReviver(key, value)),\n  ) as Value;\n}\n"],"names":["stringify","value","replacer","space","JSON","regexpStringDate","internalReviver","key","matchDate","exec","Date","UTC","parse","text","reviver"],"mappings":";;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,SAAT,CACbC,KADa,EAEbC,QAFa,EAGbC,KAHa,EAIL;AACR,SAAOC,IAAI,CAACJ,SAAL,CACLC,KADK;AAGLC,EAAAA,QAHK,EAILC,KAJK,CAAP;AAMD;;AC1BD;AACA,MAAME,gBAAgB,GAAG,8DAAzB;;AAOA,MAAMC,eAA4B,GAAG,UACnCC,GADmC,EAEnCN,KAFmC,EAGzB;AACV,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAMO,SAAS,GAAGH,gBAAgB,CAACI,IAAjB,CAAsBR,KAAtB,CAAlB;;AACA,QAAIO,SAAJ,EAAe;AACb,aAAO,IAAIE,IAAJ,CACLA,IAAI,CAACC,GAAL,CACE,CAACH,SAAS,CAAC,CAAD,CADZ,EAEE,CAACA,SAAS,CAAC,CAAD,CAAV,GAAgB,CAFlB,EAGE,CAACA,SAAS,CAAC,CAAD,CAHZ,EAIE,CAACA,SAAS,CAAC,CAAD,CAJZ,EAKE,CAACA,SAAS,CAAC,CAAD,CALZ,EAME,CAACA,SAAS,CAAC,CAAD,CANZ,CADK,CAAP;AAUD;AACF;;AAED,SAAOP,KAAP;AACD,CArBD;AAuBA;AACA;AACA;AACA;AACA;;;AACe,SAASW,KAAT,CACbC,IADa,EAEbC,OAFa,EAGN;AACP,SAAOV,IAAI,CAACQ,KAAL,CACLC,IADK,EAELC,OAAO,IAAI,IAAX,GACIR,eADJ,GAEI,CAACC,GAAD,EAAMN,KAAN,KAAgBa,OAAO,CAACP,GAAD,EAAMD,eAAe,CAACC,GAAD,EAAMN,KAAN,CAArB,CAJtB,CAAP;AAMD;;;;;;;"}