{"version":3,"file":"index-browser.es.js","sources":["../src/TransportClientProvider.tsx","../src/createResourceResultFromState.ts","../src/reducer.ts","../src/useRetrieveResource.ts","../src/applyChanges/applyCollectionChanges.ts","../src/applyChanges/applySingleItemChanges.ts","../src/utils/useVisibilityChangeSubscriber.ts","../src/useRetrieveResourceAndSubscribe.ts","../src/useResource.ts","../src/usePaginatedResource.ts","../src/useOperation.ts","../src/index.ts"],"sourcesContent":["import type { ConnectionStates, TransportClient } from \"liwi-resources-client\";\nimport type { ReactNode } from \"react\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const TransportClientContext = createContext<TransportClient>(\n  undefined as unknown as TransportClient,\n);\n\nexport const TransportClientStateContext =\n  createContext<ConnectionStates>(\"opening\");\nexport const TransportClientReadyContext = createContext<boolean>(false);\n\nexport const useTransportClientState = (): ConnectionStates =>\n  useContext(TransportClientStateContext);\nexport const useTransportClientIsReady = (): boolean =>\n  useContext(TransportClientReadyContext);\n\ntype TransportClientProviderProps<P extends Record<never, unknown>> = P & {\n  createFn: (params: Omit<P, \"children\" | \"createFn\">) => TransportClient;\n  children: ReactNode;\n};\n\nexport function TransportClientProvider<P extends Record<never, unknown>>({\n  createFn,\n  children,\n  ...params\n}: TransportClientProviderProps<P>): ReactNode {\n  // eslint-disable-next-line react/hook-use-state\n  const [client] = useState(() => {\n    return createFn(params);\n  });\n  const [connectionState, setConnectionState] =\n    useState<ConnectionStates>(\"opening\");\n\n  useEffect(() => {\n    const closeConnectionStateListener =\n      client.listenStateChange(setConnectionState);\n    client.connect();\n\n    return (): void => {\n      closeConnectionStateListener();\n      client.close();\n    };\n  }, [client]);\n\n  return (\n    <TransportClientContext.Provider value={client}>\n      <TransportClientStateContext.Provider value={connectionState}>\n        <TransportClientReadyContext.Provider\n          value={connectionState === \"connected\"}\n        >\n          {children}\n        </TransportClientReadyContext.Provider>\n      </TransportClientStateContext.Provider>\n    </TransportClientContext.Provider>\n  );\n}\n","import type {\n  Query,\n  QueryMeta,\n  QueryParams,\n  ResourcesServerError,\n} from \"liwi-resources-client\";\nimport type { QueryInfo } from \"liwi-store\";\nimport type { State } from \"./reducer\";\n\nexport interface ResourceResultInitialLoading<\n  Data,\n  Params extends QueryParams<Params>,\n> {\n  query: Query<Data, Params>;\n  initialLoading: true;\n  initialError: false;\n  fetched: false;\n  fetching: true;\n  data: undefined;\n  meta: undefined;\n  queryInfo: undefined;\n  error: undefined;\n}\n\nexport interface ResourceResultInitialError<\n  Data,\n  Params extends QueryParams<Params>,\n> {\n  query: Query<Data, Params>;\n  initialLoading: false;\n  initialError: true;\n  fetched: false;\n  fetching: false;\n  data: undefined;\n  meta: undefined;\n  queryInfo: undefined;\n  error: Error | ResourcesServerError;\n}\n\nexport interface ResourceResultLoaded<\n  Data,\n  Params extends QueryParams<Params>,\n> {\n  query: Query<Data, Params>;\n  initialLoading: false;\n  initialError: false;\n  fetched: true;\n  fetching: boolean;\n  data: Data;\n  meta: QueryMeta;\n  queryInfo: QueryInfo<any>;\n  error: Error | ResourcesServerError | undefined;\n}\n\nexport type ResourceResult<Data, Params extends QueryParams<Params>> =\n  | ResourceResultInitialError<Data, Params>\n  | ResourceResultInitialLoading<Data, Params>\n  | ResourceResultLoaded<Data, Params>;\n\nexport const createResourceResultFromState = <\n  Result,\n  Params extends QueryParams<Params>,\n>(\n  state: State<Result, Params>,\n): ResourceResult<Result, Params> =>\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  ({\n    query: state.query,\n    initialLoading: !state.fetched && state.fetching,\n    initialError: !state.fetched && !!state.error,\n    fetched: state.fetched,\n    fetching: state.fetching,\n    data: !state.fetched ? undefined : state.result,\n    meta: !state.fetched ? undefined : state.meta,\n    queryInfo: !state.fetched ? undefined : state.queryInfo,\n    error: state.error,\n  }) as ResourceResult<Result, Params>;\n","import type {\n  Query,\n  QueryParams,\n  ResourcesServerError,\n} from \"liwi-resources-client\";\nimport type { QueryInfo, QueryMeta } from \"liwi-store\";\nimport type { Reducer } from \"react\";\n\nexport interface InitialState<Result, Params extends QueryParams<Params>> {\n  fetched: false;\n  fetching: true;\n  query: Query<Result, Params>;\n  result: undefined;\n  meta: undefined;\n  queryInfo: undefined;\n  promise?: Promise<void>;\n  error: undefined;\n}\n\nexport interface InitialErrorState<Result, Params extends QueryParams<Params>> {\n  fetched: false;\n  fetching: boolean;\n  query: Query<Result, Params>;\n  result: undefined;\n  meta: undefined;\n  queryInfo: undefined;\n  promise?: Promise<void>;\n  error: Error | ResourcesServerError;\n}\n\nexport interface FetchedState<Result, Params extends QueryParams<Params>> {\n  fetched: true;\n  fetching: boolean;\n  query: Query<Result, Params>;\n  result: Result;\n  meta: QueryMeta;\n  queryInfo: QueryInfo<any>;\n  promise?: Promise<void>;\n  error: Error | ResourcesServerError | undefined;\n}\n\nexport interface InitAction {\n  type: \"init\";\n}\n\nexport interface FetchingAction {\n  type: \"fetching\";\n}\n\nexport interface RefetchAction {\n  type: \"refetch\";\n  promise: Promise<void>;\n}\n\nexport interface ResolveAction<Result> {\n  type: \"resolve\";\n  result: Result;\n  meta: QueryMeta;\n  queryInfo: QueryInfo<any>;\n}\nexport interface ErrorAction {\n  type: \"error\";\n  error: Error | ResourcesServerError;\n}\n\nexport type Action<Result> =\n  | ErrorAction\n  | FetchingAction\n  | RefetchAction\n  | ResolveAction<Result>;\nexport type State<Result, Params extends QueryParams<Params>> =\n  | FetchedState<Result, Params>\n  | InitialErrorState<Result, Params>\n  | InitialState<Result, Params>;\nexport type ResourceReducer<\n  Result,\n  Params extends QueryParams<Params>,\n> = Reducer<State<Result, Params>, Action<Result>>;\nexport interface ResourceReducerInitializerReturn<\n  Result,\n  Params extends QueryParams<Params>,\n> {\n  query: Query<Result, Params>;\n  promise?: Promise<void>;\n}\n\nexport function initReducer<Result, Params extends QueryParams<Params>>(\n  initializer: () => ResourceReducerInitializerReturn<Result, Params>,\n): InitialState<Result, Params> {\n  const init = initializer();\n  const { query, promise } = init;\n  return {\n    fetched: false,\n    fetching: true,\n    query,\n    result: undefined,\n    meta: undefined,\n    queryInfo: undefined,\n    promise,\n    error: undefined,\n  };\n}\n\nexport default function reducer<Result, Params extends QueryParams<Params>>(\n  state: State<Result, Params>,\n  action: Action<Result>,\n): State<Result, Params> {\n  switch (action.type) {\n    case \"resolve\":\n      return {\n        fetched: true,\n        fetching: false,\n        query: state.query,\n        result: action.result,\n        meta: action.meta,\n        queryInfo: action.queryInfo,\n        error: undefined,\n      };\n    case \"refetch\":\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      return {\n        fetched: state.fetched,\n        fetching: true,\n        query: state.query,\n        result: state.result,\n        meta: state.meta,\n        queryInfo: state.queryInfo,\n        promise: action.promise,\n        error: state.error,\n      } as FetchedState<Result, Params> | InitialState<Result, Params>;\n    case \"fetching\":\n      return {\n        ...state,\n        fetching: true,\n      };\n    case \"error\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.error,\n      };\n    default:\n      throw new Error(\"Invalid action\");\n  }\n}\n","import type { Query, QueryParams, QueryResult } from \"liwi-resources-client\";\nimport { useCallback, useContext, useEffect, useReducer, useRef } from \"react\";\nimport { TransportClientReadyContext } from \"./TransportClientProvider\";\nimport type { ResourceResult } from \"./createResourceResultFromState\";\nimport { createResourceResultFromState } from \"./createResourceResultFromState\";\nimport type {\n  Action,\n  ResourceReducerInitializerReturn,\n  State,\n} from \"./reducer\";\nimport reducer, { initReducer } from \"./reducer\";\n\n// eslint-disable-next-line @typescript-eslint/max-params\nexport function useRetrieveResource<Result, Params extends QueryParams<Params>>(\n  createQuery: (initialParams: Params) => Query<Result, Params>,\n  params: Params,\n  skip: boolean,\n  deps: any[],\n): ResourceResult<Result, Params> {\n  const isTransportReady = useContext(TransportClientReadyContext);\n  const wasReady = useRef(isTransportReady);\n  const currentFetchId = useRef(0);\n\n  const fetch = useCallback(\n    (\n      query: Query<Result, Params>,\n      callback: (result: QueryResult<Result>) => void,\n    ): Promise<void> => {\n      const fetchId = ++currentFetchId.current;\n      return query.fetch((result): void => {\n        if (currentFetchId.current === fetchId) {\n          callback(result);\n        }\n      });\n    },\n    [],\n  );\n\n  const [state, dispatch] = useReducer<\n    State<Result, Params>,\n    () => ResourceReducerInitializerReturn<Result, Params>,\n    [Action<Result>]\n  >(\n    reducer,\n    () => {\n      const query = createQuery(params);\n\n      if (!isTransportReady || skip) return { query };\n\n      return {\n        query,\n        promise: fetch(query, ({ result, meta, info }) => {\n          dispatch({ type: \"resolve\", result, meta, queryInfo: info });\n        }).catch((error: unknown) => {\n          dispatch({ type: \"error\", error: error as Error });\n        }),\n      };\n    },\n    initReducer,\n  );\n\n  useEffect(() => {\n    if (wasReady.current) return;\n    if (!isTransportReady) return;\n    if (skip) return;\n    wasReady.current = true;\n\n    dispatch({\n      type: \"refetch\",\n      promise: fetch(state.query, ({ result, meta, info }) => {\n        dispatch({ type: \"resolve\", result, meta, queryInfo: info });\n      }).catch((error: unknown) => {\n        dispatch({ type: \"error\", error: error as Error });\n      }),\n    });\n  }, [isTransportReady, fetch, skip, state.query]);\n\n  const firstEffectChangeParams = useRef(false);\n\n  useEffect(() => {\n    if (!firstEffectChangeParams.current) {\n      firstEffectChangeParams.current = true;\n      return;\n    }\n\n    if (skip) {\n      return;\n    }\n\n    state.query.changeParams(params);\n\n    if (!wasReady.current) return;\n    dispatch({\n      type: \"refetch\",\n      promise: fetch(state.query, ({ result, meta, info }) => {\n        dispatch({ type: \"resolve\", result, meta, queryInfo: info });\n      }).catch((error: unknown) => {\n        dispatch({ type: \"error\", error: error as Error });\n      }),\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.query, skip, ...deps]);\n\n  return createResourceResultFromState(state);\n}\n","import type { Change, Changes, QueryInfo, QueryMeta } from \"liwi-store\";\nimport { Lazy } from \"mingo/lazy\";\nimport { $sort } from \"mingo/operators/pipeline/sort\";\n\nfunction sortCollection<T>(collection: T[], sort: Record<string, -1 | 1>): T[] {\n  return $sort(Lazy(collection), sort, { idKey: \"_id\" }).value() as T[];\n}\n\nconst copy = <Value>(state: Value[]): Value[] => [...state];\n\nconst applyCollectionChange = <Value>(\n  state: Value[],\n  change: Change<any, Value[]>,\n  queryMeta: QueryMeta,\n  queryInfo: QueryInfo<Value>,\n  // eslint-disable-next-line @typescript-eslint/max-params\n): Value[] => {\n  switch (change.type) {\n    case \"initial\": {\n      const keyPath = queryInfo.keyPath;\n\n      // update meta\n      Object.assign(queryMeta, change.meta);\n\n      // update state if exists, keeping ref to avoid rerendering everything\n      return !state\n        ? change.initial\n        : change.initial.map((value) => {\n            const existing = state.find((v) => v[keyPath] === value[keyPath]);\n            if (!existing) return value;\n            return JSON.stringify(existing) === JSON.stringify(value)\n              ? existing\n              : value;\n          });\n    }\n    case \"inserted\": {\n      queryMeta.total += change.result.length;\n\n      let newCollection = [...change.result, ...state];\n\n      if (queryInfo.sort) {\n        newCollection = sortCollection(newCollection, queryInfo.sort);\n      }\n\n      if (!queryInfo.limit) return newCollection;\n\n      return newCollection.slice(0, queryInfo.limit - change.result.length);\n    }\n\n    case \"deleted\": {\n      queryMeta.total -= change.keys.length;\n\n      const keyPath = queryInfo.keyPath;\n      const deletedKeys = change.keys;\n      return state.filter((value) => !deletedKeys.includes(value[keyPath]));\n    }\n\n    case \"updated\": {\n      const keyPath = queryInfo.keyPath;\n      const newState = copy(state);\n      change.result.forEach((newObject) => {\n        const index = newState.findIndex(\n          (o: Value) => o[keyPath] === newObject[keyPath],\n        );\n        if (index === -1) return;\n        newState[index] = newObject;\n      });\n      return newState;\n    }\n\n    default:\n      throw new Error(\"Invalid type\");\n  }\n};\n\n// https://github.com/rethinkdb/horizon/blob/next/client/src/ast.js\n// eslint-disable-next-line @typescript-eslint/max-params\nexport function applyCollectionChanges<Item>(\n  state: Item[] | undefined,\n  changes: Changes<any, Item[]>,\n  queryMeta: QueryMeta,\n  queryInfo: QueryInfo<Item>,\n): { state: Item[] | undefined; meta: QueryMeta } {\n  if (state === undefined) return { state, meta: queryMeta };\n\n  const newQueryMeta = { ...queryMeta };\n\n  return {\n    // eslint-disable-next-line unicorn/no-array-reduce\n    state: changes.reduce<Item[]>(\n      (result: Item[], change: Change<any, Item[]>) =>\n        applyCollectionChange<Item>(result, change, newQueryMeta, queryInfo),\n      state,\n    ),\n    meta: newQueryMeta,\n  };\n}\n","import type { Change, Changes, QueryInfo, QueryMeta } from \"liwi-store\";\n\nconst applySingleItemChange = <Value extends Record<keyof Value, any>>(\n  state: Value | null,\n  change: Change<any, Value | null>,\n  queryMeta: QueryMeta,\n  queryInfo: QueryInfo<Value>,\n  // eslint-disable-next-line @typescript-eslint/max-params\n): Value | null => {\n  switch (change.type) {\n    case \"initial\":\n      queryMeta.total = change.initial === null ? 0 : 1;\n      return change.initial;\n\n    case \"updated\": {\n      queryMeta.total = change.result === null ? 0 : 1;\n      return change.result;\n    }\n\n    case \"deleted\": {\n      queryMeta.total = 0;\n      return null;\n    }\n\n    case \"inserted\":\n    default:\n      throw new Error(\"Invalid type\");\n  }\n};\n\n// https://github.com/rethinkdb/horizon/blob/next/client/src/ast.js\n// eslint-disable-next-line @typescript-eslint/max-params\nexport function applySingleItemChanges<\n  Value extends Record<keyof Value, unknown>,\n>(\n  state: Value | null | undefined,\n  changes: Changes<any, Value | null>,\n  queryMeta: QueryMeta,\n  queryInfo: QueryInfo<Value>,\n): { state: Value | null | undefined; meta: QueryMeta } {\n  if (state === undefined) return { state, meta: queryMeta };\n\n  const newQueryMeta = { ...queryMeta };\n\n  return {\n    // eslint-disable-next-line unicorn/no-array-reduce\n    state: changes.reduce<Value | null>(\n      (result: Value | null, change: Change<any, Value | null>) =>\n        applySingleItemChange<Value>(result, change, queryMeta, queryInfo),\n      state,\n    ),\n    meta: newQueryMeta,\n  };\n}\n","import { useMemo, useRef } from \"react\";\n\ntype VisibilityChangeHandler = () => void;\n\ninterface VisibilityChangeSubscriber {\n  subscribe: (handleVisibilityChange: VisibilityChangeHandler) => void;\n  unsubscribe: () => void;\n}\n\nexport const useVisibilityChangeSubscriber = (): VisibilityChangeSubscriber => {\n  const handleVisibilityChangeRef = useRef<VisibilityChangeHandler | undefined>(\n    undefined,\n  );\n  return useMemo(\n    () => ({\n      subscribe: (handleVisibilityChange: VisibilityChangeHandler) => {\n        handleVisibilityChangeRef.current = handleVisibilityChange;\n        document.addEventListener(\n          \"visibilitychange\",\n          handleVisibilityChange,\n          false,\n        );\n      },\n      unsubscribe: () => {\n        if (handleVisibilityChangeRef.current) {\n          document.removeEventListener(\n            \"visibilitychange\",\n            handleVisibilityChangeRef.current,\n          );\n        }\n      },\n    }),\n    [],\n  );\n};\n","import type {\n  Query,\n  QueryParams,\n  QuerySubscription,\n} from \"liwi-resources-client\";\nimport type { Changes, InitialChange, QueryInfo, QueryMeta } from \"liwi-store\";\nimport { Logger } from \"nightingale-logger\";\nimport { useEffect, useMemo, useReducer, useRef } from \"react\";\nimport type { ApplyChanges } from \"./applyChanges/ApplyChanges\";\nimport { applyCollectionChanges } from \"./applyChanges/applyCollectionChanges\";\nimport { applySingleItemChanges } from \"./applyChanges/applySingleItemChanges\";\nimport type { ResourceResult } from \"./createResourceResultFromState\";\nimport { createResourceResultFromState } from \"./createResourceResultFromState\";\nimport type {\n  Action,\n  ResourceReducerInitializerReturn,\n  State,\n} from \"./reducer\";\nimport reducer, { initReducer } from \"./reducer\";\nimport { useVisibilityChangeSubscriber } from \"./utils/useVisibilityChangeSubscriber\";\n\nexport interface UseResourceAndSubscribeOptions {\n  visibleTimeout: number;\n}\n\nconst defaultOptions = {\n  visibleTimeout: 1000 * 60 * 2, // 2 minutes\n};\n\nconst logger = new Logger(\"react-liwi:useResourceAndSubscribe\");\n\nconst isInitial = <Result>(\n  changes: Changes<any, Result>,\n): changes is [InitialChange<Result>] =>\n  changes.length === 1 && changes[0]?.type === \"initial\";\n\nexport function useRetrieveResourceAndSubscribe<\n  Result,\n  Params extends QueryParams<Params>,\n>(\n  createQuery: (initialParams: Params) => Query<Result, Params>,\n  params: Params,\n  skip: boolean,\n  deps: any[],\n  { visibleTimeout }: UseResourceAndSubscribeOptions = defaultOptions,\n): ResourceResult<Result, Params> {\n  const visibilityChangeSubscriber = useVisibilityChangeSubscriber();\n  const querySubscriptionRef = useRef<QuerySubscription | undefined>(undefined);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | undefined>(\n    undefined,\n  );\n  const changeParamsRef = useRef<((params: Params) => void) | undefined>(\n    undefined,\n  );\n\n  const skipRef = useRef(skip);\n  skipRef.current = skip;\n\n  const unsubscribe = (): void => {\n    logger.info(\"unsubscribe\");\n\n    // reset timeout to allow resubscribing\n    timeoutRef.current = undefined;\n\n    if (querySubscriptionRef.current) {\n      querySubscriptionRef.current.stop();\n      querySubscriptionRef.current = undefined;\n    }\n  };\n\n  const [state, dispatch] = useReducer<\n    State<Result, Params>,\n    () => ResourceReducerInitializerReturn<Result, Params>,\n    [Action<Result>]\n  >(\n    reducer,\n    () => {\n      const query = createQuery(params);\n      let applyChanges: ApplyChanges<Result, any>;\n\n      let currentResult: Result | undefined;\n      let currentMeta: QueryMeta | undefined;\n      let currentQueryInfo: QueryInfo<any> | undefined;\n\n      return {\n        query,\n        promise: new Promise((resolve, reject) => {\n          const queryLogger = logger.context({\n            resourceName: (query as any).resourceName,\n            key: (query as any).key,\n          });\n          queryLogger.debug(\"init\");\n\n          const subscribe = (): void => {\n            queryLogger.debug(\"subscribing\", {\n              querySubscriptionRef: querySubscriptionRef.current,\n              timeoutRef: timeoutRef.current,\n            });\n            querySubscriptionRef.current = query.fetchAndSubscribe(\n              (err: Error | null, changes: Changes<any, Result>) => {\n                queryLogger.debug(\"received changes\", { err, changes });\n\n                if (err) {\n                  dispatch({ type: \"error\", error: err });\n                  return;\n                }\n\n                if (!currentResult && isInitial(changes)) {\n                  const initialChange: InitialChange = changes[0];\n                  currentResult = initialChange.initial;\n                  currentMeta = initialChange.meta;\n                  currentQueryInfo = initialChange.queryInfo;\n                  dispatch({\n                    type: \"resolve\",\n                    result: initialChange.initial,\n                    meta: initialChange.meta,\n                    queryInfo: currentQueryInfo,\n                  });\n                  applyChanges = (\n                    Array.isArray(initialChange.initial)\n                      ? applyCollectionChanges\n                      : applySingleItemChanges\n                  ) as ApplyChanges<Result, any>;\n                }\n                // if a change happen before the initial result, applyChanges will be undefined\n                else if (applyChanges) {\n                  const { state: newResult, meta: newMeta } = applyChanges(\n                    currentResult,\n                    changes,\n                    currentMeta!,\n                    currentQueryInfo!,\n                  );\n\n                  if (newResult && newResult !== currentResult) {\n                    currentResult = newResult;\n                    currentMeta = newMeta;\n                    dispatch({\n                      type: \"resolve\",\n                      result: newResult,\n                      meta: newMeta,\n                      queryInfo: currentQueryInfo!,\n                    });\n                  }\n                }\n              },\n            );\n            querySubscriptionRef.current.then(\n              () => {\n                queryLogger.success(\"subscribed\");\n              },\n              (error: any) => {\n                dispatch({ type: \"error\", error });\n              },\n            );\n          };\n\n          changeParamsRef.current = (changedParams: Params): void => {\n            queryLogger.info(\"change params\", {\n              skip: skipRef.current,\n              params: changedParams,\n            });\n\n            if (querySubscriptionRef.current) {\n              querySubscriptionRef.current.stop();\n            }\n\n            query.changeParams(changedParams);\n\n            if (!document.hidden && !skipRef.current) {\n              dispatch({ type: \"fetching\" });\n              subscribe();\n            }\n          };\n\n          const handleVisibilityChange = (): void => {\n            if (skipRef.current) return;\n            if (!document.hidden) {\n              if (timeoutRef.current !== undefined) {\n                queryLogger.debug(\"timeout cleared\");\n                clearTimeout(timeoutRef.current);\n                timeoutRef.current = undefined;\n              } else if (!querySubscriptionRef.current) {\n                queryLogger.info(\"resubscribe\");\n                dispatch({ type: \"fetching\" });\n                subscribe();\n              }\n              return;\n            }\n\n            if (querySubscriptionRef.current === undefined) return;\n\n            queryLogger.debug(\"timeout visible\");\n            timeoutRef.current = setTimeout(unsubscribe, visibleTimeout);\n          };\n\n          visibilityChangeSubscriber.subscribe(handleVisibilityChange);\n\n          if (!document.hidden && !skipRef.current) {\n            subscribe();\n          }\n        }),\n      };\n    },\n    initReducer,\n  );\n\n  const firstEffectChangeParams = useRef(false);\n\n  useEffect(() => {\n    if (!firstEffectChangeParams.current) {\n      firstEffectChangeParams.current = true;\n      return;\n    }\n\n    if (changeParamsRef.current) {\n      changeParamsRef.current(params);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [skip, ...deps]);\n\n  useEffect(() => {\n    return () => {\n      visibilityChangeSubscriber.unsubscribe();\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = undefined;\n      }\n\n      unsubscribe();\n    };\n  }, [visibilityChangeSubscriber]);\n\n  return useMemo(() => createResourceResultFromState(state), [state]);\n}\n","import type { Query, QueryParams } from \"liwi-resources-client\";\nimport type { SetOptional } from \"liwi-store\";\nimport type { ResourceResult } from \"./createResourceResultFromState\";\nimport { useRetrieveResource } from \"./useRetrieveResource\";\nimport type { UseResourceAndSubscribeOptions } from \"./useRetrieveResourceAndSubscribe\";\nimport { useRetrieveResourceAndSubscribe } from \"./useRetrieveResourceAndSubscribe\";\n\ninterface UseResourceOptionsRequiredParams<Params extends QueryParams<Params>> {\n  params: Params;\n  skip?: boolean;\n  subscribe?: boolean;\n  subscribeOptions?: UseResourceAndSubscribeOptions;\n}\n\nexport type UseResourceOptions<Params extends QueryParams<Params>> =\n  Params extends Record<string, never>\n    ? SetOptional<UseResourceOptionsRequiredParams<Params>, \"params\">\n    : UseResourceOptionsRequiredParams<Params>;\n\n// eslint-disable-next-line unicorn/prefer-global-this\nconst isSSR = typeof window === \"undefined\";\n\nexport function useResource<Result, Params extends QueryParams<Params>>(\n  createQuery: (initialParams: Params) => Query<Result, Params>,\n  {\n    params,\n    skip = false,\n    subscribe,\n    subscribeOptions,\n  }: UseResourceOptions<Params>,\n  deps: any[],\n): ResourceResult<Result, Params> {\n  const result =\n    subscribe && !isSSR\n      ? // eslint-disable-next-line react-hooks/rules-of-hooks\n        useRetrieveResourceAndSubscribe<Result, Params>(\n          createQuery,\n          params as Params,\n          skip,\n          deps,\n          subscribeOptions,\n        )\n      : // eslint-disable-next-line react-hooks/rules-of-hooks\n        useRetrieveResource<Result, Params>(\n          createQuery,\n          params as Params,\n          skip,\n          deps,\n        );\n\n  return result;\n}\n","import type { Query, QueryParams } from \"liwi-resources-client\";\nimport { useMemo } from \"react\";\nimport type {\n  ResourceResultInitialError,\n  ResourceResultInitialLoading,\n  ResourceResultLoaded,\n} from \"./createResourceResultFromState\";\nimport type { UseResourceOptions } from \"./useResource\";\nimport { useResource } from \"./useResource\";\n\nexport interface PaginatedQueryRequiredParams {\n  page: number;\n}\n\ntype PaginatedQueryParams<Params extends Record<string, unknown>> =\n  PaginatedQueryRequiredParams & QueryParams<Params>;\n\ntype UsePaginatedResourceOptions<Params extends PaginatedQueryParams<Params>> =\n  UseResourceOptions<Params>;\n\nexport interface Pagination {\n  totalPages: number;\n}\n\ninterface PaginatedResourceResultInitialLoading<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> extends ResourceResultInitialLoading<Data, Params> {\n  pagination: undefined;\n}\n\ninterface PaginatedResourceResultInitialError<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> extends ResourceResultInitialError<Data, Params> {\n  pagination: undefined;\n}\n\ninterface PaginatedResourceResultLoaded<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> extends ResourceResultLoaded<Data, Params> {\n  pagination: Pagination;\n}\n\nexport type PaginatedResourceResult<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> =\n  | PaginatedResourceResultInitialError<Data, Params>\n  | PaginatedResourceResultInitialLoading<Data, Params>\n  | PaginatedResourceResultLoaded<Data, Params>;\n\nexport function usePaginatedResource<\n  Result,\n  Params extends PaginatedQueryParams<Params>,\n>(\n  createQuery: (initialParams: Params) => Query<Result, Params>,\n  options: UsePaginatedResourceOptions<Params>,\n  deps: any[],\n): PaginatedResourceResult<Result, Params> {\n  const result = useResource(createQuery, options, deps);\n  const total = result.meta?.total;\n  const limit = result.queryInfo?.limit;\n\n  const pagination = useMemo<Pagination | undefined>(() => {\n    if (total === undefined) return undefined;\n\n    return {\n      totalPages: limit ? Math.ceil(total / limit) : 1,\n    };\n  }, [total, limit]);\n\n  return useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      ({ ...result, pagination }) as PaginatedResourceResult<Result, Params>,\n    [result, pagination],\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nexport interface OperationState {\n  loading: boolean;\n  error: Error | undefined;\n}\n\nexport type OperationCallWrapper<T extends (...args: any) => Promise<any>> = (\n  ...args: Parameters<T>\n) => Promise<[Error | any | undefined, Awaited<ReturnType<T>> | undefined]>;\n\nexport function useOperation<T extends (...args: any) => Promise<any>>(\n  operationCall: T,\n): [OperationCallWrapper<T>, OperationState] {\n  const [state, setState] = useState<OperationState>(() => ({\n    loading: false,\n    error: undefined,\n  }));\n\n  const operationCallWrapper = useCallback<OperationCallWrapper<T>>(\n    (...params: Parameters<T>) => {\n      setState({\n        loading: true,\n        error: undefined,\n      });\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return operationCall(...(params as any)).then(\n          (result) => {\n            setState({\n              loading: false,\n              error: undefined,\n            });\n            return [undefined, result];\n          },\n          (error: unknown) => {\n            setState({\n              loading: false,\n              error: error instanceof Error ? error : new Error(String(error)),\n            });\n            return [error, undefined];\n          },\n        );\n      } catch (error) {\n        setState({\n          loading: false,\n          error: error as Error,\n        });\n        return Promise.resolve([error, undefined]);\n      }\n    },\n    [operationCall],\n  );\n  return [operationCallWrapper, state];\n}\n","import type { ConnectionStates } from \"liwi-resources-client\";\n\nexport { useResource } from \"./useResource\";\nexport type {\n  PaginatedQueryRequiredParams,\n  Pagination,\n} from \"./usePaginatedResource\";\nexport { usePaginatedResource } from \"./usePaginatedResource\";\nexport { useOperation } from \"./useOperation\";\nexport type { OperationCallWrapper } from \"./useOperation\";\nexport type { ResourceResult } from \"./createResourceResultFromState\";\nexport {\n  TransportClientProvider,\n  TransportClientContext,\n  TransportClientStateContext,\n  TransportClientReadyContext,\n  useTransportClientState,\n  useTransportClientIsReady,\n} from \"./TransportClientProvider\";\nexport { ResourcesServerError } from \"liwi-resources-client\";\n\nexport type SimplifiedConnectionState =\n  | \"connected\"\n  | \"connecting\"\n  | \"disconnected\";\n\nexport const transportClientStateToSimplifiedState = (\n  state: ConnectionStates,\n): SimplifiedConnectionState => {\n  switch (state) {\n    case \"opening\":\n    case \"connecting\":\n    case \"reconnect-scheduled\":\n    case \"wait-for-visibility\":\n      return \"connecting\";\n\n    case \"connected\":\n      return \"connected\";\n\n    case \"closed\":\n      return \"disconnected\";\n\n    default:\n      throw new Error(\"Invalid state\");\n  }\n};\n"],"names":[],"mappings":"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"}