{"version":3,"file":"index-node.mjs","sources":["../src/useResource.target-node.ts","../src/usePaginatedResource.ts","../src/useOperation.ts","../src/TransportClientProvider.tsx","../src/index.ts"],"sourcesContent":["import type { Query, QueryParams } from \"liwi-resources-client\";\nimport type { ResourceResult } from \"./createResourceResultFromState\";\nimport type { UseResourceOptions } from \"./useResource\";\n\nexport function useResource<Result, Params extends QueryParams<Params>>(\n  createQuery: (initialParams: Params) => Query<Result, Params>,\n  options: UseResourceOptions<Params>,\n  deps: any[],\n): ResourceResult<Result, Params> {\n  return {\n    query: undefined as any,\n    initialLoading: true,\n    initialError: false,\n    fetched: false,\n    fetching: true,\n    data: undefined,\n    meta: undefined,\n    queryInfo: undefined,\n    error: undefined,\n  };\n}\n","import type { Query, QueryParams } from \"liwi-resources-client\";\nimport { useMemo } from \"react\";\nimport type {\n  ResourceResultInitialError,\n  ResourceResultInitialLoading,\n  ResourceResultLoaded,\n} from \"./createResourceResultFromState\";\nimport type { UseResourceOptions } from \"./useResource\";\nimport { useResource } from \"./useResource\";\n\nexport interface PaginatedQueryRequiredParams {\n  page: number;\n}\n\ntype PaginatedQueryParams<Params extends Record<string, unknown>> =\n  PaginatedQueryRequiredParams & QueryParams<Params>;\n\ntype UsePaginatedResourceOptions<Params extends PaginatedQueryParams<Params>> =\n  UseResourceOptions<Params>;\n\nexport interface Pagination {\n  totalPages: number;\n}\n\ninterface PaginatedResourceResultInitialLoading<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> extends ResourceResultInitialLoading<Data, Params> {\n  pagination: undefined;\n}\n\ninterface PaginatedResourceResultInitialError<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> extends ResourceResultInitialError<Data, Params> {\n  pagination: undefined;\n}\n\ninterface PaginatedResourceResultLoaded<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> extends ResourceResultLoaded<Data, Params> {\n  pagination: Pagination;\n}\n\nexport type PaginatedResourceResult<\n  Data,\n  Params extends PaginatedQueryParams<Params>,\n> =\n  | PaginatedResourceResultInitialError<Data, Params>\n  | PaginatedResourceResultInitialLoading<Data, Params>\n  | PaginatedResourceResultLoaded<Data, Params>;\n\nexport function usePaginatedResource<\n  Result,\n  Params extends PaginatedQueryParams<Params>,\n>(\n  createQuery: (initialParams: Params) => Query<Result, Params>,\n  options: UsePaginatedResourceOptions<Params>,\n  deps: any[],\n): PaginatedResourceResult<Result, Params> {\n  const result = useResource(createQuery, options, deps);\n  const total = result.meta?.total;\n  const limit = result.queryInfo?.limit;\n\n  const pagination = useMemo<Pagination | undefined>(() => {\n    if (total === undefined) return undefined;\n\n    return {\n      totalPages: limit ? Math.ceil(total / limit) : 1,\n    };\n  }, [total, limit]);\n\n  return useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      ({ ...result, pagination }) as PaginatedResourceResult<Result, Params>,\n    [result, pagination],\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nexport interface OperationState {\n  loading: boolean;\n  error: Error | undefined;\n}\n\nexport type OperationCallWrapper<T extends (...args: any) => Promise<any>> = (\n  ...args: Parameters<T>\n) => Promise<[Error | any | undefined, Awaited<ReturnType<T>> | undefined]>;\n\nexport function useOperation<T extends (...args: any) => Promise<any>>(\n  operationCall: T,\n): [OperationCallWrapper<T>, OperationState] {\n  const [state, setState] = useState<OperationState>(() => ({\n    loading: false,\n    error: undefined,\n  }));\n\n  const operationCallWrapper = useCallback<OperationCallWrapper<T>>(\n    (...params: Parameters<T>) => {\n      setState({\n        loading: true,\n        error: undefined,\n      });\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return operationCall(...(params as any)).then(\n          (result) => {\n            setState({\n              loading: false,\n              error: undefined,\n            });\n            return [undefined, result];\n          },\n          (error: unknown) => {\n            setState({\n              loading: false,\n              error: error instanceof Error ? error : new Error(String(error)),\n            });\n            return [error, undefined];\n          },\n        );\n      } catch (error) {\n        setState({\n          loading: false,\n          error: error as Error,\n        });\n        return Promise.resolve([error, undefined]);\n      }\n    },\n    [operationCall],\n  );\n  return [operationCallWrapper, state];\n}\n","import type { ConnectionStates, TransportClient } from \"liwi-resources-client\";\nimport type { ReactNode } from \"react\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const TransportClientContext = createContext<TransportClient>(\n  undefined as unknown as TransportClient,\n);\n\nexport const TransportClientStateContext =\n  createContext<ConnectionStates>(\"opening\");\nexport const TransportClientReadyContext = createContext<boolean>(false);\n\nexport const useTransportClientState = (): ConnectionStates =>\n  useContext(TransportClientStateContext);\nexport const useTransportClientIsReady = (): boolean =>\n  useContext(TransportClientReadyContext);\n\ntype TransportClientProviderProps<P extends Record<never, unknown>> = P & {\n  createFn: (params: Omit<P, \"children\" | \"createFn\">) => TransportClient;\n  children: ReactNode;\n};\n\nexport function TransportClientProvider<P extends Record<never, unknown>>({\n  createFn,\n  children,\n  ...params\n}: TransportClientProviderProps<P>): ReactNode {\n  // eslint-disable-next-line react/hook-use-state\n  const [client] = useState(() => {\n    return createFn(params);\n  });\n  const [connectionState, setConnectionState] =\n    useState<ConnectionStates>(\"opening\");\n\n  useEffect(() => {\n    const closeConnectionStateListener =\n      client.listenStateChange(setConnectionState);\n    client.connect();\n\n    return (): void => {\n      closeConnectionStateListener();\n      client.close();\n    };\n  }, [client]);\n\n  return (\n    <TransportClientContext.Provider value={client}>\n      <TransportClientStateContext.Provider value={connectionState}>\n        <TransportClientReadyContext.Provider\n          value={connectionState === \"connected\"}\n        >\n          {children}\n        </TransportClientReadyContext.Provider>\n      </TransportClientStateContext.Provider>\n    </TransportClientContext.Provider>\n  );\n}\n","import type { ConnectionStates } from \"liwi-resources-client\";\n\nexport { useResource } from \"./useResource\";\nexport type {\n  PaginatedQueryRequiredParams,\n  Pagination,\n} from \"./usePaginatedResource\";\nexport { usePaginatedResource } from \"./usePaginatedResource\";\nexport { useOperation } from \"./useOperation\";\nexport type { OperationCallWrapper } from \"./useOperation\";\nexport type { ResourceResult } from \"./createResourceResultFromState\";\nexport {\n  TransportClientProvider,\n  TransportClientContext,\n  TransportClientStateContext,\n  TransportClientReadyContext,\n  useTransportClientState,\n  useTransportClientIsReady,\n} from \"./TransportClientProvider\";\nexport { ResourcesServerError } from \"liwi-resources-client\";\n\nexport type SimplifiedConnectionState =\n  | \"connected\"\n  | \"connecting\"\n  | \"disconnected\";\n\nexport const transportClientStateToSimplifiedState = (\n  state: ConnectionStates,\n): SimplifiedConnectionState => {\n  switch (state) {\n    case \"opening\":\n    case \"connecting\":\n    case \"reconnect-scheduled\":\n    case \"wait-for-visibility\":\n      return \"connecting\";\n\n    case \"connected\":\n      return \"connected\";\n\n    case \"closed\":\n      return \"disconnected\";\n\n    default:\n      throw new Error(\"Invalid state\");\n  }\n};\n"],"names":[],"mappings":"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"}