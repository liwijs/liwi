{"version":3,"file":"index-node10.es.js","sources":["../src/createSimpleWebsocketClient.ts","../src/createWebsocketTransportClient.ts"],"sourcesContent":["/* eslint-disable unicorn/prefer-add-event-listener */\nimport Backoff from 'backo2';\n\ntype States =\n  | 'closed'\n  | 'opening'\n  | 'connecting'\n  | 'connected'\n  | 'reconnecting';\n\nexport type StateChangeListener = (newState: States) => void;\n\nexport type StateChangeListenerCreator = (\n  listener: StateChangeListener,\n) => () => void;\n\nexport interface SimpleWebsocketClientOptions {\n  url: string;\n  protocols?: string | string[];\n  timeout?: number;\n  reconnection?: boolean;\n  reconnectionDelayMin?: number;\n  reconnectionDelayMax?: number;\n  reconnectionAttempts?: number;\n  inactivityTimeout?: number;\n  onMessage: (message: MessageEvent) => void;\n  onError: (event: Event) => void;\n}\n\ntype Message = Parameters<WebSocket['send']>[0];\n\nexport interface WebsocketTransport {\n  connect(): void;\n  close(): void;\n  isConnected(): boolean;\n  sendMessage(message: Message): void;\n  listenStateChange: StateChangeListenerCreator;\n}\n\ntype Timeouts = 'maxConnect' | 'tryReconnect' | 'inactivity';\n\nexport default function createSimpleWebsocketClient({\n  url,\n  protocols,\n  reconnection = true,\n  reconnectionDelayMin = 1000,\n  reconnectionDelayMax = 30000,\n  reconnectionAttempts = Infinity,\n  onMessage,\n  onError,\n}: SimpleWebsocketClientOptions): WebsocketTransport {\n  let ws: WebSocket | null = null;\n  let currentState: States = 'closed';\n  let isConnected = false;\n  const stateChangeListeners = new Set<StateChangeListener>();\n\n  const backoff = new Backoff({\n    min: reconnectionDelayMin,\n    max: reconnectionDelayMax,\n    factor: 1.2,\n  });\n\n  const timeouts: Record<Timeouts, null | ReturnType<typeof setTimeout>> = {\n    maxConnect: null,\n    tryReconnect: null,\n    inactivity: null,\n  };\n\n  const setCurrentState = (newState: States): void => {\n    if (currentState === newState) return;\n    currentState = newState;\n    isConnected = currentState === 'connected';\n    stateChangeListeners.forEach((listener) => listener(newState));\n  };\n\n  const clearInternalTimeout = (timeoutKey: Timeouts): void => {\n    const timeout = timeouts[timeoutKey];\n    if (timeout) {\n      clearTimeout(timeout);\n      timeouts[timeoutKey] = null;\n    }\n  };\n\n  const closeWebsocket = (): void => {\n    clearInternalTimeout('inactivity');\n    if (ws) {\n      clearInternalTimeout('maxConnect');\n      clearInternalTimeout('tryReconnect');\n      ws = null;\n      setCurrentState('closed');\n    }\n  };\n\n  let tryReconnect: () => void;\n\n  const connect = (): void => {\n    setCurrentState('opening');\n    const webSocket = new WebSocket(url, protocols);\n    ws = webSocket;\n    clearInternalTimeout('maxConnect');\n    webSocket.onopen = (): void => {\n      setCurrentState('connecting');\n      clearInternalTimeout('maxConnect');\n    };\n\n    webSocket.onclose = (): void => {\n      if (currentState !== 'closed') {\n        if (tryReconnect) {\n          tryReconnect();\n        } else {\n          closeWebsocket();\n        }\n      }\n    };\n\n    webSocket.onmessage = (message): void => {\n      if (message.data === 'connection-ack') {\n        setCurrentState('connected');\n      } else {\n        onMessage(message);\n      }\n    };\n\n    webSocket.onerror = (event): void => {\n      onError(event);\n    };\n  };\n\n  if (reconnection) {\n    tryReconnect = () => {\n      if (backoff.attempts >= reconnectionAttempts) {\n        return;\n      }\n\n      if (currentState === 'reconnecting') {\n        return;\n      }\n\n      setCurrentState('reconnecting');\n      clearInternalTimeout('tryReconnect');\n      const delay = backoff.duration();\n      timeouts.tryReconnect = setTimeout(() => {\n        connect();\n      }, delay);\n    };\n  }\n\n  const wsTransport: WebsocketTransport = {\n    connect,\n\n    close() {\n      if (ws) {\n        if (currentState === 'connected') {\n          ws.send('close');\n        }\n        closeWebsocket();\n      }\n    },\n\n    isConnected() {\n      return isConnected;\n    },\n\n    sendMessage(message): void {\n      if (!ws) throw new Error('Cannot send message');\n      ws.send(message);\n    },\n\n    listenStateChange: (listener) => {\n      stateChangeListeners.add(listener);\n      return (): void => {\n        stateChangeListeners.delete(listener);\n      };\n    },\n  };\n\n  return wsTransport;\n}\n","/* eslint-disable max-lines */\nimport { encode, decode, ExtendedJsonValue } from 'extended-json';\nimport { ResourcesServerError } from 'liwi-resources-client';\nimport type {\n  TransportClient,\n  TransportClientSubscribeCallback,\n  TransportClientSubscribeResult,\n  ToClientMessage,\n  ToServerMessages,\n  ToServerSubscribeMessages,\n  AckError,\n} from 'liwi-resources-client';\nimport Logger from 'nightingale-logger';\nimport createSimpleWebsocketClient, {\n  SimpleWebsocketClientOptions,\n} from './createSimpleWebsocketClient';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\ntype Resolve<T> = (result: T) => void;\ntype Reject = (reason?: any) => void;\n\ninterface Ack<T> {\n  reject: Reject;\n  resolve: Resolve<T>;\n}\n\ninterface Subscription<\n  T extends keyof ToServerSubscribeMessages<any>,\n  U,\n  Message extends { payload: any } = any\n> extends Ack<U> {\n  type: T;\n  message: Message;\n  callback: TransportClientSubscribeCallback<U>;\n}\n\nexport type WebsocketTransportClientOptions = Omit<\n  SimpleWebsocketClientOptions,\n  'onMessage' | 'url'\n> &\n  Partial<Pick<SimpleWebsocketClientOptions, 'url'>>;\n\ntype PromiseExecutor<T> = (\n  resolve: (value?: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void,\n) => void;\n\ntype Handler<T> = (id: number, error: AckError | null, result: T) => void;\n\nclass SubscribeResultPromise<\n  Result,\n  Payload extends Record<keyof Payload & string, ExtendedJsonValue | undefined>\n>\n  implements\n    TransportClientSubscribeResult<Result, Payload>,\n    PromiseLike<Result> {\n  private readonly promise: Promise<Result>;\n\n  readonly stop: TransportClientSubscribeResult<Result, Payload>['stop'];\n\n  readonly cancel: TransportClientSubscribeResult<Result, Payload>['cancel'];\n\n  // readonly changePayload: TransportClientSubscribeResult<\n  //   Result,\n  //   Payload\n  // >['changePayload'];\n\n  constructor({\n    executor,\n    stop,\n  }: {\n    executor: PromiseExecutor<Result>;\n    stop: TransportClientSubscribeResult<Result, Payload>['stop'];\n    // changePayload: TransportClientSubscribeResult<\n    //   Result,\n    //   Payload\n    // >['changePayload'];\n  }) {\n    this.promise = new Promise((resolve, reject) => {\n      return executor(resolve, reject);\n    });\n    this.stop = stop;\n    this.cancel = stop;\n    // this.changePayload = changePayload;\n  }\n\n  then<TResult1 = Result, TResult2 = never>(\n    onfulfilled?:\n      | ((value: Result) => TResult1 | PromiseLike<TResult1>)\n      | null\n      | undefined,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): PromiseLike<TResult1 | TResult2> {\n    return this.promise.then(onfulfilled, onrejected);\n  }\n\n  catch<TResult2 = never>(\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): PromiseLike<Result | TResult2> {\n    return this.promise.catch(onrejected);\n  }\n}\n\n// TODO handle resubscriptions after reconnect (or in useEffect ?)\n// TODO handle send before connected\n// TODO reject on connection close OR keep promise hang ?\n\nconst createSafeError = (error: AckError): ResourcesServerError => {\n  return new ResourcesServerError(error.code, error.message);\n};\n\nexport default function createResourcesWebsocketClient({\n  url,\n  ...options\n}: WebsocketTransportClientOptions): TransportClient {\n  let currentId = 1;\n  let currentSubscriptionId = 1;\n  const acks = new Map<number, Ack<any>>(); // TODO in progress / unsent / sending => find better name\n  const subscriptions = new Map<number, Subscription<any, any>>();\n\n  if (!url) {\n    url = `ws${window.location.protocol === 'https' ? 's' : ''}://${\n      window.location.host\n    }/ws`;\n  }\n  logger.info('create', { url });\n\n  const handlers: Record<ToClientMessage[0], Handler<any>> = {\n    ack: (id, error, result) => {\n      logger.debug('ack', { id });\n      const ack = acks.get(id);\n      if (!ack) {\n        logger.warn('no ack found', { id });\n      } else if (error) {\n        ack.reject(createSafeError(error));\n      } else {\n        ack.resolve(result);\n      }\n    },\n    subscription: (id, error, result) => {\n      logger.debug('subscription', { id });\n      const subscription = subscriptions.get(id);\n      if (!subscription) {\n        if (id < currentSubscriptionId) {\n          logger.warn('subscription previously closed', { id });\n        } else {\n          logger.warn('no subscription found', { id });\n        }\n      } else if (error) {\n        subscription.callback(createSafeError(error), null);\n      } else {\n        subscription.callback(null, result);\n      }\n    },\n  };\n\n  const wsClient = createSimpleWebsocketClient({\n    ...options,\n    url,\n    onMessage: (event) => {\n      logger.info('message', { data: event.data });\n      const [type, id, error, result] = decode<ToClientMessage>(event.data);\n      const handler = handlers[type];\n\n      if (handler) {\n        handler(id, error, result);\n      }\n    },\n  });\n\n  const sendMessage = <T extends keyof ToServerMessages>(\n    type: T,\n    id: number | null,\n    payload: ToServerMessages[T][0],\n  ): void => wsClient.sendMessage(encode([type, id, payload as any]));\n\n  const sendWithAck = <T extends keyof ToServerMessages>(\n    type: T,\n    message: ToServerMessages[T][0],\n  ): Promise<ToServerMessages[T][1]> => {\n    return new Promise((resolve, reject) => {\n      const id = currentId++;\n      acks.set(id, {\n        resolve: (result) => {\n          acks.delete(id);\n          resolve(result);\n        },\n        reject: (err) => {\n          acks.delete(id);\n          reject(err);\n        },\n      });\n      sendMessage(type, id, message);\n    });\n  };\n\n  const sendThrowNotConnected = (): never => {\n    const error = new Error('Websocket not connected');\n    error.name = 'NetworkError';\n    throw error;\n  };\n\n  const resourcesClient: TransportClient = {\n    connect: () => wsClient.connect(),\n    close: () => wsClient.close(),\n    listenStateChange: wsClient.listenStateChange,\n    send: sendThrowNotConnected,\n\n    subscribe: <\n      T extends keyof ToServerSubscribeMessages<Payload>,\n      Payload extends Record<keyof Payload & string, ExtendedJsonValue>,\n      Result,\n      V extends ToServerSubscribeMessages<Payload>[T][2]\n    >(\n      type: T,\n      messageWithoutSubscriptionId: Omit<\n        ToServerSubscribeMessages<Payload, Result>[T][0],\n        'subscriptionId'\n      >,\n      callback: TransportClientSubscribeCallback<V>,\n    ): TransportClientSubscribeResult<Result, Payload> => {\n      const id = currentId++;\n      const subscriptionId = currentSubscriptionId++;\n      const message = { ...messageWithoutSubscriptionId, subscriptionId };\n\n      return new SubscribeResultPromise<Result, Payload>({\n        executor: (resolve, reject) => {\n          subscriptions.set(subscriptionId, {\n            type,\n            message,\n            resolve,\n            reject,\n            callback,\n          });\n          if (wsClient.isConnected()) {\n            // TODO reject should remove subscription ?\n            sendWithAck(type, message).then(resolve, reject);\n          }\n        },\n        stop: (): void => {\n          acks.delete(id);\n          subscriptions.delete(subscriptionId);\n          // TODO what if reconnect (backend keeps subscription) and closed at this time ?\n          if (wsClient.isConnected()) {\n            sendMessage('subscribe:close', null, { subscriptionId });\n          }\n        },\n\n        // changePayload: (payload: Payload): Promise<void> => {\n        //   return new Promise((resolve, reject) => {\n        //     const subscription = subscriptions.get(subscriptionId);\n        //     if (!subscription) return reject(new Error('Invalid subscription'));\n        //     subscription.message.payload = payload;\n        //     if (wsClient.isConnected()) {\n        //       sendWithAck('subscribe:changePayload', payload).then(\n        //         resolve,\n        //         reject,\n        //       );\n        //     } else {\n        //       return reject(new Error('Not connected'));\n        //     }\n        //   });\n        // },\n      });\n    },\n  };\n\n  wsClient.listenStateChange((newState) => {\n    logger.info('newState', { newState });\n    if (newState === 'connected') {\n      resourcesClient.send = sendWithAck as TransportClient['send'];\n      subscriptions.forEach((subscription, subscriptionId) => {\n        sendWithAck(subscription.type, subscription.message).then(\n          subscription.resolve,\n          subscription.reject,\n        );\n      });\n    } else {\n      resourcesClient.send = sendThrowNotConnected;\n      acks.forEach((ack) => {\n        ack.reject(\n          new Error(`Failed to get ack, connection state is now ${newState}`),\n        );\n      });\n      acks.clear();\n\n      if (newState === 'closed') {\n        subscriptions.forEach((subscription) => {\n          subscription.reject(new Error('Subscription closed'));\n        });\n      }\n    }\n  });\n\n  return resourcesClient;\n}\n"],"names":["createSimpleWebsocketClient","url","protocols","reconnection","reconnectionDelayMin","reconnectionDelayMax","reconnectionAttempts","Infinity","onMessage","onError","ws","currentState","isConnected","stateChangeListeners","Set","backoff","Backoff","min","max","factor","timeouts","maxConnect","tryReconnect","inactivity","setCurrentState","newState","forEach","listener","clearInternalTimeout","timeoutKey","timeout","clearTimeout","closeWebsocket","connect","webSocket","WebSocket","onopen","onclose","onmessage","message","data","onerror","event","attempts","delay","duration","setTimeout","close","send","sendMessage","Error","listenStateChange","add","delete","logger","Logger","SubscribeResultPromise","constructor","executor","stop","promise","Promise","resolve","reject","cancel","then","onfulfilled","onrejected","catch","createSafeError","error","ResourcesServerError","code","createResourcesWebsocketClient","options","currentId","currentSubscriptionId","acks","Map","subscriptions","window","location","protocol","host","info","handlers","ack","id","result","debug","get","warn","subscription","callback","wsClient","type","decode","handler","payload","encode","sendWithAck","set","err","sendThrowNotConnected","name","resourcesClient","subscribe","messageWithoutSubscriptionId","subscriptionId","clear"],"mappings":"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"}