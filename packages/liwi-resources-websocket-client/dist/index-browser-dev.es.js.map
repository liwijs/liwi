{"version":3,"file":"index-browser-dev.es.js","sources":["../src/createSimpleWebsocketClient.ts","../src/createWebsocketTransportClient.ts"],"sourcesContent":["/* eslint-disable unicorn/prefer-add-event-listener, max-lines */\nimport Backoff from 'backo2';\nimport type { ConnectionStates } from 'liwi-resources-client';\n\nexport type StateChangeListener = (newState: ConnectionStates) => void;\n\nexport type StateChangeListenerCreator = (\n  listener: StateChangeListener,\n) => () => void;\n\nexport interface SimpleWebsocketClientOptions {\n  url: string;\n  protocols?: string | string[];\n  timeout?: number;\n  reconnection?: boolean;\n  reconnectionDelayMin?: number;\n  reconnectionDelayMax?: number;\n  reconnectionAttempts?: number;\n  inactivityTimeout?: number;\n  onMessage: (message: MessageEvent) => void;\n  onError?: (event: Event) => void;\n}\n\ntype Message = Parameters<WebSocket['send']>[0];\n\nexport interface WebsocketTransport {\n  connect: () => void;\n  close: () => void;\n  isConnected: () => boolean;\n  sendMessage: (message: Message) => void;\n  listenStateChange: StateChangeListenerCreator;\n}\n\ntype Timeouts = 'maxConnect' | 'tryReconnect' | 'inactivity';\n\nexport default function createSimpleWebsocketClient({\n  url,\n  protocols,\n  reconnection = true,\n  reconnectionDelayMin = 1000,\n  reconnectionDelayMax = 30 * 1000,\n  reconnectionAttempts = Infinity,\n  onMessage,\n  onError,\n}: SimpleWebsocketClientOptions): WebsocketTransport {\n  let ws: WebSocket | null = null;\n  let currentState: ConnectionStates = 'closed';\n  let isConnected = false;\n  const stateChangeListeners = new Set<StateChangeListener>();\n\n  const backoff = new Backoff({\n    min: reconnectionDelayMin,\n    max: reconnectionDelayMax,\n    factor: 1.2,\n  });\n\n  const timeouts: Record<Timeouts, null | ReturnType<typeof setTimeout>> = {\n    maxConnect: null,\n    tryReconnect: null,\n    inactivity: null,\n  };\n\n  const setCurrentState = (newState: ConnectionStates): void => {\n    if (currentState === newState) return;\n    currentState = newState;\n    isConnected = currentState === 'connected';\n    stateChangeListeners.forEach((listener) => listener(newState));\n  };\n\n  const clearInternalTimeout = (timeoutKey: Timeouts): void => {\n    const timeout = timeouts[timeoutKey];\n    if (timeout) {\n      clearTimeout(timeout);\n      timeouts[timeoutKey] = null;\n    }\n  };\n\n  const closeWebsocket = (): void => {\n    clearInternalTimeout('inactivity');\n    if (ws) {\n      clearInternalTimeout('maxConnect');\n      clearInternalTimeout('tryReconnect');\n      ws = null;\n      setCurrentState('closed');\n    }\n  };\n\n  let tryReconnect: (() => void) | undefined;\n\n  const connect = (): void => {\n    const webSocket = new WebSocket(url, protocols);\n    ws = webSocket;\n    clearInternalTimeout('maxConnect');\n    setCurrentState('connecting');\n    webSocket.onopen = (): void => {\n      backoff.reset();\n      clearInternalTimeout('maxConnect');\n    };\n\n    const handleCloseOrError = (): void => {\n      if (currentState === 'closed') return;\n      if (!tryReconnect) {\n        closeWebsocket();\n      } else if (document.visibilityState === 'hidden') {\n        setCurrentState('wait-for-visibility');\n      } else {\n        tryReconnect();\n      }\n    };\n\n    webSocket.onclose = handleCloseOrError;\n\n    webSocket.onmessage = (message): void => {\n      if (message.data === 'connection-ack') {\n        setCurrentState('connected');\n      } else {\n        onMessage(message);\n      }\n    };\n\n    webSocket.onerror = (event): void => {\n      console.error('ws error', event);\n      if (onError) onError(event);\n      handleCloseOrError();\n    };\n  };\n\n  if (reconnection) {\n    tryReconnect = () => {\n      if (backoff.attempts >= reconnectionAttempts) {\n        return;\n      }\n\n      if (currentState === 'reconnect-scheduled') {\n        return;\n      }\n\n      setCurrentState('reconnect-scheduled');\n      clearInternalTimeout('tryReconnect');\n      const delay = backoff.duration();\n      timeouts.tryReconnect = setTimeout(() => {\n        connect();\n      }, delay);\n    };\n  }\n\n  const visibilityChangHandler: (() => void) | undefined = !tryReconnect\n    ? undefined\n    : () => {\n        if (document.visibilityState === 'hidden') {\n          if (currentState === 'reconnect-scheduled') {\n            setCurrentState('wait-for-visibility');\n            if (timeouts.tryReconnect !== null) {\n              clearTimeout(timeouts.tryReconnect);\n            }\n          }\n          return;\n        }\n        if (currentState !== 'wait-for-visibility') return;\n\n        if (tryReconnect) {\n          backoff.reset();\n          tryReconnect();\n        }\n      };\n\n  if (visibilityChangHandler) {\n    window.addEventListener('visibilitychange', visibilityChangHandler);\n  }\n  const wsTransport: WebsocketTransport = {\n    connect,\n\n    close() {\n      if (ws) {\n        if (currentState === 'connected') {\n          ws.send('close');\n        }\n        closeWebsocket();\n      }\n      if (visibilityChangHandler) {\n        window.removeEventListener('visibilitychange', visibilityChangHandler);\n      }\n    },\n\n    isConnected() {\n      return isConnected;\n    },\n\n    sendMessage(message): void {\n      if (!ws) throw new Error('Cannot send message');\n      ws.send(message);\n    },\n\n    listenStateChange: (listener) => {\n      stateChangeListeners.add(listener);\n      return (): void => {\n        stateChangeListeners.delete(listener);\n      };\n    },\n  };\n\n  return wsTransport;\n}\n","/* eslint-disable max-lines */\nimport type { ExtendedJsonValue } from 'extended-json';\nimport { encode, decode } from 'extended-json';\nimport { ResourcesServerError } from 'liwi-resources-client';\nimport type {\n  TransportClient,\n  TransportClientSubscribeCallback,\n  TransportClientSubscribeResult,\n  ToClientMessage,\n  ToServerMessages,\n  ToServerSubscribeMessages,\n  AckError,\n} from 'liwi-resources-client';\nimport Logger from 'nightingale-logger';\nimport type { SimpleWebsocketClientOptions } from './createSimpleWebsocketClient';\nimport createSimpleWebsocketClient from './createSimpleWebsocketClient';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\ntype Resolve<T> = (result: T) => void;\ntype Reject = (reason?: any) => void;\n\ninterface Ack<T> {\n  reject: Reject;\n  resolve: Resolve<T>;\n}\n\ninterface Subscription<\n  T extends keyof ToServerSubscribeMessages<any>,\n  U,\n  Message extends { payload: any } = any\n> extends Ack<U> {\n  type: T;\n  message: Message;\n  callback: TransportClientSubscribeCallback<U>;\n}\n\nexport type WebsocketTransportClientOptions = Omit<\n  SimpleWebsocketClientOptions,\n  'onMessage' | 'url'\n> &\n  Partial<Pick<SimpleWebsocketClientOptions, 'url'>>;\n\ntype PromiseExecutor<T> = (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void,\n) => void;\n\ntype Handler<T> = (id: number, error: AckError | null, result: T) => void;\n\nclass SubscribeResultPromise<\n  Result,\n  Payload extends Record<keyof Payload & string, ExtendedJsonValue | undefined>\n> implements\n    TransportClientSubscribeResult<Result, Payload>,\n    PromiseLike<Result> {\n  private readonly promise: Promise<Result>;\n\n  readonly stop: TransportClientSubscribeResult<Result, Payload>['stop'];\n\n  readonly cancel: TransportClientSubscribeResult<Result, Payload>['cancel'];\n\n  // readonly changePayload: TransportClientSubscribeResult<\n  //   Result,\n  //   Payload\n  // >['changePayload'];\n\n  constructor({\n    executor,\n    stop,\n  }: {\n    executor: PromiseExecutor<Result>;\n    stop: TransportClientSubscribeResult<Result, Payload>['stop'];\n    // changePayload: TransportClientSubscribeResult<\n    //   Result,\n    //   Payload\n    // >['changePayload'];\n  }) {\n    this.promise = new Promise<Result>((resolve, reject) => {\n      return executor(resolve, reject);\n    });\n    this.stop = stop;\n    this.cancel = stop;\n    // this.changePayload = changePayload;\n  }\n\n  then<TResult1 = Result, TResult2 = never>(\n    onfulfilled?:\n      | ((value: Result) => TResult1 | PromiseLike<TResult1>)\n      | null\n      | undefined,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): PromiseLike<TResult1 | TResult2> {\n    return this.promise.then(onfulfilled, onrejected);\n  }\n\n  catch<TResult2 = never>(\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): PromiseLike<Result | TResult2> {\n    return this.promise.catch(onrejected);\n  }\n}\n\n// TODO handle resubscriptions after reconnect (or in useEffect ?)\n// TODO handle send before connected\n// TODO reject on connection close OR keep promise hang ?\n\nconst createSafeError = (error: AckError): ResourcesServerError => {\n  return new ResourcesServerError(error.code, error.message);\n};\n\nexport default function createResourcesWebsocketClient({\n  url,\n  ...options\n}: WebsocketTransportClientOptions): TransportClient {\n  let currentId = 1;\n  let currentSubscriptionId = 1;\n  const acks = new Map<number, Ack<any>>(); // TODO in progress / unsent / sending => find better name\n  const subscriptions = new Map<number, Subscription<any, any>>();\n\n  if (!url) {\n    url = `ws${window.location.protocol === 'https:' ? 's' : ''}://${\n      window.location.host\n    }/ws`;\n  }\n  logger.info('create', { url });\n\n  const handlers: Record<ToClientMessage[0], Handler<any>> = {\n    ack: (id, error, result) => {\n      logger.debug('ack', { id });\n      const ack = acks.get(id);\n      if (!ack) {\n        logger.warn('no ack found', { id });\n      } else if (error) {\n        ack.reject(createSafeError(error));\n      } else {\n        ack.resolve(result);\n      }\n    },\n    subscription: (id, error, result) => {\n      logger.debug('subscription', { id });\n      const subscription = subscriptions.get(id);\n      if (!subscription) {\n        if (id < currentSubscriptionId) {\n          logger.warn('subscription previously closed', { id });\n        } else {\n          logger.warn('no subscription found', { id });\n        }\n      } else if (error) {\n        subscription.callback(createSafeError(error), null);\n      } else {\n        subscription.callback(null, result);\n      }\n    },\n  };\n\n  const wsClient = createSimpleWebsocketClient({\n    ...options,\n    url,\n    onMessage: (event) => {\n      logger.debug('message', { data: event.data });\n      const [type, id, error, result] = decode<ToClientMessage>(event.data);\n      const handler = handlers[type];\n\n      if (handler) {\n        handler(id, error, result);\n      }\n    },\n  });\n\n  const sendMessage = <T extends keyof ToServerMessages>(\n    type: T,\n    id: number | null,\n    payload: ToServerMessages[T][0],\n  ): void => wsClient.sendMessage(encode([type, id, payload as any]));\n\n  const sendWithAck = <T extends keyof ToServerMessages>(\n    type: T,\n    message: ToServerMessages[T][0],\n  ): Promise<ToServerMessages[T][1]> => {\n    return new Promise((resolve, reject) => {\n      const id = currentId++;\n      acks.set(id, {\n        resolve: (result) => {\n          acks.delete(id);\n          resolve(result);\n        },\n        reject: (err) => {\n          acks.delete(id);\n          reject(err);\n        },\n      });\n      sendMessage(type, id, message);\n    });\n  };\n\n  const sendThrowNotConnected = (): never => {\n    const error = new Error('Websocket not connected');\n    error.name = 'NetworkError';\n    throw error;\n  };\n\n  const resourcesClient: TransportClient = {\n    connect: () => wsClient.connect(),\n    close: () => wsClient.close(),\n    listenStateChange: wsClient.listenStateChange,\n    send: sendThrowNotConnected,\n\n    subscribe: <\n      T extends keyof ToServerSubscribeMessages<Payload>,\n      Payload extends Record<keyof Payload & string, ExtendedJsonValue>,\n      Result,\n      V extends ToServerSubscribeMessages<Payload>[T][2]\n    >(\n      type: T,\n      messageWithoutSubscriptionId: Omit<\n        ToServerSubscribeMessages<Payload, Result>[T][0],\n        'subscriptionId'\n      >,\n      callback: TransportClientSubscribeCallback<V>,\n    ): TransportClientSubscribeResult<Result, Payload> => {\n      const id = currentId++;\n      const subscriptionId = currentSubscriptionId++;\n      const message = { ...messageWithoutSubscriptionId, subscriptionId };\n\n      return new SubscribeResultPromise<Result, Payload>({\n        executor: (resolve, reject) => {\n          subscriptions.set(subscriptionId, {\n            type,\n            message,\n            resolve,\n            reject,\n            callback,\n          });\n          if (wsClient.isConnected()) {\n            // TODO reject should remove subscription ?\n            sendWithAck(type, message).then(resolve as any, reject);\n          }\n        },\n        stop: (): void => {\n          acks.delete(id);\n          subscriptions.delete(subscriptionId);\n          // TODO what if reconnect (backend keeps subscription) and closed at this time ?\n          if (wsClient.isConnected()) {\n            sendMessage('subscribe:close', null, { subscriptionId });\n          }\n        },\n\n        // changePayload: (payload: Payload): Promise<void> => {\n        //   return new Promise((resolve, reject) => {\n        //     const subscription = subscriptions.get(subscriptionId);\n        //     if (!subscription) return reject(new Error('Invalid subscription'));\n        //     subscription.message.payload = payload;\n        //     if (wsClient.isConnected()) {\n        //       sendWithAck('subscribe:changePayload', payload).then(\n        //         resolve,\n        //         reject,\n        //       );\n        //     } else {\n        //       return reject(new Error('Not connected'));\n        //     }\n        //   });\n        // },\n      });\n    },\n  };\n\n  wsClient.listenStateChange((newState) => {\n    logger.info('newState', { newState });\n    if (newState === 'connected') {\n      resourcesClient.send = sendWithAck as TransportClient['send'];\n      subscriptions.forEach((subscription, subscriptionId) => {\n        sendWithAck(subscription.type, subscription.message).then(\n          subscription.resolve,\n          subscription.reject,\n        );\n      });\n    } else {\n      resourcesClient.send = sendThrowNotConnected;\n      acks.forEach((ack) => {\n        ack.reject(\n          new Error(`Failed to get ack, connection state is now ${newState}`),\n        );\n      });\n      acks.clear();\n\n      if (newState === 'closed') {\n        subscriptions.forEach((subscription) => {\n          subscription.reject(new Error('Subscription closed'));\n        });\n      }\n    }\n  });\n\n  return resourcesClient;\n}\n"],"names":["createSimpleWebsocketClient","url","protocols","reconnection","reconnectionDelayMin","reconnectionDelayMax","reconnectionAttempts","Infinity","onMessage","onError","ws","currentState","isConnected","stateChangeListeners","Set","backoff","Backoff","min","max","factor","timeouts","maxConnect","tryReconnect","inactivity","setCurrentState","newState","forEach","listener","clearInternalTimeout","timeoutKey","timeout","clearTimeout","closeWebsocket","connect","webSocket","WebSocket","onopen","reset","handleCloseOrError","document","visibilityState","onclose","onmessage","message","data","onerror","event","console","error","attempts","delay","duration","setTimeout","visibilityChangHandler","undefined","window","addEventListener","close","send","removeEventListener","sendMessage","Error","listenStateChange","add","delete","logger","Logger","SubscribeResultPromise","executor","stop","promise","Promise","resolve","reject","cancel","then","onfulfilled","onrejected","catch","createSafeError","ResourcesServerError","code","createResourcesWebsocketClient","options","currentId","currentSubscriptionId","acks","Map","subscriptions","location","protocol","host","info","handlers","ack","id","result","debug","get","warn","subscription","callback","wsClient","decode","type","handler","payload","encode","sendWithAck","set","err","sendThrowNotConnected","name","resourcesClient","subscribe","messageWithoutSubscriptionId","subscriptionId","clear"],"mappings":"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"}