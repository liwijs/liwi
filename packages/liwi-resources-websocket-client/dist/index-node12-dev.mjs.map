{"version":3,"file":"index-node12-dev.mjs","sources":["../src/createSimpleWebsocketClient.ts","../src/createWebsocketTransportClient.ts"],"sourcesContent":["/* eslint-disable unicorn/prefer-add-event-listener, max-lines */\nimport Backoff from 'backo2';\nimport type { ConnectionStates } from 'liwi-resources-client';\n\nexport type StateChangeListener = (newState: ConnectionStates) => void;\n\nexport type StateChangeListenerCreator = (\n  listener: StateChangeListener,\n) => () => void;\n\nexport interface SimpleWebsocketClientOptions {\n  url: string;\n  protocols?: string | string[];\n  timeout?: number;\n  reconnection?: boolean;\n  reconnectionDelayMin?: number;\n  reconnectionDelayMax?: number;\n  reconnectionAttempts?: number;\n  inactivityTimeout?: number;\n  thirdWebsocketArgument?: unknown;\n  onMessage: (message: MessageEvent) => void;\n  onError?: (event: Event) => void;\n}\n\ntype Message = Parameters<WebSocket['send']>[0];\n\nexport interface WebsocketTransport {\n  connect: () => void;\n  close: () => void;\n  isConnected: () => boolean;\n  sendMessage: (message: Message) => void;\n  listenStateChange: StateChangeListenerCreator;\n}\n\ntype Timeouts = 'maxConnect' | 'tryReconnect' | 'inactivity';\n\nexport default function createSimpleWebsocketClient({\n  url,\n  protocols,\n  reconnection = true,\n  reconnectionDelayMin = 1000,\n  reconnectionDelayMax = 30 * 1000,\n  reconnectionAttempts = Infinity,\n  thirdWebsocketArgument,\n  onMessage,\n  onError,\n}: SimpleWebsocketClientOptions): WebsocketTransport {\n  let ws: WebSocket | null = null;\n  let currentState: ConnectionStates = 'closed';\n  let isConnected = false;\n  const stateChangeListeners = new Set<StateChangeListener>();\n\n  const backoff = new Backoff({\n    min: reconnectionDelayMin,\n    max: reconnectionDelayMax,\n    factor: 1.2,\n  });\n\n  const timeouts: Record<Timeouts, null | ReturnType<typeof setTimeout>> = {\n    maxConnect: null,\n    tryReconnect: null,\n    inactivity: null,\n  };\n\n  const setCurrentState = (newState: ConnectionStates): void => {\n    if (currentState === newState) return;\n    currentState = newState;\n    isConnected = currentState === 'connected';\n    stateChangeListeners.forEach((listener) => {\n      listener(newState);\n    });\n  };\n\n  const clearInternalTimeout = (timeoutKey: Timeouts): void => {\n    const timeout = timeouts[timeoutKey];\n    if (timeout) {\n      clearTimeout(timeout);\n      timeouts[timeoutKey] = null;\n    }\n  };\n\n  const closeWebsocket = (): void => {\n    clearInternalTimeout('inactivity');\n    if (ws) {\n      clearInternalTimeout('maxConnect');\n      clearInternalTimeout('tryReconnect');\n      ws = null;\n      setCurrentState('closed');\n    }\n  };\n\n  let tryReconnect: (() => void) | undefined;\n\n  const connect = (): void => {\n    const webSocket = thirdWebsocketArgument\n      ? // @ts-expect-error third argument for react-native\n        new WebSocket(url, protocols, thirdWebsocketArgument)\n      : new WebSocket(url, protocols);\n    ws = webSocket;\n    clearInternalTimeout('maxConnect');\n    setCurrentState('connecting');\n    webSocket.onopen = (): void => {\n      backoff.reset();\n      clearInternalTimeout('maxConnect');\n    };\n\n    const handleCloseOrError = (): void => {\n      if (currentState === 'closed') return;\n      if (!tryReconnect) {\n        closeWebsocket();\n      } else if (document.visibilityState === 'hidden') {\n        setCurrentState('wait-for-visibility');\n      } else {\n        tryReconnect();\n      }\n    };\n\n    webSocket.onclose = handleCloseOrError;\n\n    webSocket.onmessage = (message): void => {\n      if (message.data === 'connection-ack') {\n        setCurrentState('connected');\n      } else {\n        onMessage(message);\n      }\n    };\n\n    webSocket.onerror = (event): void => {\n      if (onError) {\n        onError(event);\n      } else {\n        console.error('ws error', event);\n      }\n      handleCloseOrError();\n    };\n  };\n\n  if (reconnection) {\n    tryReconnect = () => {\n      if (backoff.attempts >= reconnectionAttempts) {\n        return;\n      }\n\n      if (currentState === 'reconnect-scheduled') {\n        return;\n      }\n\n      setCurrentState('reconnect-scheduled');\n      clearInternalTimeout('tryReconnect');\n      const delay = backoff.duration();\n      timeouts.tryReconnect = setTimeout(() => {\n        connect();\n      }, delay);\n    };\n  }\n\n  const visibilityChangHandler: (() => void) | undefined = !tryReconnect\n    ? undefined\n    : () => {\n        if (document.visibilityState === 'hidden') {\n          if (currentState === 'reconnect-scheduled') {\n            setCurrentState('wait-for-visibility');\n            if (timeouts.tryReconnect !== null) {\n              clearTimeout(timeouts.tryReconnect);\n            }\n          }\n          return;\n        }\n        if (currentState !== 'wait-for-visibility') return;\n\n        if (tryReconnect) {\n          backoff.reset();\n          tryReconnect();\n        }\n      };\n\n  if (visibilityChangHandler) {\n    window.addEventListener('visibilitychange', visibilityChangHandler);\n  }\n  const wsTransport: WebsocketTransport = {\n    connect,\n\n    close() {\n      if (ws) {\n        if (currentState === 'connected') {\n          ws.send('close');\n        }\n        closeWebsocket();\n      }\n      if (visibilityChangHandler) {\n        window.removeEventListener('visibilitychange', visibilityChangHandler);\n      }\n    },\n\n    isConnected() {\n      return isConnected;\n    },\n\n    sendMessage(message): void {\n      if (!ws) throw new Error('Cannot send message');\n      ws.send(message);\n    },\n\n    listenStateChange: (listener) => {\n      stateChangeListeners.add(listener);\n      return (): void => {\n        stateChangeListeners.delete(listener);\n      };\n    },\n  };\n\n  return wsTransport;\n}\n","/* eslint-disable max-lines */\nimport type { ExtendedJsonValue } from 'extended-json';\nimport { encode, decode } from 'extended-json';\nimport { ResourcesServerError } from 'liwi-resources-client';\nimport type {\n  TransportClient,\n  TransportClientSubscribeCallback,\n  TransportClientSubscribeResult,\n  ToClientMessage,\n  ToServerMessages,\n  ToServerSubscribeMessages,\n  AckError,\n} from 'liwi-resources-client';\nimport Logger from 'nightingale-logger';\nimport type { SimpleWebsocketClientOptions } from './createSimpleWebsocketClient';\nimport createSimpleWebsocketClient from './createSimpleWebsocketClient';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\ntype Resolve<T> = (result: T) => void;\ntype Reject = (reason?: any) => void;\n\ninterface Ack<T> {\n  reject: Reject;\n  resolve: Resolve<T>;\n}\n\ninterface Subscription<\n  T extends keyof ToServerSubscribeMessages<any>,\n  U,\n  Message extends { payload: any } = any\n> extends Ack<U> {\n  type: T;\n  message: Message;\n  callback: TransportClientSubscribeCallback<U>;\n}\n\nexport type WebsocketTransportClientOptions = Omit<\n  SimpleWebsocketClientOptions,\n  'onMessage' | 'url'\n> &\n  Partial<Pick<SimpleWebsocketClientOptions, 'url'>>;\n\ntype PromiseExecutor<T> = (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void,\n) => void;\n\ntype Handler<T> = (id: number, error: AckError | null, result: T) => void;\n\nclass SubscribeResultPromise<\n  Result,\n  Payload extends Record<keyof Payload & string, ExtendedJsonValue | undefined>\n> implements\n    TransportClientSubscribeResult<Result, Payload>,\n    PromiseLike<Result> {\n  private readonly promise: Promise<Result>;\n\n  readonly stop: TransportClientSubscribeResult<Result, Payload>['stop'];\n\n  readonly cancel: TransportClientSubscribeResult<Result, Payload>['cancel'];\n\n  // readonly changePayload: TransportClientSubscribeResult<\n  //   Result,\n  //   Payload\n  // >['changePayload'];\n\n  constructor({\n    executor,\n    stop,\n  }: {\n    executor: PromiseExecutor<Result>;\n    stop: TransportClientSubscribeResult<Result, Payload>['stop'];\n    // changePayload: TransportClientSubscribeResult<\n    //   Result,\n    //   Payload\n    // >['changePayload'];\n  }) {\n    this.promise = new Promise<Result>((resolve, reject) => {\n      return executor(resolve, reject);\n    });\n    this.stop = stop;\n    this.cancel = stop;\n    // this.changePayload = changePayload;\n  }\n\n  then<TResult1 = Result, TResult2 = never>(\n    onfulfilled?:\n      | ((value: Result) => TResult1 | PromiseLike<TResult1>)\n      | null\n      | undefined,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): PromiseLike<TResult1 | TResult2> {\n    return this.promise.then(onfulfilled, onrejected);\n  }\n\n  catch<TResult2 = never>(\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): PromiseLike<Result | TResult2> {\n    return this.promise.catch(onrejected);\n  }\n}\n\n// TODO handle resubscriptions after reconnect (or in useEffect ?)\n// TODO handle send before connected\n// TODO reject on connection close OR keep promise hang ?\n\nconst createSafeError = (error: AckError): ResourcesServerError => {\n  return new ResourcesServerError(error.code, error.message);\n};\n\nexport default function createResourcesWebsocketClient({\n  url,\n  ...options\n}: WebsocketTransportClientOptions): TransportClient {\n  let currentId = 1;\n  let currentSubscriptionId = 1;\n  const acks = new Map<number, Ack<any>>(); // TODO in progress / unsent / sending => find better name\n  const subscriptions = new Map<number, Subscription<any, any>>();\n\n  if (!url) {\n    url = `ws${window.location.protocol === 'https:' ? 's' : ''}://${\n      window.location.host\n    }/ws`;\n  }\n  logger.info('create', { url });\n\n  const handlers: Record<ToClientMessage[0], Handler<any>> = {\n    ack: (id, error, result) => {\n      logger.debug('ack', { id });\n      const ack = acks.get(id);\n      if (!ack) {\n        logger.warn('no ack found', { id });\n      } else if (error) {\n        ack.reject(createSafeError(error));\n      } else {\n        ack.resolve(result);\n      }\n    },\n    subscription: (id, error, result) => {\n      logger.debug('subscription', { id });\n      const subscription = subscriptions.get(id);\n      if (!subscription) {\n        if (id < currentSubscriptionId) {\n          logger.warn('subscription previously closed', { id });\n        } else {\n          logger.warn('no subscription found', { id });\n        }\n      } else if (error) {\n        subscription.callback(createSafeError(error), null);\n      } else {\n        subscription.callback(null, result);\n      }\n    },\n  };\n\n  const wsClient = createSimpleWebsocketClient({\n    ...options,\n    url,\n    onMessage: (event) => {\n      logger.debug('message', { data: event.data });\n      const [type, id, error, result] = decode<ToClientMessage>(event.data);\n      const handler = handlers[type];\n\n      if (handler) {\n        handler(id, error, result);\n      }\n    },\n  });\n\n  const sendMessage = <T extends keyof ToServerMessages>(\n    type: T,\n    id: number | null,\n    payload: ToServerMessages[T][0],\n  ): void => wsClient.sendMessage(encode([type, id, payload as any]));\n\n  const sendWithAck = <T extends keyof ToServerMessages>(\n    type: T,\n    message: ToServerMessages[T][0],\n  ): Promise<ToServerMessages[T][1]> => {\n    return new Promise((resolve, reject) => {\n      const id = currentId++;\n      acks.set(id, {\n        resolve: (result) => {\n          acks.delete(id);\n          resolve(result);\n        },\n        reject: (err) => {\n          acks.delete(id);\n          reject(err);\n        },\n      });\n      sendMessage(type, id, message);\n    });\n  };\n\n  const sendThrowNotConnected = (): never => {\n    const error = new Error('Websocket not connected');\n    error.name = 'NetworkError';\n    throw error;\n  };\n\n  const resourcesClient: TransportClient = {\n    connect: () => wsClient.connect(),\n    close: () => wsClient.close(),\n    listenStateChange: wsClient.listenStateChange,\n    send: sendThrowNotConnected,\n\n    subscribe: <\n      T extends keyof ToServerSubscribeMessages<Payload>,\n      Payload extends Record<keyof Payload & string, ExtendedJsonValue>,\n      Result,\n      V extends ToServerSubscribeMessages<Payload>[T][2]\n    >(\n      type: T,\n      messageWithoutSubscriptionId: Omit<\n        ToServerSubscribeMessages<Payload, Result>[T][0],\n        'subscriptionId'\n      >,\n      callback: TransportClientSubscribeCallback<V>,\n    ): TransportClientSubscribeResult<Result, Payload> => {\n      const id = currentId++;\n      const subscriptionId = currentSubscriptionId++;\n      const message = { ...messageWithoutSubscriptionId, subscriptionId };\n\n      return new SubscribeResultPromise<Result, Payload>({\n        executor: (resolve, reject) => {\n          subscriptions.set(subscriptionId, {\n            type,\n            message,\n            resolve,\n            reject,\n            callback,\n          });\n          if (wsClient.isConnected()) {\n            // TODO reject should remove subscription ?\n            sendWithAck(type, message).then(resolve as any, reject);\n          }\n        },\n        stop: (): void => {\n          acks.delete(id);\n          subscriptions.delete(subscriptionId);\n          // TODO what if reconnect (backend keeps subscription) and closed at this time ?\n          if (wsClient.isConnected()) {\n            sendMessage('subscribe:close', null, { subscriptionId });\n          }\n        },\n\n        // changePayload: (payload: Payload): Promise<void> => {\n        //   return new Promise((resolve, reject) => {\n        //     const subscription = subscriptions.get(subscriptionId);\n        //     if (!subscription) return reject(new Error('Invalid subscription'));\n        //     subscription.message.payload = payload;\n        //     if (wsClient.isConnected()) {\n        //       sendWithAck('subscribe:changePayload', payload).then(\n        //         resolve,\n        //         reject,\n        //       );\n        //     } else {\n        //       return reject(new Error('Not connected'));\n        //     }\n        //   });\n        // },\n      });\n    },\n  };\n\n  wsClient.listenStateChange((newState) => {\n    logger.info('newState', { newState });\n    if (newState === 'connected') {\n      resourcesClient.send = sendWithAck as TransportClient['send'];\n      subscriptions.forEach((subscription, subscriptionId) => {\n        sendWithAck(subscription.type, subscription.message).then(\n          subscription.resolve,\n          subscription.reject,\n        );\n      });\n    } else {\n      resourcesClient.send = sendThrowNotConnected;\n      acks.forEach((ack) => {\n        ack.reject(\n          new Error(`Failed to get ack, connection state is now ${newState}`),\n        );\n      });\n      acks.clear();\n\n      if (newState === 'closed') {\n        subscriptions.forEach((subscription) => {\n          subscription.reject(new Error('Subscription closed'));\n        });\n      }\n    }\n  });\n\n  return resourcesClient;\n}\n"],"names":["createSimpleWebsocketClient","url","protocols","reconnection","reconnectionDelayMin","reconnectionDelayMax","reconnectionAttempts","Infinity","thirdWebsocketArgument","onMessage","onError","ws","currentState","isConnected","stateChangeListeners","Set","backoff","Backoff","min","max","factor","timeouts","maxConnect","tryReconnect","inactivity","setCurrentState","newState","forEach","listener","clearInternalTimeout","timeoutKey","timeout","clearTimeout","closeWebsocket","connect","webSocket","WebSocket","onopen","reset","handleCloseOrError","document","visibilityState","onclose","onmessage","message","data","onerror","event","console","error","attempts","delay","duration","setTimeout","visibilityChangHandler","undefined","window","addEventListener","close","send","removeEventListener","sendMessage","Error","listenStateChange","add","delete","logger","Logger","SubscribeResultPromise","constructor","executor","stop","promise","Promise","resolve","reject","cancel","then","onfulfilled","onrejected","catch","createSafeError","ResourcesServerError","code","createResourcesWebsocketClient","options","currentId","currentSubscriptionId","acks","Map","subscriptions","location","protocol","host","info","handlers","ack","id","result","debug","get","warn","subscription","callback","wsClient","type","decode","handler","payload","encode","sendWithAck","set","err","sendThrowNotConnected","name","resourcesClient","subscribe","messageWithoutSubscriptionId","subscriptionId","clear"],"mappings":"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"}