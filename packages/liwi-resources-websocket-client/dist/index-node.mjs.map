{"version":3,"file":"index-node.mjs","sources":["../src/createSimpleWebsocketClient.ts","../src/createWebsocketTransportClient.ts"],"sourcesContent":["import Backoff from \"backo2\";\nimport type { ConnectionStates } from \"liwi-resources-client\";\n\nexport type StateChangeListener = (newState: ConnectionStates) => void;\n\nexport type StateChangeListenerCreator = (\n  listener: StateChangeListener,\n) => () => void;\n\nexport interface SimpleWebsocketClientOptions {\n  url: string;\n  protocols?: string[] | string;\n  timeout?: number;\n  reconnection?: boolean;\n  reconnectionDelayMin?: number;\n  reconnectionDelayMax?: number;\n  reconnectionAttempts?: number;\n  inactivityTimeout?: number;\n  thirdWebsocketArgument?: unknown;\n  onMessage: (message: MessageEvent) => void;\n  onError?: (event: Event) => void;\n}\n\ntype Message = Parameters<WebSocket[\"send\"]>[0];\n\nexport interface WebsocketTransport {\n  connect: () => void;\n  close: () => void;\n  isConnected: () => boolean;\n  sendMessage: (message: Message) => void;\n  listenStateChange: StateChangeListenerCreator;\n}\n\ntype Timeouts = \"inactivity\" | \"maxConnect\" | \"tryReconnect\";\n\nexport default function createSimpleWebsocketClient({\n  url,\n  protocols,\n  reconnection = true,\n  reconnectionDelayMin = 1000,\n  reconnectionDelayMax = 30 * 1000,\n  reconnectionAttempts = Infinity,\n  thirdWebsocketArgument,\n  onMessage,\n  onError,\n}: SimpleWebsocketClientOptions): WebsocketTransport {\n  let ws: WebSocket | null = null;\n  let currentState: ConnectionStates = \"closed\";\n  let isConnected = false;\n  const stateChangeListeners = new Set<StateChangeListener>();\n\n  const backoff = new Backoff({\n    min: reconnectionDelayMin,\n    max: reconnectionDelayMax,\n    factor: 1.2,\n  });\n\n  const timeouts: Record<Timeouts, ReturnType<typeof setTimeout> | null> = {\n    maxConnect: null,\n    tryReconnect: null,\n    inactivity: null,\n  };\n\n  const setCurrentState = (newState: ConnectionStates): void => {\n    if (currentState === newState) return;\n    currentState = newState;\n    isConnected = currentState === \"connected\";\n    stateChangeListeners.forEach((listener) => {\n      listener(newState);\n    });\n  };\n\n  const clearInternalTimeout = (timeoutKey: Timeouts): void => {\n    const timeout = timeouts[timeoutKey];\n    if (timeout) {\n      clearTimeout(timeout);\n      timeouts[timeoutKey] = null;\n    }\n  };\n\n  const closeWebsocket = (): void => {\n    clearInternalTimeout(\"inactivity\");\n    if (ws) {\n      clearInternalTimeout(\"maxConnect\");\n      clearInternalTimeout(\"tryReconnect\");\n      ws = null;\n      setCurrentState(\"closed\");\n    }\n  };\n\n  let tryReconnect: (() => void) | undefined;\n\n  const connect = (): void => {\n    const webSocket = thirdWebsocketArgument\n      ? // @ts-expect-error third argument for react-native\n\n        new WebSocket(url, protocols, thirdWebsocketArgument)\n      : new WebSocket(url, protocols);\n    ws = webSocket;\n    clearInternalTimeout(\"maxConnect\");\n    setCurrentState(\"connecting\");\n\n    webSocket.addEventListener(\"open\", (): void => {\n      backoff.reset();\n      clearInternalTimeout(\"maxConnect\");\n    });\n\n    const handleCloseOrError = (): void => {\n      if (currentState === \"closed\") return;\n      if (!tryReconnect) {\n        closeWebsocket();\n      } else if (document.visibilityState === \"hidden\") {\n        setCurrentState(\"wait-for-visibility\");\n      } else {\n        tryReconnect();\n      }\n    };\n\n    webSocket.addEventListener(\"close\", handleCloseOrError);\n\n    webSocket.addEventListener(\"message\", (message): void => {\n      if (message.data === \"connection-ack\") {\n        setCurrentState(\"connected\");\n      } else {\n        onMessage(message);\n      }\n    });\n\n    webSocket.addEventListener(\"error\", (event): void => {\n      if (onError) {\n        onError(event);\n      } else {\n        console.error(\"ws error\", event);\n      }\n      handleCloseOrError();\n    });\n  };\n\n  if (reconnection) {\n    tryReconnect = () => {\n      if (backoff.attempts >= reconnectionAttempts) {\n        return;\n      }\n\n      if (currentState === \"reconnect-scheduled\") {\n        return;\n      }\n\n      setCurrentState(\"reconnect-scheduled\");\n      clearInternalTimeout(\"tryReconnect\");\n      const delay = backoff.duration();\n      timeouts.tryReconnect = setTimeout(() => {\n        connect();\n      }, delay);\n    };\n  }\n\n  const visibilityChangeHandler: (() => void) | undefined = !tryReconnect\n    ? undefined\n    : () => {\n        if (document.visibilityState === \"hidden\") {\n          if (currentState === \"reconnect-scheduled\") {\n            setCurrentState(\"wait-for-visibility\");\n            if (timeouts.tryReconnect !== null) {\n              clearTimeout(timeouts.tryReconnect);\n            }\n          }\n          return;\n        }\n        if (currentState !== \"wait-for-visibility\") return;\n\n        if (tryReconnect) {\n          backoff.reset();\n          tryReconnect();\n        }\n      };\n\n  if (visibilityChangeHandler) {\n    globalThis.addEventListener(\"visibilitychange\", visibilityChangeHandler);\n  }\n  const wsTransport: WebsocketTransport = {\n    connect,\n\n    close() {\n      if (ws) {\n        if (currentState === \"connected\") {\n          ws.send(\"close\");\n        }\n        closeWebsocket();\n      }\n      if (visibilityChangeHandler) {\n        globalThis.removeEventListener(\n          \"visibilitychange\",\n          visibilityChangeHandler,\n        );\n      }\n    },\n\n    isConnected() {\n      return isConnected;\n    },\n\n    sendMessage(message): void {\n      if (!ws) throw new Error(\"Cannot send message\");\n      ws.send(message);\n    },\n\n    listenStateChange: (listener) => {\n      stateChangeListeners.add(listener);\n      return (): void => {\n        stateChangeListeners.delete(listener);\n      };\n    },\n  };\n\n  return wsTransport;\n}\n","import type { ExtendedJsonValue } from \"extended-json\";\nimport { decode, encode } from \"extended-json\";\nimport { ResourcesServerError } from \"liwi-resources-client\";\nimport type {\n  AckError,\n  ToClientMessage,\n  ToServerMessages,\n  ToServerSubscribeMessages,\n  TransportClient,\n  TransportClientSubscribeCallback,\n  TransportClientSubscribeResult,\n} from \"liwi-resources-client\";\nimport { Logger } from \"nightingale-logger\";\nimport type { SimpleWebsocketClientOptions } from \"./createSimpleWebsocketClient\";\nimport createSimpleWebsocketClient from \"./createSimpleWebsocketClient\";\n\nconst logger = new Logger(\"liwi:resources-websocket-client\");\n\ntype Resolve<T> = (result: T) => void;\ntype Reject = (reason?: any) => void;\n\ninterface Ack<T> {\n  reject: Reject;\n  resolve: Resolve<T>;\n}\n\ninterface Subscription<\n  T extends keyof ToServerSubscribeMessages<any>,\n  U,\n  Message extends { payload: any } = any,\n> extends Ack<U> {\n  type: T;\n  message: Message;\n  callback: TransportClientSubscribeCallback<U>;\n}\n\nexport type WebsocketTransportClientOptions = Omit<\n  SimpleWebsocketClientOptions,\n  \"onMessage\" | \"url\"\n> &\n  Partial<Pick<SimpleWebsocketClientOptions, \"url\">>;\n\ntype PromiseExecutor<T> = (\n  resolve: (value: PromiseLike<T> | T) => void,\n  reject: (reason?: any) => void,\n) => void;\n\ntype Handler<T> = (id: number, error: AckError | null, result: T) => void;\n\nclass SubscribeResultPromise<\n    Result,\n    Payload extends Record<\n      string & keyof Payload,\n      ExtendedJsonValue | undefined\n    >,\n  >\n  implements\n    TransportClientSubscribeResult<Result, Payload>,\n    PromiseLike<Result>\n{\n  private readonly promise: Promise<Result>;\n\n  readonly stop: TransportClientSubscribeResult<Result, Payload>[\"stop\"];\n\n  readonly cancel: TransportClientSubscribeResult<Result, Payload>[\"cancel\"];\n\n  // readonly changePayload: TransportClientSubscribeResult<\n  //   Result,\n  //   Payload\n  // >['changePayload'];\n\n  constructor({\n    executor,\n    stop,\n  }: {\n    executor: PromiseExecutor<Result>;\n    stop: TransportClientSubscribeResult<Result, Payload>[\"stop\"];\n    // changePayload: TransportClientSubscribeResult<\n    //   Result,\n    //   Payload\n    // >['changePayload'];\n  }) {\n    this.promise = new Promise<Result>((resolve, reject) => {\n      executor(resolve, reject);\n    });\n    this.stop = stop;\n    this.cancel = stop;\n    // this.changePayload = changePayload;\n  }\n\n  then<TResult1 = Result, TResult2 = never>(\n    onfulfilled?: ((value: Result) => PromiseLike<TResult1> | TResult1) | null,\n    onrejected?: ((reason: any) => PromiseLike<TResult2> | TResult2) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return this.promise.then(onfulfilled, onrejected);\n  }\n\n  catch<TResult2 = never>(\n    onrejected?: ((reason: unknown) => PromiseLike<TResult2> | TResult2) | null,\n  ): PromiseLike<Result | TResult2> {\n    return this.promise.catch(onrejected);\n  }\n}\n\n// TODO handle resubscriptions after reconnect (or in useEffect ?)\n// TODO handle send before connected\n// TODO reject on connection close OR keep promise hang ?\n\nconst createSafeError = (error: AckError): ResourcesServerError => {\n  return new ResourcesServerError(error.code, error.message);\n};\n\nexport default function createResourcesWebsocketClient({\n  url,\n  ...options\n}: WebsocketTransportClientOptions): TransportClient {\n  const isSSR = typeof window === \"undefined\";\n\n  if (isSSR) {\n    return {\n      connect: () => {},\n      close: () => {},\n      listenStateChange: () => {\n        return () => {};\n      },\n      send: (type, message) => {\n        throw new Error(\"Cannot work on SSR.\");\n      },\n\n      subscribe: (type, messageWithoutSubscriptionId, callback) => {\n        throw new Error(\"Cannot work on SSR.\");\n      },\n    };\n  }\n\n  let currentId = 1;\n  let currentSubscriptionId = 1;\n  const acks = new Map<number, Ack<any>>(); // TODO in progress / unsent / sending => find better name\n  const subscriptions = new Map<number, Subscription<any, any>>();\n\n  if (!url) {\n    url = `ws${window.location.protocol === \"https:\" ? \"s\" : \"\"}://${\n      window.location.host\n    }/ws`;\n  }\n  logger.info(\"create\", { url });\n\n  const handlers: Record<ToClientMessage[0], Handler<any>> = {\n    ack: (id, error, result) => {\n      logger.debug(\"ack\", { id });\n      const ack = acks.get(id);\n      if (!ack) {\n        logger.warn(\"no ack found\", { id });\n      } else if (error) {\n        ack.reject(createSafeError(error));\n      } else {\n        ack.resolve(result);\n      }\n    },\n    subscription: (id, error, result) => {\n      logger.debug(\"subscription\", { id });\n      const subscription = subscriptions.get(id);\n      if (!subscription) {\n        if (id < currentSubscriptionId) {\n          logger.warn(\"subscription previously closed\", { id });\n        } else {\n          logger.warn(\"no subscription found\", { id });\n        }\n      } else if (error) {\n        subscription.callback(createSafeError(error), null);\n      } else {\n        subscription.callback(null, result);\n      }\n    },\n  };\n\n  const wsClient = createSimpleWebsocketClient({\n    ...options,\n    url,\n    onMessage: (event) => {\n      logger.debug(\"message\", { data: event.data });\n      const [type, id, error, result] = decode<ToClientMessage>(\n        event.data as string,\n      );\n      const handler = handlers[type];\n\n      if (handler) {\n        handler(id, error, result);\n      }\n    },\n  });\n\n  const sendMessage = <T extends keyof ToServerMessages>(\n    type: T,\n    id: number | null,\n    payload: ToServerMessages[T][0],\n  ): void => {\n    wsClient.sendMessage(encode([type, id, payload as any]));\n  };\n\n  const sendWithAck = <T extends keyof ToServerMessages>(\n    type: T,\n    message: ToServerMessages[T][0],\n  ): Promise<ToServerMessages[T][1]> => {\n    return new Promise((resolve, reject) => {\n      const id = currentId++;\n      acks.set(id, {\n        resolve: (result) => {\n          acks.delete(id);\n\n          resolve(result);\n        },\n        reject: (err: Error) => {\n          acks.delete(id);\n          reject(err);\n        },\n      });\n      sendMessage(type, id, message);\n    });\n  };\n\n  const sendThrowNotConnected = (): never => {\n    const error = new Error(\"Websocket not connected\");\n    error.name = \"NetworkError\";\n    throw error;\n  };\n\n  const resourcesClient: TransportClient = {\n    connect: () => {\n      logger.debug(\"connect\");\n      wsClient.connect();\n    },\n    close: () => {\n      logger.debug(\"close\");\n      wsClient.close();\n    },\n    listenStateChange: wsClient.listenStateChange,\n    send: sendThrowNotConnected,\n\n    subscribe: <\n      T extends keyof ToServerSubscribeMessages<Payload>,\n      Payload extends Record<string & keyof Payload, ExtendedJsonValue>,\n      Result,\n      V extends ToServerSubscribeMessages<Payload>[T][2],\n    >(\n      type: T,\n      messageWithoutSubscriptionId: Omit<\n        ToServerSubscribeMessages<Payload, Result>[T][0],\n        \"subscriptionId\"\n      >,\n      callback: TransportClientSubscribeCallback<V>,\n    ): TransportClientSubscribeResult<Result, Payload> => {\n      if (isSSR) throw new Error(\"subscribing is not allowed in SSR\");\n      const id = currentId++;\n      const subscriptionId = currentSubscriptionId++;\n      const message = { ...messageWithoutSubscriptionId, subscriptionId };\n\n      return new SubscribeResultPromise<Result, Payload>({\n        executor: (resolve, reject) => {\n          subscriptions.set(subscriptionId, {\n            type,\n            message,\n            resolve,\n            reject,\n            callback,\n          });\n          if (wsClient.isConnected()) {\n            // TODO reject should remove subscription ?\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            sendWithAck(type, message).then(resolve as any, reject);\n          }\n        },\n        stop: (): void => {\n          acks.delete(id);\n          subscriptions.delete(subscriptionId);\n          // TODO what if reconnect (backend keeps subscription) and closed at this time ?\n          if (wsClient.isConnected()) {\n            sendMessage(\"subscribe:close\", null, { subscriptionId });\n          }\n        },\n\n        // changePayload: (payload: Payload): Promise<void> => {\n        //   return new Promise((resolve, reject) => {\n        //     const subscription = subscriptions.get(subscriptionId);\n        //     if (!subscription) return reject(new Error('Invalid subscription'));\n        //     subscription.message.payload = payload;\n        //     if (wsClient.isConnected()) {\n        //       sendWithAck('subscribe:changePayload', payload).then(\n        //         resolve,\n        //         reject,\n        //       );\n        //     } else {\n        //       return reject(new Error('Not connected'));\n        //     }\n        //   });\n        // },\n      });\n    },\n  };\n\n  wsClient.listenStateChange((newState) => {\n    logger.info(\"newState\", { newState });\n    if (newState === \"connected\") {\n      resourcesClient.send = sendWithAck as TransportClient[\"send\"];\n      subscriptions.forEach((subscription, subscriptionId) => {\n        sendWithAck(subscription.type, subscription.message).then(\n          subscription.resolve,\n          subscription.reject,\n        );\n      });\n    } else {\n      resourcesClient.send = sendThrowNotConnected;\n      acks.forEach((ack) => {\n        ack.reject(\n          new Error(`Failed to get ack, connection state is now ${newState}`),\n        );\n      });\n      acks.clear();\n\n      if (newState === \"closed\") {\n        subscriptions.forEach((subscription) => {\n          subscription.reject(new Error(\"Subscription closed\"));\n        });\n      }\n    }\n  });\n\n  return resourcesClient;\n}\n"],"names":[],"mappings":"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"}