{"version":3,"file":"index-browser.es.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribableStoreQuery.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Store as StoreInterface,\n  AbstractConnection,\n  UpsertResult,\n  SubscribableStoreQuery,\n  AbstractStoreCursor,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-store';\n\nexport type Actions<Model> =\n  | { type: 'deleted'; prev: Model[] }\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; changes: [Model, Model][] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >,\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection>\n{\n  private readonly store: Store;\n\n  private readonly listeners = new Set<Listener<Model>>();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({\n        [this.store.keyPath]: key,\n        ...criteria,\n      } as Criteria<Model>))!,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: 'updated', changes });\n  }\n\n  async deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria))!);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: 'deleted', prev });\n  }\n\n  async count(criteria?: Criteria<Model>): Promise<number> {\n    return this.store.count(criteria);\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import type {\n  Query,\n  SubscribeCallback,\n  QuerySubscription,\n  QueryResult,\n  QueryParams,\n  BaseModel,\n  InsertType,\n  AllowedKeyValue,\n} from 'liwi-store';\nimport type SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model,\n> implements Query<Result, Params, KeyValue>\n{\n  changeParams(params: Params): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n"],"names":["SubscribeStore","store","listeners","Set","keyPath","_proto","prototype","subscribe","callback","add","delete","callSubscribed","action","forEach","listener","createQuerySingleItem","options","transformer","query","setSubscribeStore","createQueryCollection","findAll","criteria","sort","findByKey","key","findOne","insertOne","_insertOne","_asyncToGenerator","_regeneratorRuntime","mark","_callee","object","inserted","wrap","_callee$","_context","prev","next","sent","type","abrupt","stop","apply","arguments","replaceOne","_replaceOne","_callee2","replaced","_callee2$","_context2","changes","replaceSeveral","_replaceSeveral","_callee3","objects","replacedObjects","_callee3$","_context3","map","index","upsertOne","_upsertOne","_callee4","setOnInsertPartialObject","result","_callee4$","_context4","upsertOneWithInfo","_upsertOneWithInfo","_callee5","upsertedWithInfo","_callee5$","_context5","Error","partialUpdateByKey","_partialUpdateByKey","_callee6","partialUpdate","_extends2","_callee6$","_context6","t0","_extends","t1","t2","partialUpdateOne","call","_partialUpdateOne","_callee7","updated","_callee7$","_context7","partialUpdateMany","_partialUpdateMany","_callee9","_this2","cursor","_callee9$","_context9","_ref","_callee8","model","_callee8$","_context8","push","deleteByKey","_deleteByKey","_callee10","_callee10$","_context10","deleteOne","_deleteOne","_callee11","_callee11$","_context11","deleteMany","_deleteMany","_callee12","_callee12$","_context12","toArray","count","_count","_callee13","_callee13$","_context13","_cursor","_callee14","_callee14$","_context14","overrideStore","_createClass","get","connection","AbstractSubscribableStoreQuery","changeParams","changePartialParams","_subscribeStore","getSubscribeStore","fetchAndSubscribe","_subscribe"],"mappings":";;;;;AAAA;AAAA,IA4BqBA,cAAc,gBAAA,YAAA;EAsBjC,SAAAA,cAAAA,CAAYC,KAAY,EAAE;AAAA,IAAA,IAAA,CAJTC,SAAS,GAAG,IAAIC,GAAG,EAAmB,CAAA;IAKrD,IAAI,CAACF,KAAK,GAAGA,KAAK,CAAA;AAClB,IAAA,IAAI,CAACG,OAAO,GAAGH,KAAK,CAACG,OAAO,CAAA;AAC9B,GAAA;AAAC,EAAA,IAAAC,MAAA,GAAAL,cAAA,CAAAM,SAAA,CAAA;AAAAD,EAAAA,MAAA,CAMDE,SAAS,GAAT,SAAAA,SAAAA,CAAUC,QAAyB,EAAc;AAC/C,IAAA,IAAI,CAACN,SAAS,CAACO,GAAG,CAACD,QAAQ,CAAC,CAAA;IAC5B,OAAO,YAAA;AAAA,MAAA,OAAM,KAAKN,SAAS,CAACQ,MAAM,CAACF,QAAQ,CAAC,CAAA;AAAA,KAAA,CAAA;GAC7C,CAAA;AAAAH,EAAAA,MAAA,CAEDM,cAAc,GAAd,SAAAA,cAAAA,CAAeC,MAAsB,EAAQ;AAC3C,IAAA,IAAI,CAACV,SAAS,CAACW,OAAO,CAAC,UAACC,QAAQ,EAAA;MAAA,OAAKA,QAAQ,CAACF,MAAM,CAAC,CAAA;KAAC,CAAA,CAAA;GACvD,CAAA;EAAAP,MAAA,CAEDU,qBAAqB,GAArB,SAAAA,sBAIEC,OAA4B,EAC5BC,WAAwC,EAQxC;IACA,IAAMC,KAOL,GAAG,IAAI,CAACjB,KAAK,CAACc,qBAAqB,CAAiBC,OAAO,EAAEC,WAAW,CAAC,CAAA;AAC1EC,IAAAA,KAAK,CAACC,iBAAiB,CAAC,IAAI,CAAC,CAAA;AAC7B,IAAA,OAAOD,KAAK,CAAA;GACb,CAAA;EAAAb,MAAA,CAEDe,qBAAqB,GAArB,SAAAA,sBAIEJ,OAA4B,EAC5BC,WAAsC,EAQtC;IACA,IAAMC,KAOL,GAAG,IAAI,CAACjB,KAAK,CAACmB,qBAAqB,CAAeJ,OAAO,EAAEC,WAAW,CAAC,CAAA;AACxEC,IAAAA,KAAK,CAACC,iBAAiB,CAAC,IAAI,CAAC,CAAA;AAC7B,IAAA,OAAOD,KAAK,CAAA;GACb,CAAA;EAAAb,MAAA,CAEDgB,OAAO,GAAP,SAAAA,QAAQC,QAA0B,EAAEC,IAAkB,EAAoB;IACxE,OAAO,IAAI,CAACtB,KAAK,CAACoB,OAAO,CAACC,QAAQ,EAAEC,IAAI,CAAC,CAAA;GAC1C,CAAA;EAAAlB,MAAA,CAEDmB,SAAS,GAAT,SAAAA,UACEC,GAAa,EACbH,QAA0B,EACE;IAC5B,OAAO,IAAI,CAACrB,KAAK,CAACuB,SAAS,CAACC,GAAG,EAAEH,QAAQ,CAAC,CAAA;GAC3C,CAAA;EAAAjB,MAAA,CAEDqB,OAAO,GAAP,SAAAA,QACEJ,QAAyB,EACzBC,IAAkB,EACU;IAC5B,OAAO,IAAI,CAACtB,KAAK,CAACyB,OAAO,CAACJ,QAAQ,EAAEC,IAAI,CAAC,CAAA;GAC1C,CAAA;AAAAlB,EAAAA,MAAA,CAEKsB,SAAS,gBAAA,YAAA;IAAA,IAAAC,UAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAf,SAAAC,OAAAA,CAAgBC,MAAuB,EAAA;AAAA,MAAA,IAAAC,QAAA,CAAA;AAAA,MAAA,OAAAJ,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,YAAA,KAAA,CAAA;AAAAF,cAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACd,IAAI,CAACtC,KAAK,CAAC0B,SAAS,CAACM,MAAM,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAA7CC,QAAQ,GAAAG,QAAA,CAAAG,IAAA,CAAA;cACd,IAAI,CAAC7B,cAAc,CAAC;AAAE8B,gBAAAA,IAAI,EAAE,UAAU;gBAAEF,IAAI,EAAE,CAACL,QAAQ,CAAA;AAAE,eAAC,CAAC,CAAA;AAAC,cAAA,OAAAG,QAAA,CAAAK,MAAA,CAAA,QAAA,EACrDR,QAAQ,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAG,QAAA,CAAAM,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAX,OAAA,EAAA,IAAA,CAAA,CAAA;KAChB,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAL,SAAA,GAAA;AAAA,MAAA,OAAAC,UAAA,CAAAgB,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKyC,UAAU,gBAAA,YAAA;IAAA,IAAAC,WAAA,GAAAlB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAhB,SAAAiB,QAAAA,CAAiBf,MAAa,EAAA;AAAA,MAAA,IAAAgB,QAAA,CAAA;AAAA,MAAA,OAAAnB,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAe,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAAb,IAAA,GAAAa,SAAA,CAAAZ,IAAA;AAAA,YAAA,KAAA,CAAA;AAAAY,cAAAA,SAAA,CAAAZ,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACL,IAAI,CAACtC,KAAK,CAAC6C,UAAU,CAACb,MAAM,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAA9CgB,QAAQ,GAAAE,SAAA,CAAAX,IAAA,CAAA;cACd,IAAI,CAAC7B,cAAc,CAAC;AAAE8B,gBAAAA,IAAI,EAAE,SAAS;AAAEW,gBAAAA,OAAO,EAAE,CAAC,CAACnB,MAAM,EAAEgB,QAAQ,CAAC,CAAA;AAAE,eAAC,CAAC,CAAA;AAAC,cAAA,OAAAE,SAAA,CAAAT,MAAA,CAAA,QAAA,EACjEO,QAAQ,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAE,SAAA,CAAAR,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAK,QAAA,EAAA,IAAA,CAAA,CAAA;KAChB,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,UAAA,GAAA;AAAA,MAAA,OAAAC,WAAA,CAAAH,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKgD,cAAc,gBAAA,YAAA;IAAA,IAAAC,eAAA,GAAAzB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAwB,QAAAA,CAAqBC,OAAgB,EAAA;AAAA,MAAA,IAAAC,eAAA,CAAA;AAAA,MAAA,OAAA3B,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAuB,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAArB,IAAA,GAAAqB,SAAA,CAAApB,IAAA;AAAA,YAAA,KAAA,CAAA;AAAAoB,cAAAA,SAAA,CAAApB,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACL,IAAI,CAACtC,KAAK,CAACoD,cAAc,CAACG,OAAO,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAA1DC,eAAe,GAAAE,SAAA,CAAAnB,IAAA,CAAA;cACrB,IAAI,CAAC7B,cAAc,CAAC;AAClB8B,gBAAAA,IAAI,EAAE,SAAS;gBACfW,OAAO,EAAEI,OAAO,CAACI,GAAG,CAAC,UAACtB,IAAI,EAAEuB,KAAK,EAAA;AAAA,kBAAA,OAAK,CAACvB,IAAI,EAAEmB,eAAe,CAACI,KAAK,CAAC,CAAC,CAAA;AAAA,iBAAA,CAAA;AACtE,eAAC,CAAC,CAAA;AAAC,cAAA,OAAAF,SAAA,CAAAjB,MAAA,CAAA,QAAA,EACIe,eAAe,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAE,SAAA,CAAAhB,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAY,QAAA,EAAA,IAAA,CAAA,CAAA;KACvB,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,cAAA,GAAA;AAAA,MAAA,OAAAC,eAAA,CAAAV,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKyD,SAAS,gBAAA,YAAA;AAAA,IAAA,IAAAC,UAAA,GAAAlC,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAAf,SAAAiC,QAAAA,CAGE/B,MAAwD,EACxDgC,wBAAwD,EAAA;AAAA,MAAA,IAAAC,MAAA,CAAA;AAAA,MAAA,OAAApC,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAgC,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAA9B,IAAA,GAAA8B,SAAA,CAAA7B,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA6B,cAAAA,SAAA,CAAA7B,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OAEnC,IAAI,CAAC8B,iBAAiB,CACzCpC,MAAM,EACNgC,wBAAwB,CACzB,CAAA;AAAA,YAAA,KAAA,CAAA;cAHKC,MAAM,GAAAE,SAAA,CAAA5B,IAAA,CAAA;AAAA,cAAA,OAAA4B,SAAA,CAAA1B,MAAA,CAILwB,QAAAA,EAAAA,MAAM,CAACjC,MAAM,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAmC,SAAA,CAAAzB,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAqB,QAAA,EAAA,IAAA,CAAA,CAAA;KACrB,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,SAAA,GAAA;AAAA,MAAA,OAAAC,UAAA,CAAAnB,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKgE,iBAAiB,gBAAA,YAAA;AAAA,IAAA,IAAAC,kBAAA,GAAAzC,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAAvB,SAAAwC,QAAAA,CAGEtC,MAAwD,EACxDgC,wBAAwD,EAAA;AAAA,MAAA,IAAAO,gBAAA,CAAA;AAAA,MAAA,OAAA1C,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAsC,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAApC,IAAA,GAAAoC,SAAA,CAAAnC,IAAA;AAAA,YAAA,KAAA,CAAA;AAAAmC,cAAAA,SAAA,CAAAnC,IAAA,GAAA,CAAA,CAAA;cAAA,OAEzB,IAAI,CAACtC,KAAK,CAACoE,iBAAiB,CACzDpC,MAAM,EACNgC,wBAAwB,CACzB,CAAA;AAAA,YAAA,KAAA,CAAA;cAHKO,gBAAgB,GAAAE,SAAA,CAAAlC,IAAA,CAAA;cAAA,IAIlBgC,CAAAA,gBAAgB,CAACtC,QAAQ,EAAA;AAAAwC,gBAAAA,SAAA,CAAAnC,IAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,eAAA;cAC3B,IAAI,CAAC5B,cAAc,CAAC;AAClB8B,gBAAAA,IAAI,EAAE,UAAU;AAChBF,gBAAAA,IAAI,EAAE,CAACiC,gBAAgB,CAACvC,MAAM,CAAA;AAChC,eAAC,CAAC,CAAA;AAACyC,cAAAA,SAAA,CAAAnC,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,YAAA,KAAA,CAAA;AAAA,cAAA,MAEG,IAAIoC,KAAK,CAAC,MAAM,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;AAAA,cAAA,OAAAD,SAAA,CAAAhC,MAAA,CAAA,QAAA,EAElB8B,gBAAgB,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAE,SAAA,CAAA/B,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA4B,QAAA,EAAA,IAAA,CAAA,CAAA;KACxB,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,iBAAA,GAAA;AAAA,MAAA,OAAAC,kBAAA,CAAA1B,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKuE,kBAAkB,gBAAA,YAAA;AAAA,IAAA,IAAAC,mBAAA,GAAAhD,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAxB,SAAA+C,QACErD,CAAAA,GAAa,EACbsD,aAA4B,EAC5BzD,QAA0B,EAAA;AAAA,MAAA,IAAA0D,SAAA,CAAA;AAAA,MAAA,OAAAlD,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAA8C,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAA5C,IAAA,GAAA4C,SAAA,CAAA3C,IAAA;AAAA,YAAA,KAAA,CAAA;cAAA2C,SAAA,CAAAC,EAAA,GAEnB,IAAI,CAAA;AAAAD,cAAAA,SAAA,CAAA3C,IAAA,GAAA,CAAA,CAAA;cAAA,OACF,IAAI,CAACb,OAAO,CAAA0D,QAAA,EAAAJ,SAAA,OAAAA,SAAA,CAChB,IAAI,CAAC/E,KAAK,CAACG,OAAO,CAAA,GAAGqB,GAAG,EAAAuD,SAAA,GACtB1D,QAAQ,CACQ,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA;AAAA4D,cAAAA,SAAA,CAAAG,EAAA,GAAAH,SAAA,CAAA1C,IAAA,CAAA;cAAA0C,SAAA,CAAAI,EAAA,GACrBP,aAAa,CAAA;cAAA,OAAAG,SAAA,CAAAxC,MAAA,CAAA,QAAA,EAAAwC,SAAA,CAAAC,EAAA,CALHI,gBAAgB,CAAAC,IAAA,CAAAN,SAAA,CAAAC,EAAA,EAAAD,SAAA,CAAAG,EAAA,EAAAH,SAAA,CAAAI,EAAA,CAAA,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAJ,SAAA,CAAAvC,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAmC,QAAA,EAAA,IAAA,CAAA,CAAA;KAO7B,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,kBAAA,GAAA;AAAA,MAAA,OAAAC,mBAAA,CAAAjC,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKkF,gBAAgB,gBAAA,YAAA;AAAA,IAAA,IAAAE,iBAAA,GAAA5D,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAAtB,SAAA2D,QAAAA,CACEzD,MAAa,EACb8C,aAA4B,EAAA;AAAA,MAAA,IAAAY,OAAA,CAAA;AAAA,MAAA,OAAA7D,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAyD,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAAvD,IAAA,GAAAuD,SAAA,CAAAtD,IAAA;AAAA,YAAA,KAAA,CAAA;AAAAsD,cAAAA,SAAA,CAAAtD,IAAA,GAAA,CAAA,CAAA;cAAA,OAEN,IAAI,CAACtC,KAAK,CAACsF,gBAAgB,CAACtD,MAAM,EAAE8C,aAAa,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAAlEY,OAAO,GAAAE,SAAA,CAAArD,IAAA,CAAA;cACb,IAAI,CAAC7B,cAAc,CAAC;AAAE8B,gBAAAA,IAAI,EAAE,SAAS;AAAEW,gBAAAA,OAAO,EAAE,CAAC,CAACnB,MAAM,EAAE0D,OAAO,CAAC,CAAA;AAAE,eAAC,CAAC,CAAA;AAAC,cAAA,OAAAE,SAAA,CAAAnD,MAAA,CAAA,QAAA,EAChEiD,OAAO,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAE,SAAA,CAAAlD,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA+C,QAAA,EAAA,IAAA,CAAA,CAAA;KACf,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAH,gBAAA,GAAA;AAAA,MAAA,OAAAE,iBAAA,CAAA7C,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKyF,iBAAiB,gBAAA,YAAA;AAAA,IAAA,IAAAC,kBAAA,GAAAlE,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAAvB,SAAAiE,QAAAA,CACE1E,QAAyB,EACzByD,aAA4B,EAAA;AAAA,MAAA,IAAAkB,MAAA,GAAA,IAAA,CAAA;MAAA,IAAAC,MAAA,EAAA9C,OAAA,CAAA;AAAA,MAAA,OAAAtB,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAgE,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,SAAA,CAAA9D,IAAA,GAAA8D,SAAA,CAAA7D,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA6D,cAAAA,SAAA,CAAA7D,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OAEP,IAAI,CAACtC,KAAK,CAACiG,MAAM,CAAC5E,QAAQ,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAA1C4E,MAAM,GAAAE,SAAA,CAAA5D,IAAA,CAAA;AACNY,cAAAA,OAAyB,GAAG,EAAE,CAAA;AAAAgD,cAAAA,SAAA,CAAA7D,IAAA,GAAA,CAAA,CAAA;cAAA,OAE9B2D,MAAM,CAACrF,OAAO,eAAA,YAAA;gBAAA,IAAAwF,IAAA,GAAAxE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAuE,QAAAA,CAAOC,KAAK,EAAA;kBAAA,IAAA9E,GAAA,EAAAkE,OAAA,CAAA;AAAA,kBAAA,OAAA7D,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAqE,UAAAC,SAAA,EAAA;AAAA,oBAAA,OAAA,CAAA,EAAA;AAAA,sBAAA,QAAAA,SAAA,CAAAnE,IAAA,GAAAmE,SAAA,CAAAlE,IAAA;AAAA,wBAAA,KAAA,CAAA;0BACzBd,GAAG,GAAG8E,KAAK,CAACN,MAAI,CAAChG,KAAK,CAACG,OAAO,CAAC,CAAA;AAAAqG,0BAAAA,SAAA,CAAAlE,IAAA,GAAA,CAAA,CAAA;0BAAA,OACf0D,MAAI,CAAChG,KAAK,CAAC2E,kBAAkB,CACjDnD,GAAG,EACHsD,aAAa,EACbzD,QAAQ,CACT,CAAA;AAAA,wBAAA,KAAA,CAAA;0BAJKqE,OAAO,GAAAc,SAAA,CAAAjE,IAAA,CAAA;0BAKbY,OAAO,CAACsD,IAAI,CAAC,CAACH,KAAK,EAAEZ,OAAO,CAAC,CAAC,CAAA;AAAC,wBAAA,KAAA,CAAA,CAAA;AAAA,wBAAA,KAAA,KAAA;0BAAA,OAAAc,SAAA,CAAA9D,IAAA,EAAA,CAAA;AAAA,uBAAA;AAAA,qBAAA;AAAA,mBAAA,EAAA2D,QAAA,CAAA,CAAA;iBAChC,CAAA,CAAA,CAAA;AAAA,gBAAA,OAAA,YAAA;AAAA,kBAAA,OAAAD,IAAA,CAAAzD,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,iBAAA,CAAA;eAAC,EAAA,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA;cACF,IAAI,CAAClC,cAAc,CAAC;AAAE8B,gBAAAA,IAAI,EAAE,SAAS;AAAEW,gBAAAA,OAAO,EAAPA,OAAAA;AAAQ,eAAC,CAAC,CAAA;AAAC,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAgD,SAAA,CAAAzD,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAqD,QAAA,EAAA,IAAA,CAAA,CAAA;KACnD,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,iBAAA,GAAA;AAAA,MAAA,OAAAC,kBAAA,CAAAnD,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKsG,WAAW,gBAAA,YAAA;AAAA,IAAA,IAAAC,YAAA,GAAA/E,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAAjB,SAAA8E,SAAAA,CAAkBpF,GAAa,EAAEH,QAA0B,EAAA;AAAA,MAAA,OAAAQ,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAA2E,WAAAC,UAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,UAAA,CAAAzE,IAAA,GAAAyE,UAAA,CAAAxE,IAAA;AAAA,YAAA,KAAA,CAAA;cAAAwE,UAAA,CAAA5B,EAAA,GAClD,IAAI,CAAA;AAAA4B,cAAAA,UAAA,CAAAxE,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OAAkB,IAAI,CAACf,SAAS,CAACC,GAAG,EAAEH,QAAQ,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;AAAAyF,cAAAA,UAAA,CAAA1B,EAAA,GAAA0B,UAAA,CAAAvE,IAAA,CAAA;AAAA,cAAA,OAAAuE,UAAA,CAAArE,MAAA,WAAAqE,UAAA,CAAA5B,EAAA,CAA9C6B,SAAS,CAAAxB,IAAA,CAAAuB,UAAA,CAAA5B,EAAA,EAAA4B,UAAA,CAAA1B,EAAA,CAAA,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAA0B,UAAA,CAAApE,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAkE,SAAA,EAAA,IAAA,CAAA,CAAA;KACtB,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,WAAA,GAAA;AAAA,MAAA,OAAAC,YAAA,CAAAhE,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEK2G,SAAS,gBAAA,YAAA;IAAA,IAAAC,UAAA,GAAApF,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAf,SAAAmF,SAAAA,CAAgBjF,MAAa,EAAA;AAAA,MAAA,OAAAH,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAgF,WAAAC,UAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,UAAA,CAAA9E,IAAA,GAAA8E,UAAA,CAAA7E,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA6E,cAAAA,UAAA,CAAA7E,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACrB,IAAI,CAACtC,KAAK,CAAC+G,SAAS,CAAC/E,MAAM,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAClC,IAAI,CAACtB,cAAc,CAAC;AAAE8B,gBAAAA,IAAI,EAAE,SAAS;gBAAEH,IAAI,EAAE,CAACL,MAAM,CAAA;AAAE,eAAC,CAAC,CAAA;AAAC,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAmF,UAAA,CAAAzE,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAuE,SAAA,EAAA,IAAA,CAAA,CAAA;KAC1D,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,SAAA,GAAA;AAAA,MAAA,OAAAC,UAAA,CAAArE,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKgH,UAAU,gBAAA,YAAA;IAAA,IAAAC,WAAA,GAAAzF,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAhB,SAAAwF,SAAAA,CAAiBjG,QAAyB,EAAA;MAAA,IAAA4E,MAAA,EAAA5D,IAAA,CAAA;AAAA,MAAA,OAAAR,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAAqF,WAAAC,UAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,UAAA,CAAAnF,IAAA,GAAAmF,UAAA,CAAAlF,IAAA;AAAA,YAAA,KAAA,CAAA;AAAAkF,cAAAA,UAAA,CAAAlF,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACnB,IAAI,CAACtC,KAAK,CAACiG,MAAM,CAAC5E,QAAQ,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAA1C4E,MAAM,GAAAuB,UAAA,CAAAjF,IAAA,CAAA;AAAAiF,cAAAA,UAAA,CAAAlF,IAAA,GAAA,CAAA,CAAA;cAAA,OACgB2D,MAAM,CAACwB,OAAO,EAAE,CAAA;AAAA,YAAA,KAAA,CAAA;cAAtCpF,IAAa,GAAAmF,UAAA,CAAAjF,IAAA,CAAA;AAAAiF,cAAAA,UAAA,CAAAlF,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,OACb,IAAI,CAACtC,KAAK,CAACoH,UAAU,CAAC/F,QAAQ,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cACrC,IAAI,CAACX,cAAc,CAAC;AAAE8B,gBAAAA,IAAI,EAAE,SAAS;AAAEH,gBAAAA,IAAI,EAAJA,IAAAA;AAAK,eAAC,CAAC,CAAA;AAAC,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAmF,UAAA,CAAA9E,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA4E,SAAA,EAAA,IAAA,CAAA,CAAA;KAChD,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,UAAA,GAAA;AAAA,MAAA,OAAAC,WAAA,CAAA1E,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEKsH,KAAK,gBAAA,YAAA;IAAA,IAAAC,MAAA,GAAA/F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAX,SAAA8F,SAAAA,CAAYvG,QAA0B,EAAA;AAAA,MAAA,OAAAQ,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAA2F,WAAAC,UAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,UAAA,CAAAzF,IAAA,GAAAyF,UAAA,CAAAxF,IAAA;AAAA,YAAA,KAAA,CAAA;cAAA,OAAAwF,UAAA,CAAArF,MAAA,CAC7B,QAAA,EAAA,IAAI,CAACzC,KAAK,CAAC0H,KAAK,CAACrG,QAAQ,CAAC,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAyG,UAAA,CAAApF,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAkF,SAAA,EAAA,IAAA,CAAA,CAAA;KAClC,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAAF,KAAA,GAAA;AAAA,MAAA,OAAAC,MAAA,CAAAhF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAxC,EAAAA,MAAA,CAEK6F,MAAM,gBAAA,YAAA;AAAA,IAAA,IAAA8B,OAAA,GAAAnG,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAAZ,SAAAkG,SAAAA,CACE3G,QAA0B,EAC1BC,IAAkB,EAAA;AAAA,MAAA,IAAA2E,MAAA,CAAA;AAAA,MAAA,OAAApE,mBAAA,EAAA,CAAAK,IAAA,CAAA,SAAA+F,WAAAC,UAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAAA,UAAA,CAAA7F,IAAA,GAAA6F,UAAA,CAAA5F,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA4F,cAAAA,UAAA,CAAA5F,IAAA,GAAA,CAAA,CAAA;cAAA,OAEG,IAAI,CAACtC,KAAK,CAACiG,MAAM,CAAS5E,QAAQ,EAAEC,IAAI,CAAC,CAAA;AAAA,YAAA,KAAA,CAAA;cAAxD2E,MAAM,GAAAiC,UAAA,CAAA3F,IAAA,CAAA;AACZ0D,cAAAA,MAAM,CAACkC,aAAa,CAAC,IAAI,CAAC,CAAA;AAAC,cAAA,OAAAD,UAAA,CAAAzF,MAAA,CAAA,QAAA,EACpBwD,MAAM,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;cAAA,OAAAiC,UAAA,CAAAxF,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAAsF,SAAA,EAAA,IAAA,CAAA,CAAA;KACd,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,SAAA/B,MAAA,GAAA;AAAA,MAAA,OAAA8B,OAAA,CAAApF,KAAA,CAAA,IAAA,EAAAC,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAwF,EAAAA,YAAA,CAAArI,cAAA,EAAA,CAAA;IAAAyB,GAAA,EAAA,YAAA;IAAA6G,GAAA,EA/MD,SAAAA,GAAAA,GAA6B;AAC3B,MAAA,OAAO,IAAI,CAACrI,KAAK,CAACsI,UAAU,CAAA;AAC9B,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAvI,cAAA,CAAA;AAAA,CAAA;;IC7C2BwI,8BAA8B,gBAAA,YAAA;AAAA,EAAA,SAAAA,8BAAA,GAAA,EAAA;AAAA,EAAA,IAAAnI,MAAA,GAAAmI,8BAAA,CAAAlI,SAAA,CAAA;AAAAD,EAAAA,MAAA,CAS1DoI,YAAY,GAAZ,SAAAA,eAAoC;AAClC,IAAA,MAAM,IAAI9D,KAAK,CAAC,kDAAkD,CAAC,CAAA;GACpE,CAAA;AAAAtE,EAAAA,MAAA,CAEDqI,mBAAmB,GAAnB,SAAAA,sBAES;AACP,IAAA,MAAM,IAAI/D,KAAK,CAAC,kDAAkD,CAAC,CAAA;GACpE,CAAA;AAAAtE,EAAAA,MAAA,CAWDc,iBAAiB,GAAjB,SAAAA,iBAAAA,CACElB,KAA0E,EACpE;IACN,IAAI,CAAC0I,eAAe,GAAG1I,KAAK,CAAA;GAC7B,CAAA;AAAAI,EAAAA,MAAA,CAEDuI,iBAAiB,GAAjB,SAAAA,oBAOE;AACA,IAAA,IAAI,CAAC,IAAI,CAACD,eAAe,EAAE;AACzB,MAAA,MAAM,IAAIhE,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACvD,KAAA;IACA,OAAO,IAAI,CAACgE,eAAe,CAAA;GAC5B,CAAA;AAAAtI,EAAAA,MAAA,CAMDwI,iBAAiB,GAAjB,SAAAA,iBAAAA,CACErI,QAA6C,EAC1B;AACnB,IAAA,OAAO,IAAI,CAACsI,UAAU,CAACtI,QAAQ,EAAE,IAAI,CAAC,CAAA;GACvC,CAAA;AAAAH,EAAAA,MAAA,CAEDE,SAAS,GAAT,SAAAA,SAAAA,CAAUC,QAA6C,EAAqB;AAC1E,IAAA,OAAO,IAAI,CAACsI,UAAU,CAACtI,QAAQ,EAAE,KAAK,CAAC,CAAA;GACxC,CAAA;AAAA,EAAA,OAAAgI,8BAAA,CAAA;AAAA,CAAA;;;;"}