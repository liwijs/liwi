{"version":3,"file":"index-browser.es.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribableStoreQuery.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Store as StoreInterface,\n  AbstractConnection,\n  UpsertResult,\n  SubscribableStoreQuery,\n  AbstractStoreCursor,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-store';\n\nexport type Actions<Model> =\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; changes: [Model, Model][] }\n  | { type: 'deleted'; prev: Model[] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >,\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection>\n{\n  private readonly store: Store;\n\n  private readonly listeners: Set<Listener<Model>> = new Set();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({\n        [this.store.keyPath]: key,\n        ...criteria,\n      } as Criteria<Model>))!,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: 'updated', changes });\n  }\n\n  async deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria))!);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: 'deleted', prev });\n  }\n\n  async count(criteria?: Criteria<Model>): Promise<number> {\n    return this.store.count(criteria);\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import type {\n  Query,\n  SubscribeCallback,\n  QuerySubscription,\n  QueryResult,\n  QueryParams,\n  BaseModel,\n  InsertType,\n  AllowedKeyValue,\n} from 'liwi-store';\nimport type SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model,\n> implements Query<Result, Params, KeyValue>\n{\n  changeParams(params: Params): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n"],"names":["SubscribeStore","store","listeners","Set","keyPath","subscribe","callback","add","callSubscribed","action","forEach","listener","createQuerySingleItem","options","transformer","query","setSubscribeStore","createQueryCollection","findAll","criteria","sort","findByKey","key","findOne","insertOne","object","inserted","type","next","replaceOne","replaced","changes","replaceSeveral","objects","replacedObjects","map","prev","index","upsertOne","setOnInsertPartialObject","upsertOneWithInfo","result","upsertedWithInfo","Error","partialUpdateByKey","partialUpdate","partialUpdateOne","updated","partialUpdateMany","cursor","model","push","deleteByKey","deleteOne","deleteMany","toArray","count","overrideStore","connection","AbstractSubscribableStoreQuery","changeParams","changePartialParams","_subscribeStore","getSubscribeStore","fetchAndSubscribe","_subscribe"],"mappings":"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"}