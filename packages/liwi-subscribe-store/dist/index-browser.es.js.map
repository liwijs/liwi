{"version":3,"file":"index-browser.es.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribableStoreQuery.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Store as StoreInterface,\n  AbstractConnection,\n  UpsertResult,\n  SubscribableStoreQuery,\n  AbstractStoreCursor,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-store';\n\nexport type Actions<Model> =\n  | { type: 'deleted'; prev: Model[] }\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; changes: [Model, Model][] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >,\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection>\n{\n  private readonly store: Store;\n\n  private readonly listeners = new Set<Listener<Model>>();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({\n        [this.store.keyPath]: key,\n        ...criteria,\n      } as Criteria<Model>))!,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: 'updated', changes });\n  }\n\n  async deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria))!);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: 'deleted', prev });\n  }\n\n  async count(criteria?: Criteria<Model>): Promise<number> {\n    return this.store.count(criteria);\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","/* eslint-disable @typescript-eslint/class-methods-use-this */\nimport type {\n  Query,\n  SubscribeCallback,\n  QuerySubscription,\n  QueryResult,\n  QueryParams,\n  BaseModel,\n  InsertType,\n  AllowedKeyValue,\n} from 'liwi-store';\nimport type SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model,\n> implements Query<Result, Params, KeyValue>\n{\n  changeParams(params: Params): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n"],"names":["SubscribeStore","constructor","store","listeners","Set","keyPath","connection","subscribe","callback","add","delete","callSubscribed","action","forEach","listener","createQuerySingleItem","options","transformer","query","setSubscribeStore","createQueryCollection","findAll","criteria","sort","findByKey","key","findOne","insertOne","object","inserted","type","next","replaceOne","replaced","changes","replaceSeveral","objects","replacedObjects","map","prev","index","upsertOne","setOnInsertPartialObject","result","upsertOneWithInfo","upsertedWithInfo","Error","partialUpdateByKey","partialUpdate","partialUpdateOne","updated","partialUpdateMany","cursor","model","push","deleteByKey","deleteOne","deleteMany","toArray","count","overrideStore","AbstractSubscribableStoreQuery","changeParams","changePartialParams","_subscribeStore","getSubscribeStore","fetchAndSubscribe","_subscribe"],"mappings":"AAAA;;AA4Be,MAAMA,cAAc,CAenC;EAOEC,WAAWA,CAACC,KAAY,EAAE;AAAA,IAAA,IAAA,CAJTC,SAAS,GAAG,IAAIC,GAAG,EAAmB,CAAA;IAKrD,IAAI,CAACF,KAAK,GAAGA,KAAK,CAAA;AAClB,IAAA,IAAI,CAACG,OAAO,GAAGH,KAAK,CAACG,OAAO,CAAA;AAC9B,GAAA;EAEA,IAAIC,UAAUA,GAAe;AAC3B,IAAA,OAAO,IAAI,CAACJ,KAAK,CAACI,UAAU,CAAA;AAC9B,GAAA;EAEAC,SAASA,CAACC,QAAyB,EAAc;AAC/C,IAAA,IAAI,CAACL,SAAS,CAACM,GAAG,CAACD,QAAQ,CAAC,CAAA;IAC5B,OAAO,MAAM,IAAI,CAACL,SAAS,CAACO,MAAM,CAACF,QAAQ,CAAC,CAAA;AAC9C,GAAA;EAEAG,cAAcA,CAACC,MAAsB,EAAQ;IAC3C,IAAI,CAACT,SAAS,CAACU,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAA;AACxD,GAAA;AAEAG,EAAAA,qBAAqBA,CAInBC,OAA4B,EAC5BC,WAAwC,EAQxC;IACA,MAAMC,KAOL,GAAG,IAAI,CAAChB,KAAK,CAACa,qBAAqB,CAAiBC,OAAO,EAAEC,WAAW,CAAC,CAAA;AAC1EC,IAAAA,KAAK,CAACC,iBAAiB,CAAC,IAAI,CAAC,CAAA;AAC7B,IAAA,OAAOD,KAAK,CAAA;AACd,GAAA;AAEAE,EAAAA,qBAAqBA,CAInBJ,OAA4B,EAC5BC,WAAsC,EAQtC;IACA,MAAMC,KAOL,GAAG,IAAI,CAAChB,KAAK,CAACkB,qBAAqB,CAAeJ,OAAO,EAAEC,WAAW,CAAC,CAAA;AACxEC,IAAAA,KAAK,CAACC,iBAAiB,CAAC,IAAI,CAAC,CAAA;AAC7B,IAAA,OAAOD,KAAK,CAAA;AACd,GAAA;AAEAG,EAAAA,OAAOA,CAACC,QAA0B,EAAEC,IAAkB,EAAoB;IACxE,OAAO,IAAI,CAACrB,KAAK,CAACmB,OAAO,CAACC,QAAQ,EAAEC,IAAI,CAAC,CAAA;AAC3C,GAAA;AAEAC,EAAAA,SAASA,CACPC,GAAa,EACbH,QAA0B,EACE;IAC5B,OAAO,IAAI,CAACpB,KAAK,CAACsB,SAAS,CAACC,GAAG,EAAEH,QAAQ,CAAC,CAAA;AAC5C,GAAA;AAEAI,EAAAA,OAAOA,CACLJ,QAAyB,EACzBC,IAAkB,EACU;IAC5B,OAAO,IAAI,CAACrB,KAAK,CAACwB,OAAO,CAACJ,QAAQ,EAAEC,IAAI,CAAC,CAAA;AAC3C,GAAA;EAEA,MAAMI,SAASA,CAACC,MAAuB,EAAkB;IACvD,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAC3B,KAAK,CAACyB,SAAS,CAACC,MAAM,CAAC,CAAA;IACnD,IAAI,CAACjB,cAAc,CAAC;AAAEmB,MAAAA,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE,CAACF,QAAQ,CAAA;AAAE,KAAC,CAAC,CAAA;AAC3D,IAAA,OAAOA,QAAQ,CAAA;AACjB,GAAA;EAEA,MAAMG,UAAUA,CAACJ,MAAa,EAAkB;IAC9C,MAAMK,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAAC8B,UAAU,CAACJ,MAAM,CAAC,CAAA;IACpD,IAAI,CAACjB,cAAc,CAAC;AAAEmB,MAAAA,IAAI,EAAE,SAAS;AAAEI,MAAAA,OAAO,EAAE,CAAC,CAACN,MAAM,EAAEK,QAAQ,CAAC,CAAA;AAAE,KAAC,CAAC,CAAA;AACvE,IAAA,OAAOA,QAAQ,CAAA;AACjB,GAAA;EAEA,MAAME,cAAcA,CAACC,OAAgB,EAAoB;IACvD,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACnC,KAAK,CAACiC,cAAc,CAACC,OAAO,CAAC,CAAA;IAChE,IAAI,CAACzB,cAAc,CAAC;AAClBmB,MAAAA,IAAI,EAAE,SAAS;AACfI,MAAAA,OAAO,EAAEE,OAAO,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK,CAACD,IAAI,EAAEF,eAAe,CAACG,KAAK,CAAC,CAAC,CAAA;AACtE,KAAC,CAAC,CAAA;AACF,IAAA,OAAOH,eAAe,CAAA;AACxB,GAAA;AAEA,EAAA,MAAMI,SAASA,CAGbb,MAAwD,EACxDc,wBAAwD,EACxC;IAChB,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,iBAAiB,CACzChB,MAAM,EACNc,wBACF,CAAC,CAAA;IACD,OAAOC,MAAM,CAACf,MAAM,CAAA;AACtB,GAAA;AAEA,EAAA,MAAMgB,iBAAiBA,CAGrBhB,MAAwD,EACxDc,wBAAwD,EAC1B;AAC9B,IAAA,MAAMG,gBAAgB,GAAG,MAAM,IAAI,CAAC3C,KAAK,CAAC0C,iBAAiB,CACzDhB,MAAM,EACNc,wBACF,CAAC,CAAA;IACD,IAAIG,gBAAgB,CAAChB,QAAQ,EAAE;MAC7B,IAAI,CAAClB,cAAc,CAAC;AAClBmB,QAAAA,IAAI,EAAE,UAAU;AAChBC,QAAAA,IAAI,EAAE,CAACc,gBAAgB,CAACjB,MAAM,CAAA;AAChC,OAAC,CAAC,CAAA;AACJ,KAAC,MAAM;AACL,MAAA,MAAM,IAAIkB,KAAK,CAAC,MAAM,CAAC,CAAA;AACzB,KAAA;AACA,IAAA,OAAOD,gBAAgB,CAAA;AACzB,GAAA;AAEA,EAAA,MAAME,kBAAkBA,CACtBtB,GAAa,EACbuB,aAA4B,EAC5B1B,QAA0B,EACV;IAChB,OAAO,IAAI,CAAC2B,gBAAgB,CACzB,MAAM,IAAI,CAACvB,OAAO,CAAC;AAClB,MAAA,CAAC,IAAI,CAACxB,KAAK,CAACG,OAAO,GAAGoB,GAAG;MACzB,GAAGH,QAAAA;KACe,CAAC,EACrB0B,aACF,CAAC,CAAA;AACH,GAAA;AAEA,EAAA,MAAMC,gBAAgBA,CACpBrB,MAAa,EACboB,aAA4B,EACZ;AAChB,IAAA,MAAME,OAAO,GAAG,MAAM,IAAI,CAAChD,KAAK,CAAC+C,gBAAgB,CAACrB,MAAM,EAAEoB,aAAa,CAAC,CAAA;IACxE,IAAI,CAACrC,cAAc,CAAC;AAAEmB,MAAAA,IAAI,EAAE,SAAS;AAAEI,MAAAA,OAAO,EAAE,CAAC,CAACN,MAAM,EAAEsB,OAAO,CAAC,CAAA;AAAE,KAAC,CAAC,CAAA;AACtE,IAAA,OAAOA,OAAO,CAAA;AAChB,GAAA;AAEA,EAAA,MAAMC,iBAAiBA,CACrB7B,QAAyB,EACzB0B,aAA4B,EACb;IACf,MAAMI,MAAM,GAAG,MAAM,IAAI,CAAClD,KAAK,CAACkD,MAAM,CAAC9B,QAAQ,CAAC,CAAA;IAChD,MAAMY,OAAyB,GAAG,EAAE,CAAA;AAEpC,IAAA,MAAMkB,MAAM,CAACvC,OAAO,CAAC,MAAOwC,KAAK,IAAK;MACpC,MAAM5B,GAAG,GAAG4B,KAAK,CAAC,IAAI,CAACnD,KAAK,CAACG,OAAO,CAAC,CAAA;AACrC,MAAA,MAAM6C,OAAO,GAAG,MAAM,IAAI,CAAChD,KAAK,CAAC6C,kBAAkB,CACjDtB,GAAG,EACHuB,aAAa,EACb1B,QACF,CAAC,CAAA;MACDY,OAAO,CAACoB,IAAI,CAAC,CAACD,KAAK,EAAEH,OAAO,CAAC,CAAC,CAAA;AAChC,KAAC,CAAC,CAAA;IACF,IAAI,CAACvC,cAAc,CAAC;AAAEmB,MAAAA,IAAI,EAAE,SAAS;AAAEI,MAAAA,OAAAA;AAAQ,KAAC,CAAC,CAAA;AACnD,GAAA;AAEA,EAAA,MAAMqB,WAAWA,CAAC9B,GAAa,EAAEH,QAA0B,EAAiB;AAC1E,IAAA,OAAO,IAAI,CAACkC,SAAS,CAAE,MAAM,IAAI,CAAChC,SAAS,CAACC,GAAG,EAAEH,QAAQ,CAAG,CAAC,CAAA;AAC/D,GAAA;EAEA,MAAMkC,SAASA,CAAC5B,MAAa,EAAiB;AAC5C,IAAA,MAAM,IAAI,CAAC1B,KAAK,CAACsD,SAAS,CAAC5B,MAAM,CAAC,CAAA;IAClC,IAAI,CAACjB,cAAc,CAAC;AAAEmB,MAAAA,IAAI,EAAE,SAAS;MAAES,IAAI,EAAE,CAACX,MAAM,CAAA;AAAE,KAAC,CAAC,CAAA;AAC1D,GAAA;EAEA,MAAM6B,UAAUA,CAACnC,QAAyB,EAAiB;IACzD,MAAM8B,MAAM,GAAG,MAAM,IAAI,CAAClD,KAAK,CAACkD,MAAM,CAAC9B,QAAQ,CAAC,CAAA;AAChD,IAAA,MAAMiB,IAAa,GAAG,MAAMa,MAAM,CAACM,OAAO,EAAE,CAAA;AAC5C,IAAA,MAAM,IAAI,CAACxD,KAAK,CAACuD,UAAU,CAACnC,QAAQ,CAAC,CAAA;IACrC,IAAI,CAACX,cAAc,CAAC;AAAEmB,MAAAA,IAAI,EAAE,SAAS;AAAES,MAAAA,IAAAA;AAAK,KAAC,CAAC,CAAA;AAChD,GAAA;EAEA,MAAMoB,KAAKA,CAACrC,QAA0B,EAAmB;AACvD,IAAA,OAAO,IAAI,CAACpB,KAAK,CAACyD,KAAK,CAACrC,QAAQ,CAAC,CAAA;AACnC,GAAA;AAEA,EAAA,MAAM8B,MAAMA,CACV9B,QAA0B,EAC1BC,IAAkB,EAC0C;AAC5D,IAAA,MAAM6B,MAAM,GAAG,MAAM,IAAI,CAAClD,KAAK,CAACkD,MAAM,CAAS9B,QAAQ,EAAEC,IAAI,CAAC,CAAA;AAC9D6B,IAAAA,MAAM,CAACQ,aAAa,CAAC,IAAI,CAAC,CAAA;AAC1B,IAAA,OAAOR,MAAM,CAAA;AACf,GAAA;AACF;;ACvQA;;AAae,MAAeS,8BAA8B,CAQ5D;AACEC,EAAAA,YAAYA,GAAwB;AAClC,IAAA,MAAM,IAAIhB,KAAK,CAAC,kDAAkD,CAAC,CAAA;AACrE,GAAA;AAEAiB,EAAAA,mBAAmBA,GAEV;AACP,IAAA,MAAM,IAAIjB,KAAK,CAAC,kDAAkD,CAAC,CAAA;AACrE,GAAA;EAWA3B,iBAAiBA,CACfjB,KAA0E,EACpE;IACN,IAAI,CAAC8D,eAAe,GAAG9D,KAAK,CAAA;AAC9B,GAAA;AAEA+D,EAAAA,iBAAiBA,GAOf;AACA,IAAA,IAAI,CAAC,IAAI,CAACD,eAAe,EAAE;AACzB,MAAA,MAAM,IAAIlB,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACvD,KAAA;IACA,OAAO,IAAI,CAACkB,eAAe,CAAA;AAC7B,GAAA;EAMAE,iBAAiBA,CACf1D,QAA6C,EAC1B;AACnB,IAAA,OAAO,IAAI,CAAC2D,UAAU,CAAC3D,QAAQ,EAAE,IAAI,CAAC,CAAA;AACxC,GAAA;EAEAD,SAASA,CAACC,QAA6C,EAAqB;AAC1E,IAAA,OAAO,IAAI,CAAC2D,UAAU,CAAC3D,QAAQ,EAAE,KAAK,CAAC,CAAA;AACzC,GAAA;AAMF;;;;"}