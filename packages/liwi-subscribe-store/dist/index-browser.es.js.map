{"version":3,"file":"index-browser.es.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribableStoreQuery.ts"],"sourcesContent":["import type {\n  AbstractConnection,\n  AbstractStoreCursor,\n  AllowedKeyValue,\n  BaseModel,\n  Criteria,\n  InsertType,\n  OptionalBaseModelKeysForInsert,\n  QueryOptions,\n  QueryParams,\n  Sort,\n  Store as StoreInterface,\n  SubscribableStore,\n  SubscribableStoreQuery,\n  Transformer,\n  Update,\n  UpsertPartialObject,\n  UpsertResult,\n} from \"liwi-store\";\n\nexport type Actions<Model> =\n  | { type: \"deleted\"; prev: Model[] }\n  | { type: \"inserted\"; next: Model[] }\n  | { type: \"updated\"; changes: [Model, Model][] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >,\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection>\n{\n  private readonly store: Store;\n\n  private readonly listeners = new Set<Listener<Model>>();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: \"inserted\", next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: \"updated\", changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: \"updated\",\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]!]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>[\"$setOnInsert\"],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>[\"$setOnInsert\"],\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: \"inserted\",\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error(\"TODO\");\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({\n        [this.store.keyPath]: key,\n        ...criteria,\n      } as Criteria<Model>))!,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: \"updated\", changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: \"updated\", changes });\n  }\n\n  async deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria))!);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: \"deleted\", prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: \"deleted\", prev });\n  }\n\n  async count(criteria?: Criteria<Model>): Promise<number> {\n    return this.store.count(criteria);\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import type {\n  AllowedKeyValue,\n  BaseModel,\n  InsertType,\n  Query,\n  QueryParams,\n  QueryResult,\n  QuerySubscription,\n  SubscribeCallback,\n} from \"liwi-store\";\nimport type SubscribeStore from \"./SubscribeStore\";\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model,\n> implements Query<Result, Params, KeyValue>\n{\n  changeParams(params: Params): never {\n    throw new Error(\"Method not supported. Please create a new query.\");\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error(\"Method not supported. Please create a new query.\");\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error(\"_subscribeStore is not initialized\");\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n"],"names":[],"mappings":"AA2BA,MAAqB,cAAA,CAerB;AAAA,EAOE,YAAY,KAAA,EAAc;AAJ1B,IAAA,IAAA,CAAiB,SAAA,uBAAgB,GAAA,EAAqB;AAKpD,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AACb,IAAA,IAAA,CAAK,UAAU,KAAA,CAAM,OAAA;AAAA;AACvB,EAEA,IAAI,UAAA,GAAyB;AAC3B,IAAA,OAAO,KAAK,KAAA,CAAM,UAAA;AAAA;AACpB,EAEA,UAAU,QAAA,EAAuC;AAC/C,IAAA,IAAA,CAAK,SAAA,CAAU,IAAI,QAAQ,CAAA;AAC3B,IAAA,OAAO,MAAM,IAAA,CAAK,SAAA,CAAU,MAAA,CAAO,QAAQ,CAAA;AAAA;AAC7C,EAEA,eAAe,MAAA,EAA8B;AAC3C,IAAA,IAAA,CAAK,UAAU,OAAA,CAAQ,CAAC,QAAA,KAAa,QAAA,CAAS,MAAM,CAAC,CAAA;AAAA;AACvD,EAEA,qBAAA,CAIE,SACA,WAAA,EAQA;AACA,IAAA,MAAM,KAAA,GAOF,IAAA,CAAK,KAAA,CAAM,qBAAA,CAAsC,SAAS,WAAW,CAAA;AACzE,IAAA,KAAA,CAAM,kBAAkB,IAAI,CAAA;AAC5B,IAAA,OAAO,KAAA;AAAA;AACT,EAEA,qBAAA,CAIE,SACA,WAAA,EAQA;AACA,IAAA,MAAM,KAAA,GAOF,IAAA,CAAK,KAAA,CAAM,qBAAA,CAAoC,SAAS,WAAW,CAAA;AACvE,IAAA,KAAA,CAAM,kBAAkB,IAAI,CAAA;AAC5B,IAAA,OAAO,KAAA;AAAA;AACT,EAEA,OAAA,CAAQ,UAA4B,IAAA,EAAsC;AACxE,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,OAAA,CAAQ,QAAA,EAAU,IAAI,CAAA;AAAA;AAC1C,EAEA,SAAA,CACE,KACA,QAAA,EAC4B;AAC5B,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,SAAA,CAAU,GAAA,EAAK,QAAQ,CAAA;AAAA;AAC3C,EAEA,OAAA,CACE,UACA,IAAA,EAC4B;AAC5B,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,OAAA,CAAQ,QAAA,EAAU,IAAI,CAAA;AAAA;AAC1C,EAEA,MAAM,UAAU,MAAA,EAAyC;AACvD,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,KAAA,CAAM,UAAU,MAAM,CAAA;AAClD,IAAA,IAAA,CAAK,cAAA,CAAe,EAAE,IAAA,EAAM,UAAA,EAAY,MAAM,CAAC,QAAQ,GAAG,CAAA;AAC1D,IAAA,OAAO,QAAA;AAAA;AACT,EAEA,MAAM,WAAW,MAAA,EAA+B;AAC9C,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,KAAA,CAAM,WAAW,MAAM,CAAA;AACnD,IAAA,IAAA,CAAK,cAAA,CAAe,EAAE,IAAA,EAAM,SAAA,EAAW,OAAA,EAAS,CAAC,CAAC,MAAA,EAAQ,QAAQ,CAAC,CAAA,EAAG,CAAA;AACtE,IAAA,OAAO,QAAA;AAAA;AACT,EAEA,MAAM,eAAe,OAAA,EAAoC;AACvD,IAAA,MAAM,eAAA,GAAkB,MAAM,IAAA,CAAK,KAAA,CAAM,eAAe,OAAO,CAAA;AAC/D,IAAA,IAAA,CAAK,cAAA,CAAe;AAAA,MAClB,IAAA,EAAM,SAAA;AAAA,MACN,OAAA,EAAS,OAAA,CAAQ,GAAA,CAAI,CAAC,IAAA,EAAM,KAAA,KAAU,CAAC,IAAA,EAAM,eAAA,CAAgB,KAAK,CAAE,CAAC;AAAA,KACtE,CAAA;AACD,IAAA,OAAO,eAAA;AAAA;AACT,EAEA,MAAM,SAAA,CAGJ,MAAA,EACA,wBAAA,EACgB;AAChB,IAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,iBAAA;AAAA,MACxB,MAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,OAAO,MAAA,CAAO,MAAA;AAAA;AAChB,EAEA,MAAM,iBAAA,CAGJ,MAAA,EACA,wBAAA,EAC8B;AAC9B,IAAA,MAAM,gBAAA,GAAmB,MAAM,IAAA,CAAK,KAAA,CAAM,iBAAA;AAAA,MACxC,MAAA;AAAA,MACA;AAAA,KACF;AACA,IAAA,IAAI,iBAAiB,QAAA,EAAU;AAC7B,MAAA,IAAA,CAAK,cAAA,CAAe;AAAA,QAClB,IAAA,EAAM,UAAA;AAAA,QACN,IAAA,EAAM,CAAC,gBAAA,CAAiB,MAAM;AAAA,OAC/B,CAAA;AAAA,KACH,MAAO;AACL,MAAA,MAAM,IAAI,MAAM,MAAM,CAAA;AAAA;AAExB,IAAA,OAAO,gBAAA;AAAA;AACT,EAEA,MAAM,kBAAA,CACJ,GAAA,EACA,aAAA,EACA,QAAA,EACgB;AAChB,IAAA,OAAO,IAAA,CAAK,gBAAA;AAAA,MACT,MAAM,KAAK,OAAA,CAAQ;AAAA,QAClB,CAAC,IAAA,CAAK,KAAA,CAAM,OAAO,GAAG,GAAA;AAAA,QACtB,GAAG;AAAA,OACe,CAAA;AAAA,MACpB;AAAA,KACF;AAAA;AACF,EAEA,MAAM,gBAAA,CACJ,MAAA,EACA,aAAA,EACgB;AAChB,IAAA,MAAM,UAAU,MAAM,IAAA,CAAK,KAAA,CAAM,gBAAA,CAAiB,QAAQ,aAAa,CAAA;AACvE,IAAA,IAAA,CAAK,cAAA,CAAe,EAAE,IAAA,EAAM,SAAA,EAAW,OAAA,EAAS,CAAC,CAAC,MAAA,EAAQ,OAAO,CAAC,CAAA,EAAG,CAAA;AACrE,IAAA,OAAO,OAAA;AAAA;AACT,EAEA,MAAM,iBAAA,CACJ,QAAA,EACA,aAAA,EACe;AACf,IAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,KAAA,CAAM,OAAO,QAAQ,CAAA;AAC/C,IAAA,MAAM,UAA4B,EAAC;AAEnC,IAAA,MAAM,MAAA,CAAO,OAAA,CAAQ,OAAO,KAAA,KAAU;AACpC,MAAA,MAAM,GAAA,GAAM,KAAA,CAAM,IAAA,CAAK,KAAA,CAAM,OAAO,CAAA;AACpC,MAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,KAAA,CAAM,kBAAA;AAAA,QAC/B,GAAA;AAAA,QACA,aAAA;AAAA,QACA;AAAA,OACF;AACA,MAAA,OAAA,CAAQ,IAAA,CAAK,CAAC,KAAA,EAAO,OAAO,CAAC,CAAA;AAAA,KAC9B,CAAA;AACD,IAAA,IAAA,CAAK,cAAA,CAAe,EAAE,IAAA,EAAM,SAAA,EAAW,SAAS,CAAA;AAAA;AAClD,EAEA,MAAM,WAAA,CAAY,GAAA,EAAe,QAAA,EAA2C;AAC1E,IAAA,OAAO,KAAK,SAAA,CAAW,MAAM,KAAK,SAAA,CAAU,GAAA,EAAK,QAAQ,CAAG,CAAA;AAAA;AAC9D,EAEA,MAAM,UAAU,MAAA,EAA8B;AAC5C,IAAA,MAAM,IAAA,CAAK,KAAA,CAAM,SAAA,CAAU,MAAM,CAAA;AACjC,IAAA,IAAA,CAAK,cAAA,CAAe,EAAE,IAAA,EAAM,SAAA,EAAW,MAAM,CAAC,MAAM,GAAG,CAAA;AAAA;AACzD,EAEA,MAAM,WAAW,QAAA,EAA0C;AACzD,IAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,KAAA,CAAM,OAAO,QAAQ,CAAA;AAC/C,IAAA,MAAM,IAAA,GAAgB,MAAM,MAAA,CAAO,OAAA,EAAQ;AAC3C,IAAA,MAAM,IAAA,CAAK,KAAA,CAAM,UAAA,CAAW,QAAQ,CAAA;AACpC,IAAA,IAAA,CAAK,cAAA,CAAe,EAAE,IAAA,EAAM,SAAA,EAAW,MAAM,CAAA;AAAA;AAC/C,EAEA,MAAM,MAAM,QAAA,EAA6C;AACvD,IAAA,OAAO,IAAA,CAAK,KAAA,CAAM,KAAA,CAAM,QAAQ,CAAA;AAAA;AAClC,EAEA,MAAM,MAAA,CACJ,QAAA,EACA,IAAA,EAC4D;AAC5D,IAAA,MAAM,SAAS,MAAM,IAAA,CAAK,KAAA,CAAM,MAAA,CAAe,UAAU,IAAI,CAAA;AAC7D,IAAA,MAAA,CAAO,cAAc,IAAI,CAAA;AACzB,IAAA,OAAO,MAAA;AAAA;AAEX;;AC1PA,MAA8B,8BAAA,CAQ9B;AAAA,EACE,aAAa,MAAA,EAAuB;AAClC,IAAA,MAAM,IAAI,MAAM,kDAAkD,CAAA;AAAA;AACpE,EAEA,oBACE,MAAA,EACO;AACP,IAAA,MAAM,IAAI,MAAM,kDAAkD,CAAA;AAAA;AACpE,EAWA,kBACE,KAAA,EACM;AACN,IAAA,IAAA,CAAK,eAAA,GAAkB,KAAA;AAAA;AACzB,EAEA,iBAAA,GAOE;AACA,IAAA,IAAI,CAAC,KAAK,eAAA,EAAiB;AACzB,MAAA,MAAM,IAAI,MAAM,oCAAoC,CAAA;AAAA;AAEtD,IAAA,OAAO,IAAA,CAAK,eAAA;AAAA;AACd,EAMA,kBACE,QAAA,EACmB;AACnB,IAAA,OAAO,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAI,CAAA;AAAA;AACvC,EAEA,UAAU,QAAA,EAAkE;AAC1E,IAAA,OAAO,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,KAAK,CAAA;AAAA;AAO1C;;;;"}