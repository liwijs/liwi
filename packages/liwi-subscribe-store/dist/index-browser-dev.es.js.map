{"version":3,"file":"index-browser-dev.es.js","sources":["../src/AbstractSubscribableStoreQuery.ts","../src/SubscribeStore.ts"],"sourcesContent":["import type {\n  Query,\n  SubscribeCallback,\n  QuerySubscription,\n  QueryResult,\n  QueryParams,\n} from 'liwi-store';\nimport type { BaseModel, InsertType, AllowedKeyValue } from 'liwi-types';\nimport type SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model\n> implements Query<Result, Params, KeyValue> {\n  changeParams(params: Params): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n","/* eslint-disable max-lines */\nimport type {\n  Store as StoreInterface,\n  AbstractConnection,\n  UpsertResult,\n  SubscribableStoreQuery,\n  AbstractStoreCursor,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n} from 'liwi-store';\nimport type {\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-types';\n\nexport type Actions<Model> =\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; changes: [Model, Model][] }\n  | { type: 'deleted'; prev: Model[] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection> {\n  private readonly store: Store;\n\n  private readonly listeners: Set<Listener<Model>> = new Set();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(key: any, criteria?: Criteria<Model>): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Pick<Model, K>,\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Pick<Model, K>,\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({ [this.store.keyPath]: key, ...criteria })) as Model,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: 'updated', changes });\n  }\n\n  async deleteByKey(key: any, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria)) as Model);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: 'deleted', prev });\n  }\n\n  async cursor<Result = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n"],"names":["AbstractSubscribableStoreQuery","changeParams","Error","changePartialParams","setSubscribeStore","store","_subscribeStore","getSubscribeStore","fetchAndSubscribe","callback","_subscribe","subscribe","SubscribeStore","listeners","Set","keyPath","add","delete","callSubscribed","action","forEach","listener","createQuerySingleItem","options","transformer","query","createQueryCollection","findAll","criteria","sort","findByKey","key","findOne","insertOne","object","inserted","type","next","replaceOne","replaced","changes","replaceSeveral","objects","replacedObjects","map","prev","index","upsertOne","setOnInsertPartialObject","upsertOneWithInfo","result","upsertedWithInfo","partialUpdateByKey","partialUpdate","partialUpdateOne","updated","partialUpdateMany","cursor","model","push","deleteByKey","deleteOne","deleteMany","toArray","overrideStore","connection"],"mappings":"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"}