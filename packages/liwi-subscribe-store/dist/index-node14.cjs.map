{"version":3,"file":"index-node14.cjs","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribableStoreQuery.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Store as StoreInterface,\n  AbstractConnection,\n  UpsertResult,\n  SubscribableStoreQuery,\n  AbstractStoreCursor,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-store';\n\nexport type Actions<Model> =\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; changes: [Model, Model][] }\n  | { type: 'deleted'; prev: Model[] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >,\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection>\n{\n  private readonly store: Store;\n\n  private readonly listeners: Set<Listener<Model>> = new Set();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({\n        [this.store.keyPath]: key,\n        ...criteria,\n      } as Criteria<Model>))!,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: 'updated', changes });\n  }\n\n  async deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria))!);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: 'deleted', prev });\n  }\n\n  async count(criteria?: Criteria<Model>): Promise<number> {\n    return this.store.count(criteria);\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import type {\n  Query,\n  SubscribeCallback,\n  QuerySubscription,\n  QueryResult,\n  QueryParams,\n  BaseModel,\n  InsertType,\n  AllowedKeyValue,\n} from 'liwi-store';\nimport type SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model,\n> implements Query<Result, Params, KeyValue>\n{\n  changeParams(params: Params): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n"],"names":["SubscribeStore","listeners","Set","constructor","store","keyPath","connection","subscribe","callback","add","delete","callSubscribed","action","forEach","listener","createQuerySingleItem","options","transformer","query","setSubscribeStore","createQueryCollection","findAll","criteria","sort","findByKey","key","findOne","insertOne","object","inserted","type","next","replaceOne","replaced","changes","replaceSeveral","objects","replacedObjects","map","prev","index","upsertOne","setOnInsertPartialObject","result","upsertOneWithInfo","upsertedWithInfo","Error","partialUpdateByKey","partialUpdate","partialUpdateOne","updated","partialUpdateMany","cursor","model","push","deleteByKey","deleteOne","deleteMany","toArray","count","overrideStore","AbstractSubscribableStoreQuery","changeParams","changePartialParams","_subscribeStore","getSubscribeStore","fetchAndSubscribe","_subscribe"],"mappings":"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"}