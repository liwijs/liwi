{"version":3,"file":"index-browser.cjs.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribableStoreQuery.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Store as StoreInterface,\n  AbstractConnection,\n  UpsertResult,\n  SubscribableStoreQuery,\n  AbstractStoreCursor,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-store';\n\nexport type Actions<Model> =\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; changes: [Model, Model][] }\n  | { type: 'deleted'; prev: Model[] };\n\nexport type Listener<Model> = (action: Actions<Model>) => unknown;\n\nexport default class SubscribeStore<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Connection extends AbstractConnection,\n  Store extends SubscribableStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    Connection\n  >,\n> implements\n    StoreInterface<KeyPath, KeyValue, Model, ModelInsertType, Connection>\n{\n  private readonly store: Store;\n\n  private readonly listeners: Set<Listener<Model>> = new Set();\n\n  readonly keyPath: KeyPath;\n\n  constructor(store: Store) {\n    this.store = store;\n    this.keyPath = store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>): () => void {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>): void {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuerySingleItem<\n    Result extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Result,\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Result,\n      Params\n    > = this.store.createQuerySingleItem<Result, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  createQueryCollection<\n    Item extends Record<KeyPath, KeyValue>,\n    Params extends QueryParams<Params>,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): SubscribableStoreQuery<\n    KeyPath,\n    KeyValue,\n    Model,\n    SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n    Item[],\n    Params\n  > {\n    const query: SubscribableStoreQuery<\n      KeyPath,\n      KeyValue,\n      Model,\n      SubscribableStore<KeyPath, KeyValue, Model, ModelInsertType, Connection>,\n      Item[],\n      Params\n    > = this.store.createQueryCollection<Item, Params>(options, transformer);\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findByKey(key, criteria);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: ModelInsertType): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', changes: [[object, replaced]] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      changes: objects.map((prev, index) => [prev, replacedObjects[index]]),\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<keyof Model, KeyPath | OptionalBaseModelKeysForInsert>,\n  >(\n    object: UpsertPartialObject<KeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({\n        [this.store.keyPath]: key,\n        ...criteria,\n      } as Criteria<Model>))!,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', changes: [[object, updated]] });\n    return updated;\n  }\n\n  async partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const changes: [Model, Model][] = [];\n\n    await cursor.forEach(async (model) => {\n      const key = model[this.store.keyPath];\n      const updated = await this.store.partialUpdateByKey(\n        key,\n        partialUpdate,\n        criteria,\n      );\n      changes.push([model, updated]);\n    });\n    this.callSubscribed({ type: 'updated', changes });\n  }\n\n  async deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.deleteOne((await this.findByKey(key, criteria))!);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  async deleteMany(criteria: Criteria<Model>): Promise<void> {\n    const cursor = await this.store.cursor(criteria);\n    const prev: Model[] = await cursor.toArray();\n    await this.store.deleteMany(criteria);\n    this.callSubscribed({ type: 'deleted', prev });\n  }\n\n  async count(criteria?: Criteria<Model>): Promise<number> {\n    return this.store.count(criteria);\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<AbstractStoreCursor<any, KeyValue, Model, Result>> {\n    const cursor = await this.store.cursor<Result>(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import type {\n  Query,\n  SubscribeCallback,\n  QuerySubscription,\n  QueryResult,\n  QueryParams,\n  BaseModel,\n  InsertType,\n  AllowedKeyValue,\n} from 'liwi-store';\nimport type SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribableStoreQuery<\n  KeyPath extends keyof Model,\n  KeyValue extends AllowedKeyValue,\n  Model extends BaseModel & Record<KeyPath, KeyValue>,\n  ModelInsertType extends InsertType<Model, KeyPath>,\n  Params extends QueryParams<Params> = never,\n  Result = Model,\n> implements Query<Result, Params, KeyValue>\n{\n  changeParams(params: Params): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  changePartialParams(\n    params: Params extends undefined ? never : Partial<Params>,\n  ): never {\n    throw new Error('Method not supported. Please create a new query.');\n  }\n\n  private _subscribeStore?: SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  >;\n\n  setSubscribeStore(\n    store: SubscribeStore<KeyPath, KeyValue, Model, ModelInsertType, any, any>,\n  ): void {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<\n    KeyPath,\n    KeyValue,\n    Model,\n    ModelInsertType,\n    any,\n    any\n  > {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n\n  abstract fetch<T>(\n    onFulfilled: (result: QueryResult<Result>) => T,\n  ): Promise<T>;\n\n  fetchAndSubscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n  ): QuerySubscription {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<KeyValue, Result>): QuerySubscription {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription;\n}\n"],"names":["SubscribeStore","store","listeners","Set","keyPath","subscribe","callback","add","callSubscribed","action","forEach","listener","createQuerySingleItem","options","transformer","query","setSubscribeStore","createQueryCollection","findAll","criteria","sort","findByKey","key","findOne","insertOne","_asyncToGenerator","_regeneratorRuntime","object","inserted","type","next","replaceOne","replaced","changes","replaceSeveral","objects","replacedObjects","map","prev","index","upsertOne","setOnInsertPartialObject","upsertOneWithInfo","result","upsertedWithInfo","Error","partialUpdateByKey","partialUpdate","_extends","partialUpdateOne","updated","partialUpdateMany","cursor","model","push","deleteByKey","deleteOne","deleteMany","toArray","count","overrideStore","connection","AbstractSubscribableStoreQuery","changeParams","changePartialParams","_subscribeStore","getSubscribeStore","fetchAndSubscribe","_subscribe"],"mappings":"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"}