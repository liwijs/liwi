{"version":3,"file":"index-browser.cjs.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribeQuery.ts"],"sourcesContent":["import {\n  Store as StoreInterface,\n  AbstractConnection,\n  AbstractStoreCursor,\n  UpsertResult,\n} from 'liwi-store';\nimport {\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n} from 'liwi-types';\nimport AbstractSubscribeQuery from './AbstractSubscribeQuery';\n\nexport type Actions<Model> =\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; prev: Model[]; next: Model[] }\n  | { type: 'deleted'; prev: Model[] };\n\nexport type Listener<Model> = (action: Actions<Model>) => void;\n\nexport default class SubscribeStore<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Connection extends AbstractConnection,\n  Cursor extends AbstractStoreCursor<Model, KeyPath, any>,\n  Store extends StoreInterface<Model, KeyPath, Connection, Cursor>\n> implements StoreInterface<Model, KeyPath, Connection, Cursor> {\n  private store: Store;\n\n  private listeners: Set<Listener<Model>> = new Set();\n\n  constructor(store: Store) {\n    this.store = store;\n  }\n\n  get keyPath() {\n    return this.store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>) {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuery<Transformed>(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Transformed>,\n  ): AbstractSubscribeQuery<Model, Store, Transformed> {\n    const query: AbstractSubscribeQuery<\n      Model,\n      Store,\n      Transformed\n    > = this.store.createQuery(options, transformer) as AbstractSubscribeQuery<\n      Model,\n      Store,\n      Transformed\n    >;\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    return this.store.findByKey(key);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: InsertType<Model, KeyPath>): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', prev: [object], next: [replaced] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      prev: objects,\n      next: replacedObjects,\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne(object: InsertType<Model, KeyPath>): Promise<Model> {\n    const result = await this.upsertOneWithInfo(object);\n    return result.object;\n  }\n\n  async upsertOneWithInfo(\n    object: InsertType<Model, KeyPath>,\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(object);\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({ [this.store.keyPath]: key, ...criteria })) as Model,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', prev: [object], next: [updated] });\n    return updated;\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    throw new Error('partialUpdateMany cannot be used in SubscribeStore');\n    // return this.store.partialUpdateMany(criteria, partialUpdate);\n  }\n\n  async deleteByKey(key: any): Promise<void> {\n    return this.deleteOne((await this.findByKey(key)) as Model);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  deleteMany(criteria: Criteria<Model>): Promise<void> {\n    throw new Error('deleteMany cannot be used in SubscribeStore');\n  }\n\n  async cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Cursor> {\n    const cursor = await this.store.cursor(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import { BaseModel } from 'liwi-types';\nimport { AbstractQuery, Store as StoreInterface } from 'liwi-store';\nimport SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribeQuery<\n  Model extends BaseModel,\n  Store extends StoreInterface<Model, any, any, any>,\n  Transformed = Model\n> extends AbstractQuery<Transformed> {\n  private _subscribeStore?: SubscribeStore<Model, any, any, any, any>;\n\n  setSubscribeStore(store: SubscribeStore<Model, any, any, any, any>) {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<Model, any, any, any, any> {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n}\n"],"names":["SubscribeStore","store","listeners","Set","subscribe","callback","add","delete","callSubscribed","action","forEach","listener","createQuery","options","transformer","query","setSubscribeStore","findAll","criteria","sort","findByKey","key","findOne","insertOne","object","inserted","type","next","replaceOne","replaced","prev","replaceSeveral","objects","replacedObjects","upsertOne","upsertOneWithInfo","result","upsertedWithInfo","Error","partialUpdateByKey","partialUpdate","keyPath","partialUpdateOne","updated","partialUpdateMany","deleteByKey","deleteOne","deleteMany","cursor","overrideStore","connection","AbstractSubscribeQuery","_subscribeStore","getSubscribeStore","AbstractQuery"],"mappings":"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"}