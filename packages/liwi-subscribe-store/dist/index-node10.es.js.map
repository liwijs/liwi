{"version":3,"file":"index-node10.es.js","sources":["../src/SubscribeStore.ts","../src/AbstractSubscribeQuery.ts"],"sourcesContent":["import {\n  Store as StoreInterface,\n  AbstractConnection,\n  AbstractStoreCursor,\n  UpsertResult,\n} from 'liwi-store';\nimport {\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n} from 'liwi-types';\nimport AbstractSubscribeQuery from './AbstractSubscribeQuery';\n\nexport type Actions<Model> =\n  | { type: 'inserted'; next: Model[] }\n  | { type: 'updated'; prev: Model[]; next: Model[] }\n  | { type: 'deleted'; prev: Model[] };\n\nexport type Listener<Model> = (action: Actions<Model>) => void;\n\nexport default class SubscribeStore<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Connection extends AbstractConnection,\n  Cursor extends AbstractStoreCursor<Model, KeyPath, any>,\n  Store extends StoreInterface<Model, KeyPath, Connection, Cursor>\n> implements StoreInterface<Model, KeyPath, Connection, Cursor> {\n  private store: Store;\n\n  private listeners: Set<Listener<Model>> = new Set();\n\n  constructor(store: Store) {\n    this.store = store;\n  }\n\n  get keyPath() {\n    return this.store.keyPath;\n  }\n\n  get connection(): Connection {\n    return this.store.connection;\n  }\n\n  subscribe(callback: Listener<Model>) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  callSubscribed(action: Actions<Model>) {\n    this.listeners.forEach((listener) => listener(action));\n  }\n\n  createQuery<Transformed>(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Transformed>,\n  ): AbstractSubscribeQuery<Model, Store, Transformed> {\n    const query: AbstractSubscribeQuery<\n      Model,\n      Store,\n      Transformed\n    > = this.store.createQuery(options, transformer) as AbstractSubscribeQuery<\n      Model,\n      Store,\n      Transformed\n    >;\n    query.setSubscribeStore(this);\n    return query;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.store.findAll(criteria, sort);\n  }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    return this.store.findByKey(key);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.store.findOne(criteria, sort);\n  }\n\n  async insertOne(object: InsertType<Model, KeyPath>): Promise<Model> {\n    const inserted = await this.store.insertOne(object);\n    this.callSubscribed({ type: 'inserted', next: [inserted] });\n    return inserted;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    const replaced = await this.store.replaceOne(object);\n    this.callSubscribed({ type: 'updated', prev: [object], next: [replaced] });\n    return replaced;\n  }\n\n  async replaceSeveral(objects: Model[]): Promise<Model[]> {\n    const replacedObjects = await this.store.replaceSeveral(objects);\n    this.callSubscribed({\n      type: 'updated',\n      prev: objects,\n      next: replacedObjects,\n    });\n    return replacedObjects;\n  }\n\n  async upsertOne(object: InsertType<Model, KeyPath>): Promise<Model> {\n    const result = await this.upsertOneWithInfo(object);\n    return result.object;\n  }\n\n  async upsertOneWithInfo(\n    object: InsertType<Model, KeyPath>,\n  ): Promise<UpsertResult<Model>> {\n    const upsertedWithInfo = await this.store.upsertOneWithInfo(object);\n    if (upsertedWithInfo.inserted) {\n      this.callSubscribed({\n        type: 'inserted',\n        next: [upsertedWithInfo.object],\n      });\n    } else {\n      throw new Error('TODO');\n    }\n    return upsertedWithInfo;\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateOne(\n      (await this.findOne({ [this.store.keyPath]: key, ...criteria })) as Model,\n      partialUpdate,\n    );\n  }\n\n  async partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const updated = await this.store.partialUpdateOne(object, partialUpdate);\n    this.callSubscribed({ type: 'updated', prev: [object], next: [updated] });\n    return updated;\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    throw new Error('partialUpdateMany cannot be used in SubscribeStore');\n    // return this.store.partialUpdateMany(criteria, partialUpdate);\n  }\n\n  async deleteByKey(key: any): Promise<void> {\n    return this.deleteOne((await this.findByKey(key)) as Model);\n  }\n\n  async deleteOne(object: Model): Promise<void> {\n    await this.store.deleteOne(object);\n    this.callSubscribed({ type: 'deleted', prev: [object] });\n  }\n\n  deleteMany(criteria: Criteria<Model>): Promise<void> {\n    throw new Error('deleteMany cannot be used in SubscribeStore');\n  }\n\n  async cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Cursor> {\n    const cursor = await this.store.cursor(criteria, sort);\n    cursor.overrideStore(this);\n    return cursor;\n  }\n}\n","import { BaseModel } from 'liwi-types';\nimport { AbstractQuery, Store as StoreInterface } from 'liwi-store';\nimport SubscribeStore from './SubscribeStore';\n\nexport default abstract class AbstractSubscribeQuery<\n  Model extends BaseModel,\n  Store extends StoreInterface<Model, any, any, any>,\n  Transformed = Model\n> extends AbstractQuery<Transformed> {\n  private _subscribeStore?: SubscribeStore<Model, any, any, any, any>;\n\n  setSubscribeStore(store: SubscribeStore<Model, any, any, any, any>) {\n    this._subscribeStore = store;\n  }\n\n  getSubscribeStore(): SubscribeStore<Model, any, any, any, any> {\n    if (!this._subscribeStore) {\n      throw new Error('_subscribeStore is not initialized');\n    }\n    return this._subscribeStore;\n  }\n}\n"],"names":["SubscribeStore","constructor","store","listeners","Set","keyPath","connection","subscribe","callback","add","delete","callSubscribed","action","forEach","listener","createQuery","options","transformer","query","setSubscribeStore","findAll","criteria","sort","findByKey","key","findOne","insertOne","object","inserted","type","next","replaceOne","replaced","prev","replaceSeveral","objects","replacedObjects","upsertOne","result","upsertOneWithInfo","upsertedWithInfo","Error","partialUpdateByKey","partialUpdate","partialUpdateOne","updated","partialUpdateMany","deleteByKey","deleteOne","deleteMany","cursor","overrideStore","AbstractSubscribeQuery","AbstractQuery","_subscribeStore","getSubscribeStore"],"mappings":"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"}