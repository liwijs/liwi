/* eslint-disable complexity */
import { PRODUCTION } from 'pob-babel';
// eslint-disable-next-line import/no-unresolved, import/extensions
import { Server, Socket } from 'socket.io';
import { RestService } from 'liwi-rest';
import { Logger } from 'nightingale-logger';

const MAX_OPENED_CURSORS = 5;
const logger = new Logger('liwi:rest-websocket');

export default function init(io: Server, restService: RestService) {
  io.on('connection', (socket: Socket) => {
    let openCursors = new Map();
    let timeouts = new Map();
    let activeListeners = new Map();

    const closeCursor = (id) => {
      clearTimeout(timeouts[id]);
      timeouts.delete(id);
      openCursors[id].close();
      openCursors.delete(id);
    };

    socket.on('disconnect', () => {
      openCursors.forEach((cursor) => cursor.close());
      timeouts.forEach((timeout) => clearTimeout(timeout));
      activeListeners.forEach((listener) => listener.close());

      openCursors = undefined;
      timeouts = undefined;
      activeListeners = undefined;
    });

    let nextIdCursor = 1;

    socket.on(
      'rest',
      (
        { type, restName }: { type: string; restName: string },
        args: Array<any>,
        callback: Function,
      ) => {
        logger.info('rest', { type, restName, args });
        switch (type) {
          case 'createCursor': {
            if (openCursors.size > MAX_OPENED_CURSORS) {
              return callback('too many cursors');
            }

            const id = nextIdCursor++;
            const [options] = args;
            const cursor = restService.createCursor(restName, options);
            if (!cursor) return callback('failed to create cursor');

            timeouts.set(
              id,
              setTimeout(() => {
                logger.warn('socket closed by timeout', { id, restName });
                closeCursor(id);
              }),
            );

            return callback(null, id);
          }

          case 'cursor toArray': {
            const [options] = args;
            return restService
              .createCursor(restName, options)
              .then((cursor) => cursor.toArray())
              .then((results) => callback(null, results))
              .catch((err) => callback(err.message));
          }

          case 'cursor': {
            const [{ type: typeCursorAction, id: idCursor }, cursorArgs] = args;

            const cursor = openCursors.get(idCursor);
            if (!cursor) return callback(`failed to find cursor "${idCursor}"`);
            switch (typeCursorAction) {
              case 'close':
                closeCursor(idCursor);
                return callback();

              case 'advance':
              case 'next':
              case 'count':
                // eslint-disable-next-line prettier/prettier
                return cursor[type](...cursorArgs)
                  .then((result) => callback(null, result))
                  .catch((err) => callback(err.message || err));
              /* cursor.next().then((key) => {
                                if (!key) return callback(null);
                                return cursor.result();
                            }).then(result => {
                                    response(null, restService.transform(data));
                                });
                            }, () => {
                                response(null);
                            }); */

              default:
                callback(`Unknown command: "${type}"`);
            }

            break;
          }

          case 'insertOne':
          case 'updateOne':
          case 'partialUpdateByKey':
          case 'partialUpdateOne':
          case 'partialUpdateMany':
          case 'deleteByKey':
          case 'deleteMany':
          case 'findOne':
            // eslint-disable-next-line prettier/prettier
            return restService[type](restName, ...args)
              .then((result) => callback(null, result))
              .catch((err) => callback(err.message || err));

          default:
            callback(`Unknown command: "${type}"`);
        }
      },
    );
  });
}
