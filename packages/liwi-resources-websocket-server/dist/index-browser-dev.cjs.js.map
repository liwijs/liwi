{"version":3,"file":"index-browser-dev.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable complexity */\n// import { PRODUCTION } from 'pob-babel';\n// eslint-disable-next-line import/no-unresolved, import/extensions\nimport { Server, Socket } from 'socket.io';\nimport { ResourcesServerService } from 'liwi-resources-server';\nimport Logger from 'nightingale-logger';\nimport { encode, decode } from 'extended-json';\nimport { QueryOptions, ResourceOperationKey } from 'liwi-types';\n\nconst logger = new Logger('liwi:rest-websocket');\n\ntype Callback = (err: null | string, result?: string | undefined) => void;\n\ndeclare module 'socket.io' {\n  interface Socket {\n    // user added in alp-auth\n    user?: any;\n  }\n}\n\nexport default function init(\n  io: Server,\n  resourcesService: ResourcesServerService,\n) {\n  io.on('connection', (socket: Socket) => {\n    const openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach((watcher) => watcher.stop());\n    });\n\n    socket.on(\n      'resource',\n      (\n        {\n          type,\n          resourceName,\n          json,\n        }: { json: string; resourceName: string; type: ResourceOperationKey },\n        callback: Callback,\n      ) => {\n        try {\n          const args = decode(json);\n          if (!Array.isArray(args)) {\n            logger.debug('args', { args });\n\n            if (callback) {\n              throw new Error('Invalid args');\n            }\n          }\n\n          const resource = resourcesService.get(resourceName);\n\n          logger.info('resource', { type, resourceName, args });\n          switch (type) {\n            case 'cursor toArray': {\n              const [options]: [QueryOptions<any>] = args;\n              return resourcesService\n                .createCursor(resource, socket.user, options)\n                .then((cursor) => cursor.toArray())\n                .then((results) => callback(null, encode(results)))\n                .catch((err) => {\n                  logger.error(type, err);\n                  callback(err.message);\n                });\n            }\n\n            case 'findByKey':\n            case 'findOne':\n            case 'insertOne':\n            case 'replaceOne':\n            case 'replaceSeveral':\n            case 'upsertOneWithInfo':\n            case 'partialUpdateByKey':\n            case 'partialUpdateMany':\n            case 'deleteByKey':\n            case 'deleteMany':\n              callback('TODO: to implement');\n              break;\n            // try {\n            //   if (!PRODUCTION && !resource[type]) {\n            //     throw new Error(\n            //       `rest: ${resourceName}.${type} is not available`,\n            //     );\n            //   }\n            //\n            //   // eslint-disable-next-line prettier/prettier\n            //   return resource[type](socket.user, ...args)\n            //     .then((result: any) => callback(null, encode(result)))\n            //     .catch((err: Error) => {\n            //       logger.error(type, { err });\n            //       callback(err.message);\n            //     });\n            // } catch (err) {\n            //   logger.error(type, { err });\n            //   callback(err.message || err);\n            // }\n            // break;\n\n            case 'fetch':\n            case 'subscribe':\n            case 'fetchAndSubscribe':\n              try {\n                const [key, eventName, otherArgs = []] = args;\n\n                if (!key.startsWith('query')) {\n                  throw new Error('Invalid query key');\n                }\n\n                const queryOptions = resource.queries[key];\n                // TODO resource.criteria(queryOptions.criteria) & co ?\n                if (!queryOptions) {\n                  throw new Error(\n                    `rest: ${resourceName}.${type}.${key} is not available`,\n                  );\n                }\n                console.log(queryOptions);\n                const query = resource.store.createQuery(queryOptions); // todo pass connected user\n\n                if (type === 'fetch') {\n                  return query\n                    .fetch(\n                      (result: any) => callback(null, result && encode(result)),\n                      ...otherArgs,\n                    )\n                    .catch((err: any) => {\n                      logger.error(type, { err });\n                      callback(err.message || err);\n                    });\n                } else {\n                  const watcher = query[type]((err: Error, result: any) => {\n                    if (err) {\n                      logger.error(type, { err });\n                    }\n\n                    socket.emit(eventName, err, result && encode(result));\n                  });\n                  watcher.then(\n                    () => callback(null),\n                    (err: Error) => {\n                      logger.error(type, { err });\n                      callback(err.message);\n                    },\n                  );\n\n                  openWatchers.add(watcher);\n                }\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            default:\n              try {\n                logger.warn('Unknown command', { type });\n                callback(`rest: unknown command \"${type}\"`);\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n          }\n        } catch (err) {\n          logger.warn('rest error', { err });\n          callback(err.message || err);\n        }\n      },\n    );\n  });\n}\n"],"names":["logger","Logger","init","io","resourcesService","on","socket","openWatchers","Set","forEach","watcher","stop","callback","type","resourceName","json","options","key","eventName","otherArgs","args","decode","Array","isArray","debug","Error","resource","get","info","createCursor","user","then","cursor","toArray","results","encode","catch","err","error","message","startsWith","queryOptions","queries","console","log","query","store","createQuery","fetch","result","emit","add","warn"],"mappings":"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"}