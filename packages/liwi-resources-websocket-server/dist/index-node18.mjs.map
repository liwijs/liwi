{"version":3,"file":"index-node18.mjs","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type http from 'node:http';\nimport type net from 'node:net';\nimport { encode, decode } from 'extended-json';\nimport type { ExtendedJsonValue } from 'extended-json';\nimport type {\n  AckError,\n  ToServerMessage,\n  ToClientMessage,\n  ResourcesServerService,\n  SubscriptionCallback,\n} from 'liwi-resources-server';\nimport {\n  ResourcesServerError,\n  createMessageHandler,\n} from 'liwi-resources-server';\nimport { Logger } from 'nightingale-logger';\nimport type { WebSocket } from 'ws';\nimport { WebSocketServer } from 'ws';\n\ntype GetAuthenticatedUser<AuthenticatedUser> = (\n  request: http.IncomingMessage,\n) => AuthenticatedUser | Promise<AuthenticatedUser | null> | null;\n\ninterface ExtendedWebSocket extends WebSocket {\n  isAlive: boolean;\n}\n\nexport interface ResourcesWebsocketServer {\n  wss: WebSocketServer;\n  close: () => void;\n}\n\nconst logger = new Logger('liwi:resources-websocket-server');\n\nexport const createWsServer = <AuthenticatedUser>(\n  server: http.Server,\n  path: string,\n  resourcesServerService: ResourcesServerService,\n  getAuthenticatedUser: GetAuthenticatedUser<AuthenticatedUser>,\n  // eslint-disable-next-line @typescript-eslint/max-params\n): ResourcesWebsocketServer => {\n  const wss = new WebSocketServer({ noServer: true });\n\n  wss.on(\n    'connection',\n    (ws: ExtendedWebSocket, authenticatedUser: AuthenticatedUser | null) => {\n      ws.isAlive = true;\n\n      const sendMessage = (\n        type: ToClientMessage[0],\n        id: ToClientMessage[1],\n        error: ToClientMessage[2],\n        result: ToClientMessage[3],\n        // eslint-disable-next-line @typescript-eslint/max-params\n      ): void => {\n        if (!id) throw new Error('Invalid id');\n        logger.debug('sendMessage', { type, id, error, result });\n        ws.send(encode([type, id, error, result]));\n      };\n\n      const createSafeError = (error: Error): AckError => {\n        if (error instanceof ResourcesServerError) {\n          return { code: error.code, message: error.message };\n        }\n\n        logger.error(error);\n\n        return {\n          code: 'INTERNAL_SERVER_ERROR',\n          message: 'Internal Server Error',\n        };\n      };\n\n      const sendAck = (\n        id: number,\n        error: Error | null,\n        result?: ExtendedJsonValue,\n      ): void => {\n        sendMessage('ack', id, error && createSafeError(error), result);\n      };\n\n      const sendSubscriptionMessage: SubscriptionCallback = (\n        subscriptionId: number,\n        error: Error | null,\n        result: ExtendedJsonValue,\n      ): void => {\n        sendMessage(\n          'subscription',\n          subscriptionId,\n          error && createSafeError(error),\n          result,\n        );\n      };\n\n      const { messageHandler, close } = createMessageHandler(\n        resourcesServerService,\n        authenticatedUser,\n        true,\n      );\n\n      const handleDecodedMessage = (\n        message: ToServerMessage,\n      ): Promise<void> => {\n        if (message.id == null) {\n          return messageHandler(message, sendSubscriptionMessage).then(\n            () => {},\n          );\n        } else {\n          return messageHandler(message, sendSubscriptionMessage)\n            .then((result) => {\n              sendAck(message.id, null, result as ExtendedJsonValue);\n            })\n            .catch((error) => {\n              sendAck(message.id, error as Error);\n            });\n        }\n      };\n\n      ws.on('pong', () => {\n        ws.isAlive = true;\n      });\n\n      ws.on('close', (code, data) => {\n        const reason = data.toString();\n        logger.debug('closed', { code, reason });\n        close();\n      });\n\n      ws.on('error', (error) => {\n        logger.error('ws error', { error });\n      });\n\n      ws.on('message', (data, isBinary): void => {\n        if (isBinary) return;\n\n        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n        const message = data.toString();\n\n        if (message === 'close') return;\n\n        if (typeof message !== 'string') {\n          logger.warn('got non string message');\n          return;\n        }\n\n        const decoded =\n          decode<\n            [\n              ToServerMessage['type'],\n              ToServerMessage['id'],\n              ToServerMessage['payload'],\n            ]\n          >(message);\n        try {\n          const [type, id, payload] = decoded;\n          logger.debug('received', { type, id, payload });\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handleDecodedMessage({ type, id, payload } as ToServerMessage);\n        } catch {\n          logger.notice('invalid message', { decoded });\n        }\n      });\n\n      ws.send('connection-ack');\n    },\n  );\n\n  // https://www.npmjs.com/package/ws#how-to-detect-and-close-broken-connections\n  const interval = setInterval(() => {\n    wss.clients.forEach((ws: WebSocket) => {\n      const extWs = ws as ExtendedWebSocket;\n\n      if (!extWs.isAlive) {\n        ws.terminate();\n        return;\n      }\n\n      extWs.isAlive = false;\n      ws.ping(null, undefined);\n    });\n  }, 60 * 1000);\n\n  const handleUpgrade = (\n    request: http.IncomingMessage,\n    socket: net.Socket,\n    upgradeHead: Buffer,\n  ): void => {\n    if (request.url !== path) return;\n\n    const authenticatedUserPromise: Promise<AuthenticatedUser | null> =\n      Promise.resolve(getAuthenticatedUser(request));\n    wss.handleUpgrade(request, socket, upgradeHead, (ws) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      authenticatedUserPromise\n        .catch((error) => {\n          logger.warn(\n            'getAuthenticatedUser threw an error, return null instead.',\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            { err: error },\n          );\n          return null;\n        })\n        .then((authenticatedUser) => {\n          wss.emit('connection', ws, authenticatedUser);\n        });\n    });\n  };\n\n  server.on('upgrade', handleUpgrade);\n\n  return {\n    wss,\n    close(): void {\n      wss.close();\n      for (const ws of wss.clients) {\n        ws.terminate();\n      }\n      server.removeListener('upgrade', handleUpgrade);\n      clearInterval(interval);\n    },\n  };\n};\n"],"names":["logger","Logger","createWsServer","server","path","resourcesServerService","getAuthenticatedUser","wss","WebSocketServer","noServer","on","ws","authenticatedUser","isAlive","sendMessage","type","id","error","result","Error","debug","send","encode","createSafeError","ResourcesServerError","code","message","sendAck","sendSubscriptionMessage","subscriptionId","messageHandler","close","createMessageHandler","handleDecodedMessage","then","catch","data","reason","toString","isBinary","warn","decoded","decode","payload","notice","interval","setInterval","clients","forEach","extWs","terminate","ping","undefined","handleUpgrade","request","socket","upgradeHead","url","authenticatedUserPromise","Promise","resolve","err","emit","removeListener","clearInterval"],"mappings":"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"}