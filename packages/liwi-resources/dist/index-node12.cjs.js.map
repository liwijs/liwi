{"version":3,"file":"index-node12.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import type { ExtendedJsonValue } from 'extended-json';\nimport type { Query, QueryParams } from 'liwi-store';\n\nexport type {\n  Query,\n  QuerySubscription,\n  QueryParams,\n  QueryResult,\n  QueryMeta,\n  SubscribeCallback,\n} from 'liwi-store';\n\nexport interface ResourceSubscribePayload<Options> {\n  resourceName: string;\n  type: string;\n  args: Options;\n}\n\nexport type ServiceQuery<Result, Params extends QueryParams<Params>> = (\n  params: Params,\n) => Query<Result, Params>;\n\nexport type ServiceOperation<\n  Result extends Promise<any>,\n  Params extends QueryParams<Params>\n> = (params: Params) => Result;\n\ntype InferQueryResult<T> = T extends Query<infer R, any> ? R : never;\n\ntype ServiceInterfaceQueries<\n  Queries extends Record<keyof Queries, ServiceQuery<any, any>>\n> = {\n  [key in keyof Queries]: (\n    params: QueryParams<Parameters<Queries[key]>[0]>,\n  ) => Query<\n    InferQueryResult<ReturnType<Queries[key]>>,\n    QueryParams<Parameters<Queries[key]>[0]>\n  >;\n};\n\ntype ServiceInterfaceOperations<\n  Operations extends Record<keyof Operations, ServiceOperation<any, any>>\n> = {\n  [key in keyof Operations]: (\n    params: QueryParams<Parameters<Operations[key]>[0]>,\n  ) => ReturnType<Operations[key]>;\n};\n\nexport interface ServiceInterface<\n  Queries extends ServiceInterfaceQueries<Queries>,\n  Operations extends ServiceInterfaceOperations<Operations>\n> {\n  queries: ServiceInterfaceQueries<Queries>;\n  operations: ServiceInterfaceOperations<Operations>;\n}\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type AckError = {\n  code: string;\n  message: string;\n};\n\nexport type ToClientMessage<T = ExtendedJsonValue> = [\n  'ack' | 'subscription', // type\n  number, // id\n  AckError | null, // error\n  T, // result\n];\n\nexport interface DoPayload {\n  resourceName: string;\n  operationKey: string;\n  params: Record<string, ExtendedJsonValue> | undefined;\n}\n\nexport interface ToServerQueryPayload {\n  resourceName: string;\n  key: string;\n  params: Record<string, ExtendedJsonValue> | undefined;\n}\n\nexport interface ToServerSubscribeQueryPayload extends ToServerQueryPayload {\n  subscriptionId: number;\n}\n\nexport interface ToServerSubscribeClose {\n  subscriptionId: number;\n}\n\n// export type ToServerSubscribeQueryChangePayload = ToServerQueryPayload;\n\ntype Message<RequestPayload, ResponsePayload> = [\n  RequestPayload,\n  ResponsePayload,\n];\n\ntype SubscribeMessage<\n  RequestPayload extends {\n    params: Record<string, ExtendedJsonValue> | undefined;\n  },\n  ResponsePayload,\n  SubscribeCallbackMessage\n> = [RequestPayload, ResponsePayload, SubscribeCallbackMessage];\n\nexport interface ToServerSimpleMessages {\n  do: Message<DoPayload, undefined>;\n  fetch: Message<ToServerQueryPayload, unknown>;\n  // 'subscribe:changePayload': Message<\n  //   ToServerSubscribeClose & Record<string, ExtendedJsonValue | undefined>,\n  //   undefined\n  // >;\n  'subscribe:close': Message<ToServerSubscribeClose, undefined>;\n}\n\nexport interface ToServerSubscribeMessages<\n  Params extends Record<keyof Params, ExtendedJsonValue> | undefined = never,\n  Result = unknown\n> {\n  subscribe: SubscribeMessage<ToServerSubscribeQueryPayload, undefined, Result>;\n  fetchAndSubscribe: SubscribeMessage<\n    ToServerSubscribeQueryPayload,\n    undefined,\n    Result\n  >;\n}\n\nexport type ToServerMessages = ToServerSimpleMessages &\n  ToServerSubscribeMessages<Record<string, ExtendedJsonValue> | undefined>;\n\nexport type ToServerMessage = (\n  | {\n      type: 'do';\n      payload: ToServerSimpleMessages['do'][0];\n    }\n  | {\n      type: 'fetch';\n      payload: ToServerSimpleMessages['fetch'][0];\n    }\n  // | {\n  //     type: 'subscribe:changePayload';\n  //     payload: ToServerSimpleMessages['subscribe:changePayload'][0];\n  //   }\n  | {\n      type: 'subscribe:close';\n      payload: ToServerSimpleMessages['subscribe:close'][0];\n    }\n  | {\n      type: 'subscribe';\n      payload: ToServerSubscribeMessages['subscribe'][0];\n    }\n  | {\n      type: 'fetchAndSubscribe';\n      payload: ToServerSubscribeMessages['fetchAndSubscribe'][0];\n    }\n) & { id: number };\n\nexport class ResourcesServerError extends Error {\n  code: string;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.name = 'ResourcesServerError';\n    this.code = code;\n  }\n}\n"],"names":["ResourcesServerError","Error","constructor","code","message","name"],"mappings":";;;;AAwDA;AAiCA;AAmEO,MAAMA,oBAAN,SAAmCC,KAAnC,CAAyC;AAG9CC,EAAAA,WAAW,CAACC,IAAD,EAAeC,OAAf,EAAgC;AACzC,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,sBAAZ;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACD;;AAP6C;;;;"}