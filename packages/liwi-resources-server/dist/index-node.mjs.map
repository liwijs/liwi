{"version":3,"file":"index-node.mjs","sources":["../src/ResourcesServerService.ts","../src/createMessageHandler.ts"],"sourcesContent":["import type { BaseModel, Criteria, Sort } from \"liwi-store\";\n// import ResourceServerCursor from './ResourceServerCursor';\nimport type { ServiceResource } from \"./ServiceResource\";\n\n// import { CursorResource } from './CursorResource';\n\nexport interface CreateCursorOptions<Model extends BaseModel> {\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n  limit?: number;\n}\n\nexport class ResourcesServerService {\n  readonly serviceResources: Map<string, ServiceResource<any, any>>;\n\n  // readonly cursorResources: Map<string, CursorResource<any, any, any>>;\n\n  constructor({\n    serviceResources = new Map(),\n  }: // cursorResources = new Map(),\n  {\n    serviceResources: Map<string, ServiceResource<any, any>>;\n    // cursorResources: Map<string, CursorResource<any, any, any>>;\n  }) {\n    this.serviceResources = serviceResources;\n    // this.cursorResources = cursorResources;\n  }\n\n  addResource(key: string, resource: ServiceResource<any, any>): void {\n    this.serviceResources.set(key, resource);\n  }\n\n  // addCursorResource(\n  //   key: string,\n  //   cursorResource: CursorResource<any, any, any>,\n  // ) {\n  //   this.cursorResources.set(key, cursorResource);\n  // }\n\n  getServiceResource(key: string): ServiceResource<any, any> {\n    const resource = this.serviceResources.get(key);\n    if (!resource) throw new Error(`Invalid service resource: \"${key}\"`);\n    return resource;\n  }\n\n  // getCursorResource(key: string) {\n  //   const resource = this.cursorResources.get(key);\n  //   if (!resource) throw new Error(`Invalid cursor resource: \"${key}\"`);\n  //   return resource;\n  // }\n\n  // async createCursor<Model extends BaseModel, Transformed, ConnectedUser>(\n  //   resource: CursorResource<Model, Transformed, ConnectedUser>,\n  //   connectedUser: ConnectedUser,\n  //   { criteria, sort, limit }: CreateCursorOptions<Model>,\n  // ): Promise<ResourceServerCursor<Model, any, Transformed, ConnectedUser>> {\n  //   // TODO: resource.query(connectedUser, criteria || {}, sort).cursor()\n  //   criteria = resource.criteria(connectedUser, criteria || {});\n  //   sort = resource.sort(connectedUser, sort);\n  //   const cursor = await resource.store.cursor(criteria, sort);\n  //   limit = resource.limit(limit);\n  //   if (limit) cursor.limit(limit);\n  //   return new ResourceServerCursor(resource, cursor, connectedUser);\n  // }\n}\n","import type {\n  Query,\n  QuerySubscription,\n  ToServerMessage,\n  ToServerQueryPayload,\n  ToServerSubscribeQueryPayload,\n} from \"liwi-resources\";\nimport { ResourcesServerError } from \"liwi-resources\";\nimport { Logger } from \"nightingale-logger\";\nimport type { ResourcesServerService } from \"./ResourcesServerService\";\nimport type { ServiceResource, SubscribeHook } from \"./ServiceResource\";\n\nconst logger = new Logger(\"liwi:resources-websocket-client\");\n\nexport type SubscriptionCallback = (\n  subscriptionId: number,\n  error: Error | null,\n  result: any,\n) => void;\n\nexport type MessageHandler = (\n  message: ToServerMessage,\n  subscriptionCallback: SubscriptionCallback,\n) => Promise<unknown>;\n\nexport interface SubscriptionAndSubscribeHook {\n  subscription: QuerySubscription;\n  subscribeHook?: SubscribeHook<any>;\n  params?: any;\n}\n\nconst logUnexpectedError = (\n  error: Error | unknown,\n  message: string,\n  payload: unknown,\n): void => {\n  if (!(error instanceof ResourcesServerError)) {\n    logger.error(message, {\n      error,\n      payload: process.env.NODE_ENV === \"production\" ? \"redacted\" : payload,\n    });\n  } else if (process.env.NODE_ENV !== \"production\") {\n    logger.info(`ResourcesServerError in ${message}`, {\n      code: error.code,\n      message: error.message,\n      payload,\n    });\n  }\n};\n\nexport const createMessageHandler = <AuthenticatedUser>(\n  resourcesServerService: ResourcesServerService,\n  authenticatedUser: AuthenticatedUser | null,\n  allowSubscriptions: boolean,\n): {\n  messageHandler: MessageHandler;\n  close: () => void;\n} => {\n  const openedSubscriptions = allowSubscriptions\n    ? new Map<number, SubscriptionAndSubscribeHook>()\n    : null;\n\n  const getResource = (payload: {\n    resourceName: string;\n  }): ServiceResource<any, any> => {\n    logger.debug(\"resource\", {\n      resourceName: payload.resourceName,\n    });\n    const resource = resourcesServerService.getServiceResource(\n      payload.resourceName,\n    );\n    return resource;\n  };\n\n  const createQuery = async <\n    Service extends ServiceResource<any, any>,\n    Key extends string & keyof Service[\"queries\"],\n  >(\n    payload: ToServerQueryPayload<Key>,\n    resource: Service,\n  ): Promise<Query<any, any>> => {\n    if (!payload.key.startsWith(\"query\")) {\n      throw new Error(\"Invalid query key\");\n    }\n\n    const result = await resource.queries[payload.key]!(\n      payload.params,\n      authenticatedUser,\n    );\n    return result;\n  };\n\n  const createSubscription = (\n    type: \"fetchAndSubscribe\" | \"subscribe\",\n    payload: ToServerSubscribeQueryPayload,\n    resource: ServiceResource<any, any>,\n    query: Query<any, any>,\n    sendSubscriptionMessage: SubscriptionCallback,\n    // eslint-disable-next-line @typescript-eslint/max-params\n  ): PromiseLike<null> => {\n    if (!openedSubscriptions) {\n      throw new Error(\"Subscriptions not allowed\");\n    }\n\n    const { subscriptionId } = payload;\n    if (openedSubscriptions.has(subscriptionId)) {\n      const error = \"Already have a watcher for this id. Cannot add a new one\";\n      logger.warn(error, { subscriptionId, key: payload.key });\n      throw new ResourcesServerError(\"ALREADY_HAVE_WATCHER\", error);\n    }\n\n    const subscription = query[type]((error: Error | null, result: any) => {\n      if (error) {\n        logUnexpectedError(error, type, payload);\n      }\n      sendSubscriptionMessage(subscriptionId, error, result);\n    });\n\n    const subscribeHook = resource.subscribeHooks?.[payload.key];\n    openedSubscriptions.set(subscriptionId, {\n      subscription,\n      subscribeHook,\n      params: subscribeHook ? payload.params : undefined,\n    });\n    if (subscribeHook) {\n      subscribeHook.subscribed(authenticatedUser, payload.params);\n    }\n\n    return subscription.then(() => null);\n  };\n\n  const unsubscribeSubscription = ({\n    subscription,\n    subscribeHook,\n    params,\n  }: SubscriptionAndSubscribeHook): void => {\n    subscription.stop();\n    if (subscribeHook) {\n      subscribeHook.unsubscribed(authenticatedUser, params);\n    }\n  };\n\n  return {\n    close: () => {\n      if (openedSubscriptions) {\n        openedSubscriptions.forEach(unsubscribeSubscription);\n      }\n    },\n    messageHandler: async (message, subscriptionCallback): Promise<unknown> => {\n      switch (message.type) {\n        case \"fetch\": {\n          try {\n            const resource = getResource(message.payload);\n            const query = await createQuery(message.payload, resource);\n            return await query.fetch((result) => result);\n          } catch (error) {\n            logUnexpectedError(error, message.type, message.payload);\n            throw error;\n          }\n        }\n        case \"fetchAndSubscribe\": {\n          try {\n            const resource = getResource(message.payload);\n            const query = await createQuery(message.payload, resource);\n\n            return await createSubscription(\n              \"fetchAndSubscribe\",\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (error) {\n            logUnexpectedError(error, message.type, message.payload);\n            throw error;\n          }\n        }\n        case \"subscribe\": {\n          try {\n            const resource = getResource(message.payload);\n            const query = await createQuery(message.payload, resource);\n            await createSubscription(\n              \"subscribe\",\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (error) {\n            logUnexpectedError(error, message.type, message.payload);\n            throw error;\n          }\n          return;\n        }\n        // case 'subscribe:changePayload': {\n        //   break;\n        // }\n        case \"subscribe:close\": {\n          if (!openedSubscriptions) {\n            throw new Error(\"Subscriptions not allowed\");\n          }\n          try {\n            const { subscriptionId } = message.payload;\n            const SubscriptionAndSubscribeHook =\n              openedSubscriptions.get(subscriptionId);\n            if (!SubscriptionAndSubscribeHook) {\n              logger.warn(\"tried to unsubscribe non existing watcher\", {\n                subscriptionId,\n              });\n            } else {\n              openedSubscriptions.delete(subscriptionId);\n              unsubscribeSubscription(SubscriptionAndSubscribeHook);\n            }\n          } catch (error) {\n            logUnexpectedError(error, message.type, message.payload);\n          }\n          return;\n        }\n        case \"do\": {\n          try {\n            const resource = getResource(message.payload);\n            const { operationKey, params } = message.payload;\n\n            const operation = resource.operations[operationKey];\n\n            if (!operation) {\n              throw new ResourcesServerError(\n                \"OPERATION_NOT_FOUND\",\n                `Operation not found: ${operationKey}`,\n              );\n            }\n\n            return operation(params, authenticatedUser);\n          } catch (error) {\n            logUnexpectedError(error, message.type, message.payload);\n            throw error;\n          }\n        }\n        default:\n          throw new ResourcesServerError(\n            \"INVALID_MESSAGE_TYPE\",\n            \"Invalid message type\",\n          );\n      }\n    },\n  };\n};\n"],"names":[],"mappings":";;;;AAYO,MAAM,sBAAA,CAAuB;AAAA;AAAA,EAKlC,WAAA,CAAY;AAAA,IACV,gBAAA,uBAAuB,GAAA;AAAI,GAC7B,EAIG;AACD,IAAA,IAAA,CAAK,gBAAA,GAAmB,gBAAA;AAAA;AAE1B,EAEA,WAAA,CAAY,KAAa,QAAA,EAA2C;AAClE,IAAA,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,GAAA,EAAK,QAAQ,CAAA;AAAA;AACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,GAAA,EAAwC;AACzD,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,gBAAA,CAAiB,GAAA,CAAI,GAAG,CAAA;AAC9C,IAAA,IAAI,CAAC,QAAA,EAAU,MAAM,IAAI,KAAA,CAAM,CAAA,2BAAA,EAA8B,GAAG,CAAA,CAAA,CAAG,CAAA;AACnE,IAAA,OAAO,QAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBF;;ACpDA,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO,iCAAiC,CAAA;AAmB3D,MAAM,kBAAA,GAAqB,CACzB,KAAA,EACA,OAAA,EACA,OAAA,KACS;AACT,EAAA,IAAI,EAAE,iBAAiB,oBAAA,CAAA,EAAuB;AAC5C,IAAA,MAAA,CAAO,MAAM,OAAA,EAAS;AAAA,MACpB,KAAA;AAAA,MACA,OAAA,EAAS,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,eAAe,UAAA,GAAa;AAAA,KAC/D,CAAA;AAAA,GACH,MAAA,IAAW,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,YAAA,EAAc;AAChD,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,wBAAA,EAA2B,OAAO,CAAA,CAAA,EAAI;AAAA,MAChD,MAAM,KAAA,CAAM,IAAA;AAAA,MACZ,SAAS,KAAA,CAAM,OAAA;AAAA,MACf;AAAA,KACD,CAAA;AAAA;AAEL,CAAA;AAEO,MAAM,oBAAA,GAAuB,CAClC,sBAAA,EACA,iBAAA,EACA,kBAAA,KAIG;AACH,EAAA,MAAM,mBAAA,GAAsB,kBAAA,mBACxB,IAAI,GAAA,EAA0C,GAC9C,IAAA;AAEJ,EAAA,MAAM,WAAA,GAAc,CAAC,OAAA,KAEY;AAC/B,IAAA,MAAA,CAAO,MAAM,UAAA,EAAY;AAAA,MACvB,cAAc,OAAA,CAAQ;AAAA,KACvB,CAAA;AACD,IAAA,MAAM,WAAW,sBAAA,CAAuB,kBAAA;AAAA,MACtC,OAAA,CAAQ;AAAA,KACV;AACA,IAAA,OAAO,QAAA;AAAA,GACT;AAEA,EAAA,MAAM,WAAA,GAAc,OAIlB,OAAA,EACA,QAAA,KAC6B;AAC7B,IAAA,IAAI,CAAC,OAAA,CAAQ,GAAA,CAAI,UAAA,CAAW,OAAO,CAAA,EAAG;AACpC,MAAA,MAAM,IAAI,MAAM,mBAAmB,CAAA;AAAA;AAGrC,IAAA,MAAM,MAAA,GAAS,MAAM,QAAA,CAAS,OAAA,CAAQ,QAAQ,GAAG,CAAA;AAAA,MAC/C,OAAA,CAAQ,MAAA;AAAA,MACR;AAAA,KACF;AACA,IAAA,OAAO,MAAA;AAAA,GACT;AAEA,EAAA,MAAM,qBAAqB,CACzB,IAAA,EACA,OAAA,EACA,QAAA,EACA,OACA,uBAAA,KAEsB;AACtB,IAAA,IAAI,CAAC,mBAAA,EAAqB;AACxB,MAAA,MAAM,IAAI,MAAM,2BAA2B,CAAA;AAAA;AAG7C,IAAA,MAAM,EAAE,gBAAe,GAAI,OAAA;AAC3B,IAAA,IAAI,mBAAA,CAAoB,GAAA,CAAI,cAAc,CAAA,EAAG;AAC3C,MAAA,MAAM,KAAA,GAAQ,0DAAA;AACd,MAAA,MAAA,CAAO,KAAK,KAAA,EAAO,EAAE,gBAAgB,GAAA,EAAK,OAAA,CAAQ,KAAK,CAAA;AACvD,MAAA,MAAM,IAAI,oBAAA,CAAqB,sBAAA,EAAwB,KAAK,CAAA;AAAA;AAG9D,IAAA,MAAM,eAAe,KAAA,CAAM,IAAI,CAAA,CAAE,CAAC,OAAqB,MAAA,KAAgB;AACrE,MAAA,IAAI,KAAA,EAAO;AACT,QAAA,kBAAA,CAAmB,KAAA,EAAO,MAAM,OAAO,CAAA;AAAA;AAEzC,MAAA,uBAAA,CAAwB,cAAA,EAAgB,OAAO,MAAM,CAAA;AAAA,KACtD,CAAA;AAED,IAAA,MAAM,aAAA,GAAgB,QAAA,CAAS,cAAA,GAAiB,OAAA,CAAQ,GAAG,CAAA;AAC3D,IAAA,mBAAA,CAAoB,IAAI,cAAA,EAAgB;AAAA,MACtC,YAAA;AAAA,MACA,aAAA;AAAA,MACA,MAAA,EAAQ,aAAA,GAAgB,OAAA,CAAQ,MAAA,GAAS;AAAA,KAC1C,CAAA;AACD,IAAA,IAAI,aAAA,EAAe;AACjB,MAAA,aAAA,CAAc,UAAA,CAAW,iBAAA,EAAmB,OAAA,CAAQ,MAAM,CAAA;AAAA;AAG5D,IAAA,OAAO,YAAA,CAAa,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,GACrC;AAEA,EAAA,MAAM,0BAA0B,CAAC;AAAA,IAC/B,YAAA;AAAA,IACA,aAAA;AAAA,IACA;AAAA,GACF,KAA0C;AACxC,IAAA,YAAA,CAAa,IAAA,EAAK;AAClB,IAAA,IAAI,aAAA,EAAe;AACjB,MAAA,aAAA,CAAc,YAAA,CAAa,mBAAmB,MAAM,CAAA;AAAA;AACtD,GACF;AAEA,EAAA,OAAO;AAAA,IACL,OAAO,MAAM;AACX,MAAA,IAAI,mBAAA,EAAqB;AACvB,QAAA,mBAAA,CAAoB,QAAQ,uBAAuB,CAAA;AAAA;AACrD,KACF;AAAA,IACA,cAAA,EAAgB,OAAO,OAAA,EAAS,oBAAA,KAA2C;AACzE,MAAA,QAAQ,QAAQ,IAAA;AAAM,QACpB,KAAK,OAAA,EAAS;AACZ,UAAA,IAAI;AACF,YAAA,MAAM,QAAA,GAAW,WAAA,CAAY,OAAA,CAAQ,OAAO,CAAA;AAC5C,YAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,CAAY,OAAA,CAAQ,SAAS,QAAQ,CAAA;AACzD,YAAA,OAAO,MAAM,KAAA,CAAM,KAAA,CAAM,CAAC,WAAW,MAAM,CAAA;AAAA,mBACpC,KAAA,EAAO;AACd,YAAA,kBAAA,CAAmB,KAAA,EAAO,OAAA,CAAQ,IAAA,EAAM,OAAA,CAAQ,OAAO,CAAA;AACvD,YAAA,MAAM,KAAA;AAAA;AACR;AACF,QACA,KAAK,mBAAA,EAAqB;AACxB,UAAA,IAAI;AACF,YAAA,MAAM,QAAA,GAAW,WAAA,CAAY,OAAA,CAAQ,OAAO,CAAA;AAC5C,YAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,CAAY,OAAA,CAAQ,SAAS,QAAQ,CAAA;AAEzD,YAAA,OAAO,MAAM,kBAAA;AAAA,cACX,mBAAA;AAAA,cACA,OAAA,CAAQ,OAAA;AAAA,cACR,QAAA;AAAA,cACA,KAAA;AAAA,cACA;AAAA,aACF;AAAA,mBACO,KAAA,EAAO;AACd,YAAA,kBAAA,CAAmB,KAAA,EAAO,OAAA,CAAQ,IAAA,EAAM,OAAA,CAAQ,OAAO,CAAA;AACvD,YAAA,MAAM,KAAA;AAAA;AACR;AACF,QACA,KAAK,WAAA,EAAa;AAChB,UAAA,IAAI;AACF,YAAA,MAAM,QAAA,GAAW,WAAA,CAAY,OAAA,CAAQ,OAAO,CAAA;AAC5C,YAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,CAAY,OAAA,CAAQ,SAAS,QAAQ,CAAA;AACzD,YAAA,MAAM,kBAAA;AAAA,cACJ,WAAA;AAAA,cACA,OAAA,CAAQ,OAAA;AAAA,cACR,QAAA;AAAA,cACA,KAAA;AAAA,cACA;AAAA,aACF;AAAA,mBACO,KAAA,EAAO;AACd,YAAA,kBAAA,CAAmB,KAAA,EAAO,OAAA,CAAQ,IAAA,EAAM,OAAA,CAAQ,OAAO,CAAA;AACvD,YAAA,MAAM,KAAA;AAAA;AAER,UAAA;AAAA;AACF;AAAA;AAAA;AAAA,QAIA,KAAK,iBAAA,EAAmB;AACtB,UAAA,IAAI,CAAC,mBAAA,EAAqB;AACxB,YAAA,MAAM,IAAI,MAAM,2BAA2B,CAAA;AAAA;AAE7C,UAAA,IAAI;AACF,YAAA,MAAM,EAAE,cAAA,EAAe,GAAI,OAAA,CAAQ,OAAA;AACnC,YAAA,MAAM,4BAAA,GACJ,mBAAA,CAAoB,GAAA,CAAI,cAAc,CAAA;AACxC,YAAA,IAAI,CAAC,4BAAA,EAA8B;AACjC,cAAA,MAAA,CAAO,KAAK,2CAAA,EAA6C;AAAA,gBACvD;AAAA,eACD,CAAA;AAAA,aACH,MAAO;AACL,cAAA,mBAAA,CAAoB,OAAO,cAAc,CAAA;AACzC,cAAA,uBAAA,CAAwB,4BAA4B,CAAA;AAAA;AACtD,mBACO,KAAA,EAAO;AACd,YAAA,kBAAA,CAAmB,KAAA,EAAO,OAAA,CAAQ,IAAA,EAAM,OAAA,CAAQ,OAAO,CAAA;AAAA;AAEzD,UAAA;AAAA;AACF,QACA,KAAK,IAAA,EAAM;AACT,UAAA,IAAI;AACF,YAAA,MAAM,QAAA,GAAW,WAAA,CAAY,OAAA,CAAQ,OAAO,CAAA;AAC5C,YAAA,MAAM,EAAE,YAAA,EAAc,MAAA,EAAO,GAAI,OAAA,CAAQ,OAAA;AAEzC,YAAA,MAAM,SAAA,GAAY,QAAA,CAAS,UAAA,CAAW,YAAY,CAAA;AAElD,YAAA,IAAI,CAAC,SAAA,EAAW;AACd,cAAA,MAAM,IAAI,oBAAA;AAAA,gBACR,qBAAA;AAAA,gBACA,wBAAwB,YAAY,CAAA;AAAA,eACtC;AAAA;AAGF,YAAA,OAAO,SAAA,CAAU,QAAQ,iBAAiB,CAAA;AAAA,mBACnC,KAAA,EAAO;AACd,YAAA,kBAAA,CAAmB,KAAA,EAAO,OAAA,CAAQ,IAAA,EAAM,OAAA,CAAQ,OAAO,CAAA;AACvD,YAAA,MAAM,KAAA;AAAA;AACR;AACF,QACA;AACE,UAAA,MAAM,IAAI,oBAAA;AAAA,YACR,sBAAA;AAAA,YACA;AAAA,WACF;AAAA;AACJ;AACF,GACF;AACF;;;;"}