{"version":3,"file":"index-browser-dev.cjs.js","sources":["../src/ResourcesServerService.ts","../src/createMessageHandler.ts"],"sourcesContent":["import type { BaseModel, Criteria, Sort } from 'liwi-types';\n// import ResourceServerCursor from './ResourceServerCursor';\nimport type { ServiceResource } from './ServiceResource';\n\n// import { CursorResource } from './CursorResource';\n\nexport interface CreateCursorOptions<Model extends BaseModel> {\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n  limit?: number;\n}\n\nexport class ResourcesServerService {\n  readonly serviceResources: Map<string, ServiceResource<any, any>>;\n\n  // readonly cursorResources: Map<string, CursorResource<any, any, any>>;\n\n  constructor({\n    serviceResources = new Map(),\n  }: // cursorResources = new Map(),\n  {\n    serviceResources: Map<string, ServiceResource<any, any>>;\n    // cursorResources: Map<string, CursorResource<any, any, any>>;\n  }) {\n    this.serviceResources = serviceResources;\n    // this.cursorResources = cursorResources;\n  }\n\n  addResource(key: string, resource: ServiceResource<any, any>): void {\n    this.serviceResources.set(key, resource);\n  }\n\n  // addCursorResource(\n  //   key: string,\n  //   cursorResource: CursorResource<any, any, any>,\n  // ) {\n  //   this.cursorResources.set(key, cursorResource);\n  // }\n\n  getServiceResource(key: string): ServiceResource<any, any> {\n    const resource = this.serviceResources.get(key);\n    if (!resource) throw new Error(`Invalid service resource: \"${key}\"`);\n    return resource;\n  }\n\n  // getCursorResource(key: string) {\n  //   const resource = this.cursorResources.get(key);\n  //   if (!resource) throw new Error(`Invalid cursor resource: \"${key}\"`);\n  //   return resource;\n  // }\n\n  // async createCursor<Model extends BaseModel, Transformed, ConnectedUser>(\n  //   resource: CursorResource<Model, Transformed, ConnectedUser>,\n  //   connectedUser: ConnectedUser,\n  //   { criteria, sort, limit }: CreateCursorOptions<Model>,\n  // ): Promise<ResourceServerCursor<Model, any, Transformed, ConnectedUser>> {\n  //   // TODO: resource.query(connectedUser, criteria || {}, sort).cursor()\n  //   criteria = resource.criteria(connectedUser, criteria || {});\n  //   sort = resource.sort(connectedUser, sort);\n  //   const cursor = await resource.store.cursor(criteria, sort);\n  //   limit = resource.limit(limit);\n  //   if (limit) cursor.limit(limit);\n  //   return new ResourceServerCursor(resource, cursor, connectedUser);\n  // }\n}\n","/* eslint-disable complexity, max-lines */\nimport { PRODUCTION } from 'pob-babel';\nimport type {\n  Query,\n  QuerySubscription,\n  ToServerMessage,\n  ToServerSubscribeQueryPayload,\n  ToServerQueryPayload,\n} from 'liwi-resources';\nimport { ResourcesServerError } from 'liwi-resources';\nimport Logger from 'nightingale-logger';\nimport type { ResourcesServerService } from './ResourcesServerService';\nimport type { ServiceResource, SubscribeHook } from './ServiceResource';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\nexport type SubscriptionCallback = (\n  subscriptionId: number,\n  error: null | Error,\n  result: any,\n) => void;\n\nexport type MessageHandler = (\n  message: ToServerMessage,\n  subscriptionCallback: SubscriptionCallback,\n) => Promise<unknown>;\n\nexport interface SubscriptionAndSubscribeHook {\n  subscription: QuerySubscription;\n  subscribeHook?: SubscribeHook<any>;\n  params?: any;\n}\n\nconst logUnexpectedError = (\n  error: Error,\n  message: string,\n  payload: any,\n): void => {\n  if (!PRODUCTION || !(error instanceof ResourcesServerError)) {\n    logger.error(message, {\n      error,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      payload: PRODUCTION ? 'redacted' : payload,\n    });\n  }\n};\n\nexport const createMessageHandler = <AuthenticatedUser>(\n  resourcesServerService: ResourcesServerService,\n  authenticatedUser: AuthenticatedUser | null,\n  allowSubscriptions: boolean,\n): {\n  messageHandler: MessageHandler;\n  close: () => void;\n} => {\n  const openedSubscriptions = allowSubscriptions\n    ? new Map<number, SubscriptionAndSubscribeHook>()\n    : null;\n\n  const getResource = (payload: {\n    resourceName: string;\n  }): ServiceResource<any, any> => {\n    logger.debug('resource', {\n      resourceName: payload.resourceName,\n    });\n    const resource = resourcesServerService.getServiceResource(\n      payload.resourceName,\n    );\n    return resource;\n  };\n\n  const createQuery = (\n    payload: ToServerQueryPayload,\n    resource: ServiceResource<any, any>,\n  ): Query<any, any> => {\n    if (!payload.key.startsWith('query')) {\n      throw new Error('Invalid query key');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return resource.queries[payload.key](payload.params, authenticatedUser);\n  };\n\n  const createSubscription = (\n    type: 'fetchAndSubscribe' | 'subscribe',\n    payload: ToServerSubscribeQueryPayload,\n    resource: ServiceResource<any, any>,\n    query: Query<any, any>,\n    sendSubscriptionMessage: SubscriptionCallback,\n  ): PromiseLike<null> => {\n    if (!openedSubscriptions) {\n      throw new Error('Subscriptions not allowed');\n    }\n\n    const { subscriptionId } = payload;\n    if (openedSubscriptions.has(subscriptionId)) {\n      const error = 'Already have a watcher for this id. Cannot add a new one';\n      logger.warn(error, { subscriptionId, key: payload.key });\n      throw new ResourcesServerError('ALREADY_HAVE_WATCHER', error);\n    }\n\n    const subscription = query[type]((error: Error | null, result: any) => {\n      if (error) {\n        logUnexpectedError(error, type, payload);\n      }\n      sendSubscriptionMessage(subscriptionId, error, result);\n    });\n\n    const subscribeHook = resource.subscribeHooks?.[payload.key];\n    openedSubscriptions.set(subscriptionId, {\n      subscription,\n      subscribeHook,\n      params: subscribeHook ? payload.params : undefined,\n    });\n    if (subscribeHook) {\n      subscribeHook.subscribed(authenticatedUser, payload.params);\n    }\n\n    return subscription.then(() => null);\n  };\n\n  const unsubscribeSubscription = ({\n    subscription,\n    subscribeHook,\n    params,\n  }: SubscriptionAndSubscribeHook): void => {\n    subscription.stop();\n    if (subscribeHook) {\n      subscribeHook.unsubscribed(authenticatedUser, params);\n    }\n  };\n\n  return {\n    close: () => {\n      if (openedSubscriptions) {\n        openedSubscriptions.forEach(unsubscribeSubscription);\n      }\n    },\n    messageHandler: async (message, subscriptionCallback): Promise<unknown> => {\n      switch (message.type) {\n        case 'fetch': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n            return await query.fetch((result) => result);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        case 'fetchAndSubscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n\n            return await createSubscription(\n              'fetchAndSubscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        case 'subscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n            await createSubscription(\n              'subscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        // case 'subscribe:changePayload': {\n        //   break;\n        // }\n        case 'subscribe:close': {\n          if (!openedSubscriptions) {\n            throw new Error('Subscriptions not allowed');\n          }\n          try {\n            const { subscriptionId } = message.payload;\n            const SubscriptionAndSubscribeHook = openedSubscriptions.get(\n              subscriptionId,\n            );\n            if (!SubscriptionAndSubscribeHook) {\n              logger.warn('tried to unsubscribe non existing watcher', {\n                subscriptionId,\n              });\n            } else {\n              openedSubscriptions.delete(subscriptionId);\n              unsubscribeSubscription(SubscriptionAndSubscribeHook);\n            }\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n          }\n          return;\n        }\n        case 'do': {\n          try {\n            const resource = getResource(message.payload);\n            const { operationKey, params } = message.payload;\n\n            const operation = resource.operations[operationKey];\n\n            if (!operation) {\n              throw new ResourcesServerError(\n                'OPERATION_NOT_FOUND',\n                `Operation not found: ${operationKey}`,\n              );\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return await operation(params, authenticatedUser);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n        }\n      }\n    },\n  };\n};\n"],"names":["ResourcesServerService","constructor","serviceResources","Map","addResource","key","resource","set","getServiceResource","get","Error","logger","Logger","logUnexpectedError","error","message","payload","createMessageHandler","resourcesServerService","authenticatedUser","allowSubscriptions","openedSubscriptions","getResource","debug","resourceName","createQuery","startsWith","queries","params","createSubscription","type","query","sendSubscriptionMessage","subscriptionId","has","warn","ResourcesServerError","subscription","result","subscribeHook","subscribeHooks","undefined","subscribed","then","unsubscribeSubscription","stop","unsubscribed","close","forEach","messageHandler","subscriptionCallback","fetch","err","SubscriptionAndSubscribeHook","delete","operationKey","operation","operations"],"mappings":"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"}