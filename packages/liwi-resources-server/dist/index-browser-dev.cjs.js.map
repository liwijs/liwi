{"version":3,"file":"index-browser-dev.cjs.js","sources":["../src/ResourcesServerService.ts","../src/createMessageHandler.ts"],"sourcesContent":["import { BaseModel, Criteria, Sort } from 'liwi-types';\n// import ResourceServerCursor from './ResourceServerCursor';\nimport { ServiceResource } from './ServiceResource';\n\n// import { CursorResource } from './CursorResource';\n\nexport interface CreateCursorOptions<Model extends BaseModel> {\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n  limit?: number;\n}\n\nexport class ResourcesServerService {\n  readonly serviceResources: Map<string, ServiceResource<any, any>>;\n\n  // readonly cursorResources: Map<string, CursorResource<any, any, any>>;\n\n  constructor({\n    serviceResources = new Map(),\n  }: // cursorResources = new Map(),\n  {\n    serviceResources: Map<string, ServiceResource<any, any>>;\n    // cursorResources: Map<string, CursorResource<any, any, any>>;\n  }) {\n    this.serviceResources = serviceResources;\n    // this.cursorResources = cursorResources;\n  }\n\n  addResource(key: string, resource: ServiceResource<any, any>): void {\n    this.serviceResources.set(key, resource);\n  }\n\n  // addCursorResource(\n  //   key: string,\n  //   cursorResource: CursorResource<any, any, any>,\n  // ) {\n  //   this.cursorResources.set(key, cursorResource);\n  // }\n\n  getServiceResource(key: string): ServiceResource<any, any> {\n    const resource = this.serviceResources.get(key);\n    if (!resource) throw new Error(`Invalid service resource: \"${key}\"`);\n    return resource;\n  }\n\n  // getCursorResource(key: string) {\n  //   const resource = this.cursorResources.get(key);\n  //   if (!resource) throw new Error(`Invalid cursor resource: \"${key}\"`);\n  //   return resource;\n  // }\n\n  // async createCursor<Model extends BaseModel, Transformed, ConnectedUser>(\n  //   resource: CursorResource<Model, Transformed, ConnectedUser>,\n  //   connectedUser: ConnectedUser,\n  //   { criteria, sort, limit }: CreateCursorOptions<Model>,\n  // ): Promise<ResourceServerCursor<Model, any, Transformed, ConnectedUser>> {\n  //   // TODO: resource.query(connectedUser, criteria || {}, sort).cursor()\n  //   criteria = resource.criteria(connectedUser, criteria || {});\n  //   sort = resource.sort(connectedUser, sort);\n  //   const cursor = await resource.store.cursor(criteria, sort);\n  //   limit = resource.limit(limit);\n  //   if (limit) cursor.limit(limit);\n  //   return new ResourceServerCursor(resource, cursor, connectedUser);\n  // }\n}\n","/* eslint-disable complexity, max-lines */\nimport { PRODUCTION } from 'pob-babel';\nimport {\n  Query,\n  QuerySubscription,\n  ToServerMessage,\n  ToServerSubscribeQueryPayload,\n  ResourcesServerError,\n  ToServerQueryPayload,\n} from 'liwi-resources';\nimport Logger from 'nightingale-logger';\nimport { ResourcesServerService } from './ResourcesServerService';\nimport { ServiceResource, SubscribeHook } from './ServiceResource';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\nexport type SubscriptionCallback = (\n  subscriptionId: number,\n  error: null | Error,\n  result: any,\n) => void;\n\nexport type MessageHandler = (\n  message: ToServerMessage,\n  subscriptionCallback: SubscriptionCallback,\n) => Promise<unknown>;\n\nexport interface SubscriptionAndSubscribeHook {\n  subscription: QuerySubscription;\n  subscribeHook?: SubscribeHook<any>;\n  params?: any;\n}\n\nconst logUnexpectedError = (\n  error: Error,\n  message: string,\n  payload: any,\n): void => {\n  if (!PRODUCTION || !(error instanceof ResourcesServerError)) {\n    logger.error(message, {\n      error,\n      payload: PRODUCTION ? 'redacted' : payload,\n    });\n  }\n};\n\nexport const createMessageHandler = <AuthenticatedUser>(\n  resourcesServerService: ResourcesServerService,\n  authenticatedUser: AuthenticatedUser | null,\n  allowSubscriptions: boolean,\n): {\n  messageHandler: MessageHandler;\n  close: () => void;\n} => {\n  const openSubscriptions = allowSubscriptions\n    ? new Map<number, SubscriptionAndSubscribeHook>()\n    : null;\n\n  const getResource = (payload: {\n    resourceName: string;\n  }): ServiceResource<any, any> => {\n    logger.debug('resource', {\n      resourceName: payload.resourceName,\n    });\n    const resource = resourcesServerService.getServiceResource(\n      payload.resourceName,\n    );\n    return resource;\n  };\n\n  const createQuery = (\n    payload: ToServerQueryPayload,\n    resource: ServiceResource<any, any>,\n  ): Query<any, any> => {\n    if (!payload.key.startsWith('query')) {\n      throw new Error('Invalid query key');\n    }\n\n    return resource.queries[payload.key](payload.params, authenticatedUser);\n  };\n\n  const createSubscription = (\n    type: 'fetchAndSubscribe' | 'subscribe',\n    payload: ToServerSubscribeQueryPayload,\n    resource: ServiceResource<any, any>,\n    query: Query<any, any>,\n    sendSubscriptionMessage: SubscriptionCallback,\n  ): PromiseLike<null> => {\n    if (!openSubscriptions) {\n      throw new Error('Subscriptions not allowed');\n    }\n\n    const { subscriptionId } = payload;\n    if (openSubscriptions.has(subscriptionId)) {\n      const error = 'Already have a watcher for this id. Cannot add a new one';\n      logger.warn(error, { subscriptionId, key: payload.key });\n      throw new ResourcesServerError('ALREADY_HAVE_WATCHER', error);\n    }\n\n    const subscription = query[type]((error: Error | null, result: any) => {\n      if (error) {\n        logUnexpectedError(error, type, payload);\n      }\n      sendSubscriptionMessage(subscriptionId, error, result);\n    });\n\n    const subscribeHook =\n      resource.subscribeHooks && resource.subscribeHooks[payload.key];\n    openSubscriptions.set(subscriptionId, {\n      subscription,\n      subscribeHook,\n      params: subscribeHook ? payload.params : undefined,\n    });\n    if (subscribeHook) {\n      subscribeHook.subscribed(authenticatedUser, payload.params);\n    }\n\n    return subscription.then(() => null);\n  };\n\n  const unsubscribeSubscription = ({\n    subscription,\n    subscribeHook,\n    params,\n  }: SubscriptionAndSubscribeHook): void => {\n    subscription.stop();\n    if (subscribeHook) {\n      subscribeHook.unsubscribed(authenticatedUser, params);\n    }\n  };\n\n  return {\n    close: () => {\n      if (openSubscriptions) {\n        openSubscriptions.forEach(unsubscribeSubscription);\n      }\n    },\n    messageHandler: async (message, subscriptionCallback): Promise<void> => {\n      switch (message.type) {\n        case 'fetch': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n            await query.fetch((result: any) => result);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          break;\n        }\n        case 'fetchAndSubscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n\n            if (!openSubscriptions) {\n              await query.fetch((result: any) => result);\n            } else {\n              await createSubscription(\n                'fetchAndSubscribe',\n                message.payload,\n                resource,\n                query,\n                subscriptionCallback,\n              );\n            }\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          break;\n        }\n        case 'subscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n            await createSubscription(\n              'subscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          break;\n        }\n        // case 'subscribe:changePayload': {\n        //   break;\n        // }\n        case 'subscribe:close': {\n          if (!openSubscriptions) {\n            throw new Error('Subscriptions not allowed');\n          }\n          try {\n            const { subscriptionId } = message.payload;\n            const SubscriptionAndSubscribeHook = openSubscriptions.get(\n              subscriptionId,\n            );\n            if (!SubscriptionAndSubscribeHook) {\n              logger.warn('tried to unsubscribe non existing watcher', {\n                subscriptionId,\n              });\n            } else {\n              openSubscriptions.delete(subscriptionId);\n              unsubscribeSubscription(SubscriptionAndSubscribeHook);\n            }\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n          }\n          break;\n        }\n        case 'do': {\n          try {\n            const resource = getResource(message.payload);\n            const { operationKey, params } = message.payload;\n\n            const operation = resource.operations[operationKey];\n\n            if (!operation) {\n              throw new ResourcesServerError(\n                'OPERATION_NOT_FOUND',\n                `Operation not found: ${operationKey}`,\n              );\n            }\n\n            return await operation(params, authenticatedUser);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n        }\n      }\n    },\n  };\n};\n"],"names":["ResourcesServerService","serviceResources","Map","addResource","key","resource","set","getServiceResource","get","Error","logger","Logger","logUnexpectedError","error","message","payload","createMessageHandler","resourcesServerService","authenticatedUser","allowSubscriptions","openSubscriptions","getResource","debug","resourceName","createQuery","startsWith","queries","params","createSubscription","type","query","sendSubscriptionMessage","subscriptionId","has","warn","ResourcesServerError","subscription","result","subscribeHook","subscribeHooks","undefined","subscribed","then","unsubscribeSubscription","stop","unsubscribed","close","forEach","messageHandler","subscriptionCallback","fetch","SubscriptionAndSubscribeHook","delete","err","operationKey","operation","operations"],"mappings":"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"}