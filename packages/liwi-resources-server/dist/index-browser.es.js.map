{"version":3,"file":"index-browser.es.js","sources":["../src/ResourcesServerService.ts","../src/createMessageHandler.ts"],"sourcesContent":["import type { BaseModel, Criteria, Sort } from 'liwi-store';\n// import ResourceServerCursor from './ResourceServerCursor';\nimport type { ServiceResource } from './ServiceResource';\n\n// import { CursorResource } from './CursorResource';\n\nexport interface CreateCursorOptions<Model extends BaseModel> {\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n  limit?: number;\n}\n\nexport class ResourcesServerService {\n  readonly serviceResources: Map<string, ServiceResource<any, any>>;\n\n  // readonly cursorResources: Map<string, CursorResource<any, any, any>>;\n\n  constructor({\n    serviceResources = new Map(),\n  }: // cursorResources = new Map(),\n  {\n    serviceResources: Map<string, ServiceResource<any, any>>;\n    // cursorResources: Map<string, CursorResource<any, any, any>>;\n  }) {\n    this.serviceResources = serviceResources;\n    // this.cursorResources = cursorResources;\n  }\n\n  addResource(key: string, resource: ServiceResource<any, any>): void {\n    this.serviceResources.set(key, resource);\n  }\n\n  // addCursorResource(\n  //   key: string,\n  //   cursorResource: CursorResource<any, any, any>,\n  // ) {\n  //   this.cursorResources.set(key, cursorResource);\n  // }\n\n  getServiceResource(key: string): ServiceResource<any, any> {\n    const resource = this.serviceResources.get(key);\n    if (!resource) throw new Error(`Invalid service resource: \"${key}\"`);\n    return resource;\n  }\n\n  // getCursorResource(key: string) {\n  //   const resource = this.cursorResources.get(key);\n  //   if (!resource) throw new Error(`Invalid cursor resource: \"${key}\"`);\n  //   return resource;\n  // }\n\n  // async createCursor<Model extends BaseModel, Transformed, ConnectedUser>(\n  //   resource: CursorResource<Model, Transformed, ConnectedUser>,\n  //   connectedUser: ConnectedUser,\n  //   { criteria, sort, limit }: CreateCursorOptions<Model>,\n  // ): Promise<ResourceServerCursor<Model, any, Transformed, ConnectedUser>> {\n  //   // TODO: resource.query(connectedUser, criteria || {}, sort).cursor()\n  //   criteria = resource.criteria(connectedUser, criteria || {});\n  //   sort = resource.sort(connectedUser, sort);\n  //   const cursor = await resource.store.cursor(criteria, sort);\n  //   limit = resource.limit(limit);\n  //   if (limit) cursor.limit(limit);\n  //   return new ResourceServerCursor(resource, cursor, connectedUser);\n  // }\n}\n","/* eslint-disable complexity, max-lines */\nimport 'pob-babel';\nimport type {\n  Query,\n  QuerySubscription,\n  ToServerMessage,\n  ToServerSubscribeQueryPayload,\n  ToServerQueryPayload,\n} from 'liwi-resources';\nimport { ResourcesServerError } from 'liwi-resources';\nimport { Logger } from 'nightingale-logger';\nimport type { ResourcesServerService } from './ResourcesServerService';\nimport type { ServiceResource, SubscribeHook } from './ServiceResource';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\nexport type SubscriptionCallback = (\n  subscriptionId: number,\n  error: Error | null,\n  result: any,\n) => void;\n\nexport type MessageHandler = (\n  message: ToServerMessage,\n  subscriptionCallback: SubscriptionCallback,\n) => Promise<unknown>;\n\nexport interface SubscriptionAndSubscribeHook {\n  subscription: QuerySubscription;\n  subscribeHook?: SubscribeHook<any>;\n  params?: any;\n}\n\nconst logUnexpectedError = (\n  error: Error | unknown,\n  message: string,\n  payload: unknown,\n): void => {\n  if (!(error instanceof ResourcesServerError)) {\n    logger.error(message, {\n      error,\n      payload: !__DEV__ ? 'redacted' : payload,\n    });\n  } else if (__DEV__) {\n    logger.info(`ResourcesServerError in ${message}`, {\n      code: error.code,\n      message: error.message,\n      payload,\n    });\n  }\n};\n\nexport const createMessageHandler = <AuthenticatedUser>(\n  resourcesServerService: ResourcesServerService,\n  authenticatedUser: AuthenticatedUser | null,\n  allowSubscriptions: boolean,\n): {\n  messageHandler: MessageHandler;\n  close: () => void;\n} => {\n  const openedSubscriptions = allowSubscriptions\n    ? new Map<number, SubscriptionAndSubscribeHook>()\n    : null;\n\n  const getResource = (payload: {\n    resourceName: string;\n  }): ServiceResource<any, any> => {\n    logger.debug('resource', {\n      resourceName: payload.resourceName,\n    });\n    const resource = resourcesServerService.getServiceResource(\n      payload.resourceName,\n    );\n    return resource;\n  };\n\n  const createQuery = async <\n    Service extends ServiceResource<any, any>,\n    Key extends string & keyof Service['queries'],\n  >(\n    payload: ToServerQueryPayload<Key>,\n    resource: Service,\n  ): Promise<Query<any, any>> => {\n    if (!payload.key.startsWith('query')) {\n      throw new Error('Invalid query key');\n    }\n\n    return resource.queries[payload.key](payload.params, authenticatedUser);\n  };\n\n  const createSubscription = (\n    type: 'fetchAndSubscribe' | 'subscribe',\n    payload: ToServerSubscribeQueryPayload,\n    resource: ServiceResource<any, any>,\n    query: Query<any, any>,\n    sendSubscriptionMessage: SubscriptionCallback,\n  ): PromiseLike<null> => {\n    if (!openedSubscriptions) {\n      throw new Error('Subscriptions not allowed');\n    }\n\n    const { subscriptionId } = payload;\n    if (openedSubscriptions.has(subscriptionId)) {\n      const error = 'Already have a watcher for this id. Cannot add a new one';\n      logger.warn(error, { subscriptionId, key: payload.key });\n      throw new ResourcesServerError('ALREADY_HAVE_WATCHER', error);\n    }\n\n    const subscription = query[type]((error: Error | null, result: any) => {\n      if (error) {\n        logUnexpectedError(error, type, payload);\n      }\n      sendSubscriptionMessage(subscriptionId, error, result);\n    });\n\n    const subscribeHook = resource.subscribeHooks?.[payload.key];\n    openedSubscriptions.set(subscriptionId, {\n      subscription,\n      subscribeHook,\n      params: subscribeHook ? payload.params : undefined,\n    });\n    if (subscribeHook) {\n      subscribeHook.subscribed(authenticatedUser, payload.params);\n    }\n\n    return subscription.then(() => null);\n  };\n\n  const unsubscribeSubscription = ({\n    subscription,\n    subscribeHook,\n    params,\n  }: SubscriptionAndSubscribeHook): void => {\n    subscription.stop();\n    if (subscribeHook) {\n      subscribeHook.unsubscribed(authenticatedUser, params);\n    }\n  };\n\n  return {\n    close: () => {\n      if (openedSubscriptions) {\n        openedSubscriptions.forEach(unsubscribeSubscription);\n      }\n    },\n    messageHandler: async (message, subscriptionCallback): Promise<unknown> => {\n      switch (message.type) {\n        case 'fetch': {\n          try {\n            const resource = getResource(message.payload);\n            const query = await createQuery(message.payload, resource);\n            return await query.fetch((result) => result);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        case 'fetchAndSubscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = await createQuery(message.payload, resource);\n\n            return await createSubscription(\n              'fetchAndSubscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        case 'subscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = await createQuery(message.payload, resource);\n            await createSubscription(\n              'subscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        // case 'subscribe:changePayload': {\n        //   break;\n        // }\n        case 'subscribe:close': {\n          if (!openedSubscriptions) {\n            throw new Error('Subscriptions not allowed');\n          }\n          try {\n            const { subscriptionId } = message.payload;\n            const SubscriptionAndSubscribeHook =\n              openedSubscriptions.get(subscriptionId);\n            if (!SubscriptionAndSubscribeHook) {\n              logger.warn('tried to unsubscribe non existing watcher', {\n                subscriptionId,\n              });\n            } else {\n              openedSubscriptions.delete(subscriptionId);\n              unsubscribeSubscription(SubscriptionAndSubscribeHook);\n            }\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n          }\n          return;\n        }\n        case 'do': {\n          try {\n            const resource = getResource(message.payload);\n            const { operationKey, params } = message.payload;\n\n            const operation = resource.operations[operationKey];\n\n            if (!operation) {\n              throw new ResourcesServerError(\n                'OPERATION_NOT_FOUND',\n                `Operation not found: ${operationKey}`,\n              );\n            }\n\n            return operation(params, authenticatedUser);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n        }\n      }\n    },\n  };\n};\n"],"names":["ResourcesServerService","_ref","_ref$serviceResources","serviceResources","Map","_proto","prototype","addResource","key","resource","set","getServiceResource","get","Error","logger","Logger","logUnexpectedError","error","message","payload","ResourcesServerError","process","env","NODE_ENV","info","code","createMessageHandler","resourcesServerService","authenticatedUser","allowSubscriptions","openedSubscriptions","getResource","debug","resourceName","createQuery","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","startsWith","abrupt","queries","params","stop","apply","arguments","createSubscription","type","query","sendSubscriptionMessage","_resource$subscribeHo","subscriptionId","has","warn","subscription","result","subscribeHook","subscribeHooks","undefined","subscribed","then","unsubscribeSubscription","_ref2","unsubscribed","close","forEach","messageHandler","_messageHandler","_callee2","subscriptionCallback","_resource","_query","_resource2","_query2","_subscriptionId","_SubscriptionAndSubscribeHook","_resource3","_message$payload","operationKey","operation","_callee2$","_context2","t0","sent","fetch","t1","t2","t3","SubscriptionAndSubscribeHook","delete","err","operations","t4"],"mappings":"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"}