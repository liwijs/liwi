{"version":3,"file":"index-browser.es.js","sources":["../src/ResourcesServerService.ts","../src/createMessageHandler.ts"],"sourcesContent":["import type { BaseModel, Criteria, Sort } from 'liwi-types';\n// import ResourceServerCursor from './ResourceServerCursor';\nimport type { ServiceResource } from './ServiceResource';\n\n// import { CursorResource } from './CursorResource';\n\nexport interface CreateCursorOptions<Model extends BaseModel> {\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n  limit?: number;\n}\n\nexport class ResourcesServerService {\n  readonly serviceResources: Map<string, ServiceResource<any, any>>;\n\n  // readonly cursorResources: Map<string, CursorResource<any, any, any>>;\n\n  constructor({\n    serviceResources = new Map(),\n  }: // cursorResources = new Map(),\n  {\n    serviceResources: Map<string, ServiceResource<any, any>>;\n    // cursorResources: Map<string, CursorResource<any, any, any>>;\n  }) {\n    this.serviceResources = serviceResources;\n    // this.cursorResources = cursorResources;\n  }\n\n  addResource(key: string, resource: ServiceResource<any, any>): void {\n    this.serviceResources.set(key, resource);\n  }\n\n  // addCursorResource(\n  //   key: string,\n  //   cursorResource: CursorResource<any, any, any>,\n  // ) {\n  //   this.cursorResources.set(key, cursorResource);\n  // }\n\n  getServiceResource(key: string): ServiceResource<any, any> {\n    const resource = this.serviceResources.get(key);\n    if (!resource) throw new Error(`Invalid service resource: \"${key}\"`);\n    return resource;\n  }\n\n  // getCursorResource(key: string) {\n  //   const resource = this.cursorResources.get(key);\n  //   if (!resource) throw new Error(`Invalid cursor resource: \"${key}\"`);\n  //   return resource;\n  // }\n\n  // async createCursor<Model extends BaseModel, Transformed, ConnectedUser>(\n  //   resource: CursorResource<Model, Transformed, ConnectedUser>,\n  //   connectedUser: ConnectedUser,\n  //   { criteria, sort, limit }: CreateCursorOptions<Model>,\n  // ): Promise<ResourceServerCursor<Model, any, Transformed, ConnectedUser>> {\n  //   // TODO: resource.query(connectedUser, criteria || {}, sort).cursor()\n  //   criteria = resource.criteria(connectedUser, criteria || {});\n  //   sort = resource.sort(connectedUser, sort);\n  //   const cursor = await resource.store.cursor(criteria, sort);\n  //   limit = resource.limit(limit);\n  //   if (limit) cursor.limit(limit);\n  //   return new ResourceServerCursor(resource, cursor, connectedUser);\n  // }\n}\n","/* eslint-disable complexity, max-lines */\nimport 'pob-babel';\nimport type {\n  Query,\n  QuerySubscription,\n  ToServerMessage,\n  ToServerSubscribeQueryPayload,\n  ToServerQueryPayload,\n} from 'liwi-resources';\nimport { ResourcesServerError } from 'liwi-resources';\nimport { Logger } from 'nightingale-logger';\nimport type { ResourcesServerService } from './ResourcesServerService';\nimport type { ServiceResource, SubscribeHook } from './ServiceResource';\n\nconst logger = new Logger('liwi:resources-websocket-client');\n\nexport type SubscriptionCallback = (\n  subscriptionId: number,\n  error: null | Error,\n  result: any,\n) => void;\n\nexport type MessageHandler = (\n  message: ToServerMessage,\n  subscriptionCallback: SubscriptionCallback,\n) => Promise<unknown>;\n\nexport interface SubscriptionAndSubscribeHook {\n  subscription: QuerySubscription;\n  subscribeHook?: SubscribeHook<any>;\n  params?: any;\n}\n\nconst logUnexpectedError = (\n  error: Error | unknown,\n  message: string,\n  payload: unknown,\n): void => {\n  if (__DEV__ || !(error instanceof ResourcesServerError)) {\n    logger.error(message, {\n      error,\n      payload: !__DEV__ ? 'redacted' : payload,\n    });\n  }\n};\n\nexport const createMessageHandler = <AuthenticatedUser>(\n  resourcesServerService: ResourcesServerService,\n  authenticatedUser: AuthenticatedUser | null,\n  allowSubscriptions: boolean,\n): {\n  messageHandler: MessageHandler;\n  close: () => void;\n} => {\n  const openedSubscriptions = allowSubscriptions\n    ? new Map<number, SubscriptionAndSubscribeHook>()\n    : null;\n\n  const getResource = (payload: {\n    resourceName: string;\n  }): ServiceResource<any, any> => {\n    logger.debug('resource', {\n      resourceName: payload.resourceName,\n    });\n    const resource = resourcesServerService.getServiceResource(\n      payload.resourceName,\n    );\n    return resource;\n  };\n\n  const createQuery = <\n    Service extends ServiceResource<any, any>,\n    Key extends keyof Service['queries'] & string,\n  >(\n    payload: ToServerQueryPayload<Key>,\n    resource: Service,\n  ): Query<any, any> => {\n    if (!payload.key.startsWith('query')) {\n      throw new Error('Invalid query key');\n    }\n\n    return resource.queries[payload.key](payload.params, authenticatedUser);\n  };\n\n  const createSubscription = (\n    type: 'fetchAndSubscribe' | 'subscribe',\n    payload: ToServerSubscribeQueryPayload,\n    resource: ServiceResource<any, any>,\n    query: Query<any, any>,\n    sendSubscriptionMessage: SubscriptionCallback,\n  ): PromiseLike<null> => {\n    if (!openedSubscriptions) {\n      throw new Error('Subscriptions not allowed');\n    }\n\n    const { subscriptionId } = payload;\n    if (openedSubscriptions.has(subscriptionId)) {\n      const error = 'Already have a watcher for this id. Cannot add a new one';\n      logger.warn(error, { subscriptionId, key: payload.key });\n      throw new ResourcesServerError('ALREADY_HAVE_WATCHER', error);\n    }\n\n    const subscription = query[type]((error: Error | null, result: any) => {\n      if (error) {\n        logUnexpectedError(error, type, payload);\n      }\n      sendSubscriptionMessage(subscriptionId, error, result);\n    });\n\n    const subscribeHook = resource.subscribeHooks?.[payload.key];\n    openedSubscriptions.set(subscriptionId, {\n      subscription,\n      subscribeHook,\n      params: subscribeHook ? payload.params : undefined,\n    });\n    if (subscribeHook) {\n      subscribeHook.subscribed(authenticatedUser, payload.params);\n    }\n\n    return subscription.then(() => null);\n  };\n\n  const unsubscribeSubscription = ({\n    subscription,\n    subscribeHook,\n    params,\n  }: SubscriptionAndSubscribeHook): void => {\n    subscription.stop();\n    if (subscribeHook) {\n      subscribeHook.unsubscribed(authenticatedUser, params);\n    }\n  };\n\n  return {\n    close: () => {\n      if (openedSubscriptions) {\n        openedSubscriptions.forEach(unsubscribeSubscription);\n      }\n    },\n    messageHandler: async (message, subscriptionCallback): Promise<unknown> => {\n      switch (message.type) {\n        case 'fetch': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n            return await query.fetch((result) => result);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        case 'fetchAndSubscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n\n            return await createSubscription(\n              'fetchAndSubscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        case 'subscribe': {\n          try {\n            const resource = getResource(message.payload);\n            const query = createQuery(message.payload, resource);\n            await createSubscription(\n              'subscribe',\n              message.payload,\n              resource,\n              query,\n              subscriptionCallback,\n            );\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n          return;\n        }\n        // case 'subscribe:changePayload': {\n        //   break;\n        // }\n        case 'subscribe:close': {\n          if (!openedSubscriptions) {\n            throw new Error('Subscriptions not allowed');\n          }\n          try {\n            const { subscriptionId } = message.payload;\n            const SubscriptionAndSubscribeHook =\n              openedSubscriptions.get(subscriptionId);\n            if (!SubscriptionAndSubscribeHook) {\n              logger.warn('tried to unsubscribe non existing watcher', {\n                subscriptionId,\n              });\n            } else {\n              openedSubscriptions.delete(subscriptionId);\n              unsubscribeSubscription(SubscriptionAndSubscribeHook);\n            }\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n          }\n          return;\n        }\n        case 'do': {\n          try {\n            const resource = getResource(message.payload);\n            const { operationKey, params } = message.payload;\n\n            const operation = resource.operations[operationKey];\n\n            if (!operation) {\n              throw new ResourcesServerError(\n                'OPERATION_NOT_FOUND',\n                `Operation not found: ${operationKey}`,\n              );\n            }\n\n            return operation(params, authenticatedUser);\n          } catch (err) {\n            logUnexpectedError(err, message.type, message.payload);\n            throw err;\n          }\n        }\n      }\n    },\n  };\n};\n"],"names":["ResourcesServerService","serviceResources","Map","addResource","key","resource","set","getServiceResource","get","Error","logger","Logger","logUnexpectedError","error","message","payload","ResourcesServerError","createMessageHandler","resourcesServerService","authenticatedUser","allowSubscriptions","openedSubscriptions","getResource","debug","resourceName","createQuery","startsWith","queries","params","createSubscription","type","query","sendSubscriptionMessage","subscriptionId","has","warn","subscription","result","subscribeHook","subscribeHooks","undefined","subscribed","then","unsubscribeSubscription","stop","unsubscribed","close","forEach","messageHandler","subscriptionCallback","fetch","SubscriptionAndSubscribeHook","err","operationKey","operation","operations"],"mappings":"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"}