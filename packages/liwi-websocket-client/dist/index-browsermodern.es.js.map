{"version":3,"file":"index-browsermodern.es.js","sources":["../src/WebsocketCursor.js","../src/Query.js","../src/WebsocketStore.js"],"sourcesContent":["import { AbstractCursor, type ResultType } from 'liwi-store';\nimport WebsocketStore from './WebsocketStore';\n\nexport default class WebsocketCursor extends AbstractCursor<WebsocketStore> {\n  _idCursor: ?number;\n  _options: ?Object;\n  _result: ?Object;\n\n  constructor(store: WebsocketStore, options) {\n    super(store);\n    this._options = options;\n  }\n\n  /* options */\n\n  limit(newLimit: number): Promise<this> {\n    if (this._idCursor) throw new Error('Cursor already created');\n    this._options.limit = newLimit;\n    return Promise.resolve(this);\n  }\n\n  /* results */\n\n  _create() {\n    if (this._idCursor) throw new Error('Cursor already created');\n    return this.store.connection.emit('createCursor', this._options).then(idCursor => {\n      if (!idCursor) return;\n      this._idCursor = idCursor;\n    });\n  }\n\n  emit(type, ...args): Promise<any> {\n    if (!this._idCursor) {\n      return this._create().then(() => this.emit(type, ...args));\n    }\n\n    return this.store.emit('cursor', { type, id: this._idCursor }, args);\n  }\n\n  advance(count: number) {\n    this.emit('advance', count);\n    return this;\n  }\n\n  next(): Promise<?any> {\n    return this.emit('next').then(result => {\n      this._result = result;\n      this.key = result && result[this._store.keyPath];\n      return this.key;\n    });\n  }\n\n  result(): Promise<?ResultType> {\n    return Promise.resolve(this._result);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this.emit('count', applyLimit);\n  }\n\n  close(): Promise<void> {\n    if (!this._store) return Promise.resolve();\n\n    const closedPromise = this._idCursor ? this.emit('close') : Promise.resolve();\n    this._idCursor = null;\n    this._options = null;\n    this._store = undefined;\n    this._result = undefined;\n    return closedPromise;\n  }\n\n  toArray(): Promise<Array<Array<ResultType>>> {\n    return this.store.emit('cursor toArray', this._options).then(result => {\n      this.close();\n      return result;\n    });\n  }\n}\n","import Logger from 'nightingale-logger';\nimport { decode } from 'extended-json';\nimport { AbstractQuery } from 'liwi-store';\nimport WebsocketStore from './WebsocketStore';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nconst logger = new Logger('liwi:websocket-client:query');\n\nexport default class Query extends AbstractQuery<WebsocketStore> {\n  constructor(store: WebsocketStore, key: string) {\n    super(store);\n    this.key = key;\n  }\n\n  fetch(callback: ?Function): Promise<any> {\n    return this.store.emit('fetch', this.key).then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    const eventName = `subscribe:${this.store.restName}.${this.key}`;\n    const listener = (err, result) => {\n      const decodedResult = result && decode(result);\n      if (!PRODUCTION) logger.debug(eventName, { result, decodedResult });\n      callback(err, decodedResult);\n    };\n    this.store.connection.on(eventName, listener);\n\n    let _stopEmitSubscribe;\n    let promise = this.store\n      .emitSubscribe(_includeInitial ? 'fetchAndSubscribe' : 'subscribe', this.key, eventName, args)\n      .then(stopEmitSubscribe => {\n        _stopEmitSubscribe = stopEmitSubscribe;\n        logger.info('subscribed');\n      })\n      .catch(err => {\n        this.store.connection.off(eventName, listener);\n        throw err;\n      });\n\n    const stop = () => {\n      if (!promise) return;\n      _stopEmitSubscribe();\n      promise.then(() => {\n        promise = null;\n        this.store.connection.off(eventName, listener);\n      });\n    };\n\n    return {\n      cancel: stop,\n      stop,\n      then: cb => Promise.resolve(promise).then(cb),\n    };\n  }\n}\n","import Logger from 'nightingale-logger/src';\nimport { encode, decode } from 'extended-json';\nimport { AbstractStore } from 'liwi-store';\nimport WebsocketCursor from './WebsocketCursor';\nimport Query from './Query';\n\nconst logger = new Logger('liwi:websocket-client');\n\ntype WebsocketConnectionType = {\n  emit: Function,\n  isConnected: Function,\n};\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnectionType> {\n  keyPath = 'id';\n\n  constructor(websocket: WebsocketConnectionType, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    logger.debug('createQuery', { key });\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    logger.debug('emit', { type, args });\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection\n      .emit('rest', {\n        type,\n        restName: this.restName,\n        json: encode(args),\n      })\n      .then(result => result && decode(result));\n  }\n\n  emitSubscribe(type, ...args) {\n    const emit = () => this.emit(type, ...args);\n    const registerOnConnect = () => {\n      this.connection.on('connect', emit);\n      return () => this.connection.off('connect', emit);\n    };\n\n    if (this.connection.isConnected()) {\n      return emit().then(registerOnConnect);\n    }\n\n    return Promise.resolve(registerOnConnect());\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise<void> {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise<void> {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"],"names":["WebsocketCursor","AbstractCursor","store","options","_options","newLimit","_idCursor","Error","limit","Promise","resolve","connection","emit","then","idCursor","type","args","_create","id","count","_result","result","key","_store","keyPath","applyLimit","closedPromise","undefined","close","logger","Logger","Query","AbstractQuery","callback","_includeInitial","eventName","restName","listener","err","decodedResult","decode","on","_stopEmitSubscribe","promise","emitSubscribe","stopEmitSubscribe","info","catch","off","stop","cb","WebsocketStore","AbstractStore","websocket","debug","isDisconnected","encode","registerOnConnect","isConnected","object","objects","partialUpdate","criteria","sort","findOne"],"mappings":";;;;IAGqBA,kBAAN,cAA8BC,cAA9B,CAA6D;;cAK9DC,KAAZ,EAAmCC,OAAnC,EAA4C;UACpCD,KAAN;SACKE,QAAL,GAAgBD,OAAhB;;;;;QAKIE,QAAN,EAAuC;QACjC,KAAKC,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;SACfH,QAAL,CAAcI,KAAd,GAAsBH,QAAtB;WACOI,QAAQC,OAAR,CAAgB,IAAhB,CAAP;;;;;YAKQ;;;QACJ,KAAKJ,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;WACb,KAAKL,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2B,cAA3B,EAA2C,KAAKR,QAAhD,EAA0DS,IAA1D,CAA+D,oBAAY;UAC5E,CAACC,QAAL,EAAe;YACVR,SAAL,GAAiBQ,QAAjB;KAFK,CAAP;;;OAMGC,IAAL,EAAW,GAAGC,IAAd,EAAkC;;;QAC5B,CAAC,KAAKV,SAAV,EAAqB;aACZ,KAAKW,OAAL,GAAeJ,IAAf,CAAoB;eAAM,OAAKD,IAAL,CAAUG,IAAV,EAAgB,GAAGC,IAAnB,CAAN;OAApB,CAAP;;;WAGK,KAAKd,KAAL,CAAWU,IAAX,CAAgB,QAAhB,EAA0B,EAAEG,IAAF,EAAQG,IAAI,KAAKZ,SAAjB,EAA1B,EAAwDU,IAAxD,CAAP;;;UAGMG,KAAR,EAAuB;SAChBP,IAAL,CAAU,SAAV,EAAqBO,KAArB;WACO,IAAP;;;SAGoB;;;WACb,KAAKP,IAAL,CAAU,MAAV,EAAkBC,IAAlB,CAAuB,kBAAU;aACjCO,OAAL,GAAeC,MAAf;aACKC,GAAL,GAAWD,UAAUA,OAAO,OAAKE,MAAL,CAAYC,OAAnB,CAArB;aACO,OAAKF,GAAZ;KAHK,CAAP;;;WAO6B;WACtBb,QAAQC,OAAR,CAAgB,KAAKU,OAArB,CAAP;;;QAGIK,aAAsB,KAA5B,EAAmC;WAC1B,KAAKb,IAAL,CAAU,OAAV,EAAmBa,UAAnB,CAAP;;;UAGqB;QACjB,CAAC,KAAKF,MAAV,EAAkB,OAAOd,QAAQC,OAAR,EAAP;;UAEZgB,gBAAgB,KAAKpB,SAAL,GAAiB,KAAKM,IAAL,CAAU,OAAV,CAAjB,GAAsCH,QAAQC,OAAR,EAA5D;SACKJ,SAAL,GAAiB,IAAjB;SACKF,QAAL,GAAgB,IAAhB;SACKmB,MAAL,GAAcI,SAAd;SACKP,OAAL,GAAeO,SAAf;WACOD,aAAP;;;YAG2C;;;WACpC,KAAKxB,KAAL,CAAWU,IAAX,CAAgB,gBAAhB,EAAkC,KAAKR,QAAvC,EAAiDS,IAAjD,CAAsD,kBAAU;aAChEe,KAAL;aACOP,MAAP;KAFK,CAAP;;;;AC9DJ,MAAMQ,SAAS,IAAIC,MAAJ,CAAW,6BAAX,CAAf;;IAEqBC,QAAN,cAAoBC,aAApB,CAAkD;cACnD9B,KAAZ,EAAmCoB,GAAnC,EAAgD;UACxCpB,KAAN;SACKoB,GAAL,GAAWA,GAAX;;;QAGIW,QAAN,EAAyC;WAChC,KAAK/B,KAAL,CAAWU,IAAX,CAAgB,OAAhB,EAAyB,KAAKU,GAA9B,EAAmCT,IAAnC,CAAwCoB,QAAxC,CAAP;;;aAGSA,QAAX,EAA+BC,kBAAkB,KAAjD,EAAwDlB,IAAxD,EAA+F;;;UACvFmB,YAAa,aAAY,KAAKjC,KAAL,CAAWkC,QAAS,IAAG,KAAKd,GAAI,EAA/D;UACMe,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMjB,MAAN,EAAiB;YAC1BkB,gBAAgBlB,UAAUmB,OAAOnB,MAAP,CAAhC;;eAESiB,GAAT,EAAcC,aAAd;KAHF;SAKKrC,KAAL,CAAWS,UAAX,CAAsB8B,EAAtB,CAAyBN,SAAzB,EAAoCE,QAApC;;QAEIK,kBAAJ;QACIC,UAAU,KAAKzC,KAAL,CACX0C,aADW,CACGV,kBAAkB,mBAAlB,GAAwC,WAD3C,EACwD,KAAKZ,GAD7D,EACkEa,SADlE,EAC6EnB,IAD7E,EAEXH,IAFW,CAEN,6BAAqB;2BACJgC,iBAArB;aACOC,IAAP,CAAY,YAAZ;KAJU,EAMXC,KANW,CAML,eAAO;YACP7C,KAAL,CAAWS,UAAX,CAAsBqC,GAAtB,CAA0Bb,SAA1B,EAAqCE,QAArC;YACMC,GAAN;KARU,CAAd;;UAWMW,OAAO,SAAPA,IAAO,GAAM;UACb,CAACN,OAAL,EAAc;;cAEN9B,IAAR,CAAa,YAAM;kBACP,IAAV;cACKX,KAAL,CAAWS,UAAX,CAAsBqC,GAAtB,CAA0Bb,SAA1B,EAAqCE,QAArC;OAFF;KAHF;;WASO;cACGY,IADH;UAAA;YAGC;eAAMxC,QAAQC,OAAR,CAAgBiC,OAAhB,EAAyB9B,IAAzB,CAA8BqC,EAA9B,CAAN;;KAHR;;;;AC9CJ,MAAMrB,WAAS,IAAIC,MAAJ,CAAW,uBAAX,CAAf;;IAOqBqB,iBAAN,cAAwCC,aAAxC,CAA+E;;cAGhFC,SAAZ,EAAgDjB,QAAhD,EAAkE;UAC1DiB,SAAN;;SAHF7B,OAEkE,GAFxD,IAEwD;QAG5D,CAACY,QAAL,EAAe;YACP,IAAI7B,KAAJ,CAAW,sBAAqB6B,QAAS,GAAzC,CAAN;;;SAGGA,QAAL,GAAgBA,QAAhB;;;cAGUd,GAAZ,EAAyB;aAChBgC,KAAP,CAAa,aAAb,EAA4B,EAAEhC,GAAF,EAA5B;WACO,IAAIS,KAAJ,CAAU,IAAV,EAAgBT,GAAhB,CAAP;;;OAGGP,IAAL,EAAW,GAAGC,IAAd,EAAoB;aACXsC,KAAP,CAAa,MAAb,EAAqB,EAAEvC,IAAF,EAAQC,IAAR,EAArB;QACI,KAAKL,UAAL,CAAgB4C,cAAhB,EAAJ,EAAsC;YAC9B,IAAIhD,KAAJ,CAAU,4BAAV,CAAN;;;WAGK,KAAKI,UAAL,CACJC,IADI,CACC,MADD,EACS;UAAA;gBAEF,KAAKwB,QAFH;YAGNoB,OAAOxC,IAAP;KAJH,EAMJH,IANI,CAMC;aAAUQ,UAAUmB,OAAOnB,MAAP,CAApB;KAND,CAAP;;;gBASYN,IAAd,EAAoB,GAAGC,IAAvB,EAA6B;;;UACrBJ,OAAO,SAAPA,IAAO;aAAM,MAAKA,IAAL,CAAUG,IAAV,EAAgB,GAAGC,IAAnB,CAAN;KAAb;UACMyC,oBAAoB,SAApBA,iBAAoB,GAAM;YACzB9C,UAAL,CAAgB8B,EAAhB,CAAmB,SAAnB,EAA8B7B,IAA9B;aACO;eAAM,MAAKD,UAAL,CAAgBqC,GAAhB,CAAoB,SAApB,EAA+BpC,IAA/B,CAAN;OAAP;KAFF;;QAKI,KAAKD,UAAL,CAAgB+C,WAAhB,EAAJ,EAAmC;aAC1B9C,OAAOC,IAAP,CAAY4C,iBAAZ,CAAP;;;WAGKhD,QAAQC,OAAR,CAAgB+C,mBAAhB,CAAP;;;YAGQE,MAAV,EAAiD;WACxC,KAAK/C,IAAL,CAAU,WAAV,EAAuB+C,MAAvB,CAAP;;;YAGQA,MAAV,EAAiD;WACxC,KAAK/C,IAAL,CAAU,WAAV,EAAuB+C,MAAvB,CAAP;;;gBAGYC,OAAd,EAAoE;WAC3D,KAAKhD,IAAL,CAAU,eAAV,EAA2BgD,OAA3B,CAAP;;;qBAGiBtC,GAAnB,EAA6BuC,aAA7B,EAAwE;WAC/D,KAAKjD,IAAL,CAAU,oBAAV,EAAgCU,GAAhC,EAAqCuC,aAArC,CAAP;;;mBAGeF,MAAjB,EAAoCE,aAApC,EAA+E;WACtE,KAAKjD,IAAL,CAAU,kBAAV,EAA8B+C,MAA9B,EAAsCE,aAAtC,CAAP;;;oBAGgBC,QAAlB,EAA4BD,aAA5B,EAAkE;WACzD,KAAKjD,IAAL,CAAU,mBAAV,EAA+BkD,QAA/B,EAAyCD,aAAzC,CAAP;;;cAGUvC,GAAZ,EAAqC;WAC5B,KAAKV,IAAL,CAAU,aAAV,EAAyBU,GAAzB,CAAP;;;YAGQqC,MAAV,EAA4C;WACnC,KAAK/C,IAAL,CAAU,WAAV,EAAuB+C,MAAvB,CAAP;;;SAGKG,QAAP,EAA0BC,IAA1B,EAA8E;WACrEtD,QAAQC,OAAR,CAAgB,IAAIV,eAAJ,CAAoB,IAApB,EAA0B,EAAE8D,QAAF,EAAYC,IAAZ,EAA1B,CAAhB,CAAP;;;YAGQzC,GAAV,EAAoB;WACX,KAAK0C,OAAL,CAAa,EAAE9C,IAAII,GAAN,EAAb,CAAP;;;UAGMwC,QAAR,EAA0BC,IAA1B,EAA0D;WACjD,KAAKnD,IAAL,CAAU,SAAV,EAAqBkD,QAArB,EAA+BC,IAA/B,CAAP;;;;;;"}