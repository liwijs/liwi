{"version":3,"file":"index-node14.cjs","sources":["../src/MongoCursor.ts","../src/MongoQueryCollection.ts","../src/MongoQuerySingleItem.ts","../src/MongoStore.ts","../src/MongoConnection.ts","../src/createMongoSubscribeStore.ts"],"sourcesContent":["import { AbstractStoreCursor } from 'liwi-store';\nimport type { AllowedKeyValue } from 'liwi-types';\nimport type { FindCursor } from 'mongodb';\nimport type { MongoBaseModel } from './MongoBaseModel';\nimport type MongoStore from './MongoStore';\n\nexport default class MongoCursor<\n  Model extends MongoBaseModel<KeyValue>,\n  Result extends Partial<Model> = Model,\n  KeyValue extends AllowedKeyValue = Model['_id'],\n> extends AbstractStoreCursor<\n  MongoStore<Model, KeyValue>,\n  KeyValue,\n  Model,\n  Result\n> {\n  // key in AbstractCursor\n\n  private readonly cursor: FindCursor<Result>;\n\n  private _result?: Result | null;\n\n  constructor(store: MongoStore<Model, KeyValue>, cursor: FindCursor<Result>) {\n    super(store);\n    this.cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  next(): Promise<KeyValue | undefined> {\n    return this.cursor.next().then((value) => {\n      this._result = value;\n      this.key = value?._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise<this> {\n    this.cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  result(): Promise<Result> {\n    if (!this._result) throw new Error('Cannot call result() before next()');\n    return Promise.resolve(this._result);\n  }\n\n  close(): Promise<void> {\n    if (this.cursor) {\n      this.cursor.close();\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Result[]> {\n    return this.cursor.toArray();\n  }\n}\n","/* eslint-disable complexity, max-lines */\nimport type {\n  QuerySubscription,\n  SubscribeCallback,\n  QueryResult,\n  QueryParams,\n} from 'liwi-store';\nimport type { Actions } from 'liwi-subscribe-store';\nimport { AbstractSubscribableStoreQuery } from 'liwi-subscribe-store';\nimport type {\n  Changes,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n} from 'liwi-types';\nimport mingo from 'mingo';\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from './MongoBaseModel';\nimport type MongoCursor from './MongoCursor';\nimport type MongoStore from './MongoStore';\n\nconst identityTransformer = <\n  Model extends MongoBaseModel<any>,\n  Transformed = Model,\n>(\n  model: Model,\n): Transformed => model as unknown as Transformed;\n\ntype TestCriteria = (obj: any) => boolean;\n\nexport default class MongoQueryCollection<\n  Model extends MongoBaseModel<KeyValue>,\n  Params extends QueryParams<Params> = never,\n  KeyValue extends AllowedKeyValue = Model['_id'],\n  Item extends Record<MongoKeyPath, KeyValue> = Model,\n> extends AbstractSubscribableStoreQuery<\n  MongoKeyPath,\n  KeyValue,\n  Model,\n  MongoInsertType<Model, KeyValue>,\n  Params,\n  Item[]\n> {\n  private readonly store: MongoStore<Model, KeyValue>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private testCriteria?: TestCriteria;\n\n  private readonly transformer: Transformer<Model, Item>;\n\n  constructor(\n    store: MongoStore<Model, KeyValue>,\n    options: QueryOptions<Model>,\n    transformer: Transformer<Model, Item> = identityTransformer,\n  ) {\n    super();\n    this.store = store;\n    this.options = options;\n    this.transformer = transformer;\n  }\n\n  createTestCriteria(): TestCriteria {\n    if (!this.testCriteria) {\n      if (!this.options.criteria) {\n        return () => true;\n      }\n\n      const mingoQuery = new mingo.Query(this.options.criteria);\n      this.testCriteria = mingoQuery.test.bind(mingoQuery);\n    }\n    return this.testCriteria;\n  }\n\n  async fetch<T>(onFulfilled: (result: QueryResult<Item[]>) => T): Promise<T> {\n    const [result, count] = await Promise.all([\n      this.createMongoCursor().then((cursor) => cursor.toArray()),\n      this.store.count(),\n    ]);\n\n    return onFulfilled({\n      result: result.map(this.transformer),\n      meta: { total: count },\n      info: {\n        sort: this.options.sort,\n        limit: this.options.limit,\n        keyPath: this.store.keyPath,\n      },\n    });\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<KeyValue, Item[]>,\n    _includeInitial: boolean,\n  ): QuerySubscription {\n    const store = super.getSubscribeStore();\n    const testCriteria: TestCriteria = this.createTestCriteria();\n\n    const promise: Promise<void> = _includeInitial\n      ? this.fetch(({ result, meta, info }: QueryResult<Item[]>) => {\n          callback(null, [\n            {\n              type: 'initial',\n              initial: result,\n              queryInfo: info,\n              meta,\n            },\n          ]);\n        })\n      : Promise.resolve();\n\n    const unsubscribe = store.subscribe((action: Actions<Model>) => {\n      const changes: Changes<KeyValue, Item[]> = [];\n      switch (action.type) {\n        case 'inserted': {\n          const filtered = action.next.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: 'inserted',\n              result: filtered.map(this.transformer),\n            });\n          }\n          break;\n        }\n        case 'deleted': {\n          const filtered = action.prev.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: 'deleted',\n              keys: filtered.map((object) => object[this.store.keyPath]),\n            });\n          }\n          break;\n        }\n        case 'updated': {\n          const {\n            deleted,\n            updated,\n            inserted,\n          }: {\n            deleted: KeyValue[];\n            updated: Item[];\n            inserted: Item[];\n          } = { deleted: [], updated: [], inserted: [] };\n\n          action.changes.forEach(([prevObject, nextObject]: [Model, Model]) => {\n            if (testCriteria(prevObject)) {\n              if (!testCriteria(nextObject)) {\n                deleted.push(prevObject[this.store.keyPath]);\n              } else {\n                updated.push(this.transformer(nextObject));\n              }\n            } else if (testCriteria(nextObject)) {\n              inserted.push(this.transformer(nextObject));\n            }\n          });\n\n          if (deleted.length > 0) {\n            changes.push({ type: 'deleted', keys: deleted });\n          }\n          if (updated.length > 0) {\n            changes.push({ type: 'updated', result: updated });\n          }\n          if (inserted.length > 0) {\n            changes.push({ type: 'inserted', result: inserted });\n          }\n\n          break;\n        }\n        default:\n          throw new Error('Unsupported type');\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n    // let _feed;\n    // const promise = this.queryCallback(this.store.query(), this.store.r)\n    //   .changes({\n    //     includeInitial: _includeInitial,\n    //     includeStates: true,\n    //     includeTypes: true,\n    //     includeOffsets: true,\n    //   })\n    //   .then((feed) => {\n    //     if (args.length === 0) {\n    //       _feed = feed;\n    //       delete this._promise;\n    //     }\n    //\n    //     feed.each(callback);\n    //     return feed;\n    //   });\n    //\n    // if (args.length === 0) this._promise = promise;\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: <T, U>(\n        onFulfilled: () => T | Promise<T>,\n        onRejected?: (error: any) => U | Promise<U>,\n      ): Promise<T | U> => promise.then(onFulfilled, onRejected),\n    };\n  }\n\n  private async createMongoCursor(): Promise<\n    MongoCursor<Model, Model, KeyValue>\n  > {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.skip) {\n      cursor.advance(this.options.skip);\n    }\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","import type {\n  QuerySubscription,\n  SubscribeCallback,\n  QueryResult,\n  QueryParams,\n} from 'liwi-store';\nimport type { Actions } from 'liwi-subscribe-store';\nimport { AbstractSubscribableStoreQuery } from 'liwi-subscribe-store';\nimport type {\n  Changes,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n} from 'liwi-types';\nimport mingo from 'mingo';\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from './MongoBaseModel';\nimport type MongoCursor from './MongoCursor';\nimport type MongoStore from './MongoStore';\n\nconst identityTransformer = <\n  Model extends MongoBaseModel<any>,\n  Transformed = Model,\n>(\n  model: Model,\n): Transformed => model as unknown as Transformed;\n\ntype TestCriteria = (obj: any) => boolean;\n\nexport default class MongoQuerySingleItem<\n  Model extends MongoBaseModel<KeyValue>,\n  Params extends QueryParams<Params> = never,\n  Result extends Record<MongoKeyPath, KeyValue> | null = Model | null,\n  KeyValue extends AllowedKeyValue = Model['_id'],\n> extends AbstractSubscribableStoreQuery<\n  MongoKeyPath,\n  KeyValue,\n  Model,\n  MongoInsertType<Model, KeyValue>,\n  Params,\n  Result\n> {\n  private readonly store: MongoStore<Model, KeyValue>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private testCriteria?: TestCriteria;\n\n  private readonly transformer: Transformer<Model, Result>;\n\n  constructor(\n    store: MongoStore<Model, KeyValue>,\n    options: QueryOptions<Model>,\n    transformer: Transformer<Model, Result> = identityTransformer,\n  ) {\n    super();\n    this.store = store;\n    this.options = options;\n    this.transformer = transformer;\n  }\n\n  createMingoTestCriteria(): TestCriteria {\n    if (!this.testCriteria) {\n      if (!this.options.criteria) {\n        return () => true;\n      }\n\n      const mingoQuery = new mingo.Query(this.options.criteria);\n      this.testCriteria = mingoQuery.test.bind(mingoQuery);\n    }\n\n    return this.testCriteria;\n  }\n\n  async fetch<T>(onFulfilled: (result: QueryResult<Result>) => T): Promise<T> {\n    const cursor = await this.createMongoCursor();\n    await cursor.limit(1);\n    return cursor.toArray().then((result: Model[]) => {\n      const item: Result =\n        result.length === 0 ? (null as Result) : this.transformer(result[0]);\n      return onFulfilled({\n        result: item,\n        meta: { total: result === null ? 0 : 1 },\n        info: {\n          limit: 1,\n          keyPath: this.store.keyPath,\n        },\n      });\n    });\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription {\n    const store = super.getSubscribeStore();\n    const testCriteria: TestCriteria = this.createMingoTestCriteria();\n\n    const promise: Promise<void> = _includeInitial\n      ? this.fetch(({ result, meta, info }: QueryResult<Result>) => {\n          callback(null, [\n            {\n              type: 'initial',\n              initial: result,\n              queryInfo: info,\n              meta,\n            },\n          ]);\n        })\n      : Promise.resolve();\n\n    const unsubscribe = store.subscribe(async (action: Actions<Model>) => {\n      const changes: Changes<KeyValue, Result> = [];\n      switch (action.type) {\n        case 'inserted': {\n          const filtered = action.next.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: 'updated',\n              result: this.transformer(filtered[0]),\n            });\n          }\n          break;\n        }\n        case 'deleted': {\n          const filtered = action.prev.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: 'deleted',\n              keys: filtered.map((object) => object[this.store.keyPath]),\n            });\n          }\n          break;\n        }\n        case 'updated': {\n          const filtered = action.changes.filter(([prev, next]) =>\n            testCriteria(prev),\n          );\n          if (filtered.length > 0) {\n            if (this.options.sort) {\n              const { result } = await this.fetch((res) => res);\n              changes.push({\n                type: 'updated',\n                result,\n              });\n            } else if (filtered.length !== 1) {\n              throw new Error(\n                'should not match more than 1, use sort if you can have multiple match',\n              );\n            } else {\n              const [, next] = filtered[0];\n              changes.push({\n                type: 'updated',\n                result: testCriteria(next) ? this.transformer(next) : null!,\n              });\n            }\n          } else if (filtered.length === 0) {\n          }\n          break;\n        }\n        default:\n          throw new Error('Unsupported type');\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: <T, U>(\n        onFulfilled: () => T | Promise<T>,\n        onRejected?: (error: any) => U | Promise<U>,\n      ): Promise<T | U> => promise.then(onFulfilled, onRejected),\n    };\n  }\n\n  private async createMongoCursor(): Promise<\n    MongoCursor<Model, Model, KeyValue>\n  > {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","/* eslint-disable max-lines */\nimport type {\n  UpsertResult,\n  SubscribableStore,\n  QueryParams,\n  UpsertPartialObject,\n} from 'liwi-store';\nimport type {\n  Criteria,\n  Sort,\n  Update,\n  QueryOptions,\n  Transformer,\n  AllowedKeyValue,\n  OptionalBaseModelKeysForInsert,\n} from 'liwi-types';\nimport type {\n  Collection,\n  FindCursor,\n  MongoClient,\n  UpdateFilter,\n} from 'mongodb';\nimport mongodb from 'mongodb';\nimport type {\n  MongoBaseModel,\n  MongoKeyPath,\n  MongoInsertType,\n} from './MongoBaseModel';\nimport type MongoConnection from './MongoConnection';\nimport MongoCursor from './MongoCursor';\nimport MongoQueryCollection from './MongoQueryCollection';\nimport MongoQuerySingleItem from './MongoQuerySingleItem';\n\nexport interface MongoUpsertResult<\n  KeyValue extends AllowedKeyValue,\n  Model extends MongoBaseModel<KeyValue>,\n> extends UpsertResult<Model> {\n  object: Model;\n  inserted: boolean;\n}\n\nexport default class MongoStore<\n  Model extends MongoBaseModel<KeyValue>,\n  KeyValue extends AllowedKeyValue = Model[MongoKeyPath],\n> implements\n    SubscribableStore<\n      MongoKeyPath,\n      KeyValue,\n      Model,\n      MongoInsertType<Model>,\n      MongoConnection\n    >\n{\n  readonly keyPath: MongoKeyPath = '_id';\n\n  readonly connection: MongoConnection;\n\n  private _collection: Collection<Model> | Promise<Collection<Model>>;\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    this.connection = connection;\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (client: MongoClient) => {\n        this._collection = client.db().collection(collectionName);\n        return this._collection;\n      },\n      (err: any) => {\n        this._collection = Promise.reject(err);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection<Model>> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  createQuerySingleItem<\n    Result extends Record<MongoKeyPath, KeyValue> = Model,\n    Params extends QueryParams<Params> = never,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): MongoQuerySingleItem<Model, Params, Result, KeyValue> {\n    return new MongoQuerySingleItem<Model, Params, Result, KeyValue>(\n      this,\n      options,\n      transformer,\n    );\n  }\n\n  createQueryCollection<\n    Item extends Record<MongoKeyPath, KeyValue> = Model,\n    Params extends QueryParams<Params> = never,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): MongoQueryCollection<Model, Params, Model['_id'], Item> {\n    return new MongoQueryCollection<Model, Params, KeyValue, Item>(\n      this,\n      options,\n      transformer,\n    );\n  }\n\n  async insertOne(object: MongoInsertType<Model>): Promise<Model> {\n    if (!object._id) {\n      object._id = new mongodb.ObjectId().toString() as Model['_id'];\n    }\n\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    const { acknowledged: isAcknowledged } = await collection.insertOne(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      object as any,\n    );\n    if (!isAcknowledged) {\n      throw new Error('Fail to insert');\n    }\n\n    return object as Model;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    await collection.replaceOne({ _id: object._id } as Criteria<Model>, object);\n    return object;\n  }\n\n  async upsertOne<\n    K extends Exclude<\n      keyof Model,\n      MongoKeyPath | OptionalBaseModelKeysForInsert\n    >,\n  >(\n    object: UpsertPartialObject<MongoKeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<\n      keyof Model,\n      MongoKeyPath | OptionalBaseModelKeysForInsert\n    >,\n  >(\n    object: UpsertPartialObject<MongoKeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>['$setOnInsert'],\n  ): Promise<MongoUpsertResult<KeyValue, Model>> {\n    const $setOnInsert = {\n      created: object.created || new Date(),\n      ...setOnInsertPartialObject,\n    };\n\n    if (!object.updated) {\n      (object as MongoBaseModel).updated = new Date();\n    }\n\n    const $set: Partial<typeof object> = { ...object };\n    delete $set.created;\n\n    const collection = await this.collection;\n\n    const { upsertedCount } = await collection.updateOne(\n      { _id: object._id } as Criteria<Model>,\n      { $set, $setOnInsert } as UpdateFilter<Model>,\n      { upsert: true },\n    );\n\n    if (upsertedCount) {\n      Object.assign(object, $setOnInsert);\n    }\n\n    return { object: object as unknown as Model, inserted: !!upsertedCount };\n  }\n\n  replaceSeveral(objects: Model[]): Promise<Model[]> {\n    return Promise.all(objects.map((object: Model) => this.replaceOne(object)));\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    const collection = await this.collection;\n    const commandResult = await collection.updateOne(\n      { _id: key, ...criteria } as Criteria<Model>,\n      partialUpdate as UpdateFilter<Model>,\n    );\n    if (!commandResult.acknowledged) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    const object = await this.findByKey(key);\n    return object!;\n  }\n\n  partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    return this.collection\n      .then((collection) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        collection.updateMany(criteria, partialUpdate as any),\n      )\n      .then((res) => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) =>\n        collection.deleteOne({ _id: key, ...criteria } as Criteria<Model>),\n      )\n      .then(() => undefined);\n  }\n\n  deleteOne(object: Model): Promise<void> {\n    return this.deleteByKey(object._id);\n  }\n\n  deleteMany(selector: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteMany(selector))\n      .then(() => undefined);\n  }\n\n  async count(filter?: Criteria<Model>): Promise<number> {\n    const collection = await this.collection;\n    return filter\n      ? collection.countDocuments(filter)\n      : collection.countDocuments();\n  }\n\n  async cursor<Result = Model>(\n    filter?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<MongoCursor<Model, Result, KeyValue>> {\n    const collection = await this.collection;\n    const findCursor = filter\n      ? collection.find<Result>(filter)\n      : (collection.find() as unknown as FindCursor<Result>);\n    if (sort) findCursor.sort(sort);\n    return new MongoCursor<Model, Result, KeyValue>(this, findCursor);\n  }\n\n  async findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    const collection = await this.collection;\n    const result = await collection.findOne<Model>({\n      _id: key,\n      ...criteria,\n    } as Criteria<Model>);\n    return result || undefined;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.cursor<Model>(criteria, sort).then((cursor) =>\n      cursor.toArray(),\n    );\n  }\n\n  async findOne(\n    filter: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    const collection = await this.collection;\n    const result = await collection.findOne<Model>(filter, {\n      sort,\n    });\n    return result || undefined;\n  }\n}\n","import { AbstractConnection } from 'liwi-store';\nimport mongodb from 'mongodb';\nimport { Logger } from 'nightingale-logger';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection?: mongodb.MongoClient;\n\n  _connecting?: Promise<mongodb.MongoClient>;\n\n  connectionFailed?: boolean;\n\n  // TODO interface\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const buildConnectionString = (redactCredentials: boolean): string =>\n      `mongodb://${\n        config.has('user')\n          ? `${\n              redactCredentials\n                ? `${(config.get('user') as string).slice(0, 2)}[redacted]`\n                : (config.get('user') as string)\n            }:${\n              redactCredentials\n                ? '[redacted]'\n                : (config.get('password') as string)\n            }@`\n          : ''\n      }` +\n      `${config.get('host') as string}:${config.get('port') as string}/${\n        config.get('database') as string\n      }`;\n\n    const connectionString = buildConnectionString(false);\n    const connectionStringRedacted = buildConnectionString(true);\n\n    this.connect(connectionString, connectionStringRedacted);\n  }\n\n  connect(connectionString: string, connectionStringRedacted: string): void {\n    logger.info('connecting', { connectionStringRedacted });\n\n    const connectPromise = mongodb.MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionStringRedacted });\n        connection.on('close', () => {\n          logger.warn('close', { connectionStringRedacted });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection closed');\n          };\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionStringRedacted });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection timeout');\n          };\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionStringRedacted });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection!);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionStringRedacted, err });\n        });\n\n        this._connection = connection;\n        this._connecting = undefined;\n        this.getConnection = () => Promise.resolve(this._connection!);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionStringRedacted });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<mongodb.MongoClient> {\n    throw new Error('call connect()');\n  }\n\n  async close(): Promise<void> {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      await this._connection.close();\n      this._connection = undefined;\n    } else if (this._connecting) {\n      await this._connecting;\n      await this.close();\n    }\n  }\n}\n","import { SubscribeStore } from 'liwi-subscribe-store';\nimport type { AllowedKeyValue } from 'liwi-types';\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from './MongoBaseModel';\nimport type MongoConnection from './MongoConnection';\nimport type MongoStore from './MongoStore';\n\nexport default function createMongoSubscribeStore<\n  Model extends MongoBaseModel<KeyValue>,\n  KeyValue extends AllowedKeyValue = Model[MongoKeyPath],\n>(\n  mongoStore: MongoStore<Model, KeyValue>,\n): SubscribeStore<\n  MongoKeyPath,\n  KeyValue,\n  Model,\n  MongoInsertType<Model, KeyValue>,\n  MongoConnection,\n  MongoStore<Model, KeyValue>\n> {\n  return new SubscribeStore(mongoStore);\n}\n"],"names":["MongoCursor","AbstractStoreCursor","constructor","store","cursor","advance","count","skip","next","then","value","_result","key","_id","limit","newLimit","Promise","resolve","result","Error","close","toArray","identityTransformer","model","MongoQueryCollection","AbstractSubscribableStoreQuery","options","transformer","createTestCriteria","testCriteria","criteria","mingoQuery","mingo","Query","test","bind","fetch","onFulfilled","all","createMongoCursor","map","meta","total","info","sort","keyPath","_subscribe","callback","_includeInitial","getSubscribeStore","promise","type","initial","queryInfo","unsubscribe","subscribe","action","changes","filtered","filter","length","push","prev","keys","object","deleted","updated","inserted","forEach","prevObject","nextObject","stop","cancel","onRejected","MongoQuerySingleItem","createMingoTestCriteria","item","res","MongoStore","connection","collectionName","_collection","getConnection","client","db","collection","err","reject","connectionFailed","createQuerySingleItem","createQueryCollection","insertOne","mongodb","ObjectId","toString","created","Date","acknowledged","isAcknowledged","replaceOne","upsertOne","setOnInsertPartialObject","upsertOneWithInfo","$setOnInsert","$set","upsertedCount","updateOne","upsert","Object","assign","replaceSeveral","objects","partialUpdateByKey","partialUpdate","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","updateMany","undefined","deleteByKey","deleteOne","deleteMany","selector","countDocuments","findCursor","find","findOne","findAll","logger","Logger","MongoConnection","AbstractConnection","config","has","set","buildConnectionString","redactCredentials","get","slice","connectionString","connectionStringRedacted","connect","connectPromise","MongoClient","on","warn","_connection","_connecting","catch","message","process","nextTick","exit","createMongoSubscribeStore","mongoStore","SubscribeStore"],"mappings":";;;;;;;;;;;;;;;AAMe,MAAMA,WAAN,SAILC,6BAJK,CASb;AACA;AAMAC,EAAAA,WAAW,CAACC,KAAD,EAAqCC,MAArC,EAAiE;AAC1E,UAAMD,KAAN;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDC,EAAAA,OAAO,CAACC,KAAD,EAAsB;AAC3B,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,KAAjB;AACD;;AAEDE,EAAAA,IAAI,GAAkC;AACpC,WAAO,KAAKJ,MAAL,CAAYI,IAAZ,GAAmBC,IAAnB,CAAyBC,KAAD,IAAW;AACxC,WAAKC,OAAL,GAAeD,KAAf;AACA,WAAKE,GAAL,GAAWF,KAAK,EAAEG,GAAlB;AACA,aAAO,KAAKD,GAAZ;AACD,KAJM,CAAP;AAKD;;AAEDE,EAAAA,KAAK,CAACC,QAAD,EAAkC;AACrC,SAAKX,MAAL,CAAYU,KAAZ,CAAkBC,QAAlB;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDC,EAAAA,MAAM,GAAoB;AACxB,QAAI,CAAC,KAAKP,OAAV,EAAmB,MAAM,IAAIQ,KAAJ,CAAU,oCAAV,CAAN;AACnB,WAAOH,OAAO,CAACC,OAAR,CAAgB,KAAKN,OAArB,CAAP;AACD;;AAEDS,EAAAA,KAAK,GAAkB;AACrB,QAAI,KAAKhB,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYgB,KAAZ;AACD;;AAED,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDI,EAAAA,OAAO,GAAsB;AAC3B,WAAO,KAAKjB,MAAL,CAAYiB,OAAZ,EAAP;AACD;;AA5CD;;ACfF;;AAwBA,MAAMC,qBAAmB,GAIvBC,KAJ0B,IAKVA,KALlB;;AASe,MAAMC,oBAAN,SAKLC,iDALK,CAYb;AASAvB,EAAAA,WAAW,CACTC,KADS,EAETuB,OAFS,EAGTC,WAAqC,GAAGL,qBAH/B,EAIT;AACA;AACA,SAAKnB,KAAL,GAAaA,KAAb;AACA,SAAKuB,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEDC,EAAAA,kBAAkB,GAAiB;AACjC,QAAI,CAAC,KAAKC,YAAV,EAAwB;AACtB,UAAI,CAAC,KAAKH,OAAL,CAAaI,QAAlB,EAA4B;AAC1B,eAAO,MAAM,IAAb;AACD;;AAED,YAAMC,UAAU,GAAG,IAAIC,cAAK,CAACC,KAAV,CAAgB,KAAKP,OAAL,CAAaI,QAA7B,CAAnB;AACA,WAAKD,YAAL,GAAoBE,UAAU,CAACG,IAAX,CAAgBC,IAAhB,CAAqBJ,UAArB,CAApB;AACD;;AACD,WAAO,KAAKF,YAAZ;AACD;;AAEU,QAALO,KAAK,CAAIC,WAAJ,EAAiE;AAC1E,UAAM,CAACnB,MAAD,EAASZ,KAAT,IAAkB,MAAMU,OAAO,CAACsB,GAAR,CAAY,CACxC,KAAKC,iBAAL,GAAyB9B,IAAzB,CAA+BL,MAAD,IAAYA,MAAM,CAACiB,OAAP,EAA1C,CADwC,EAExC,KAAKlB,KAAL,CAAWG,KAAX,EAFwC,CAAZ,CAA9B;AAKA,WAAO+B,WAAW,CAAC;AACjBnB,MAAAA,MAAM,EAAEA,MAAM,CAACsB,GAAP,CAAW,KAAKb,WAAhB,CADS;AAEjBc,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAEpC;AAAT,OAFW;AAGjBqC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE,KAAKlB,OAAL,CAAakB,IADf;AAEJ9B,QAAAA,KAAK,EAAE,KAAKY,OAAL,CAAaZ,KAFhB;AAGJ+B,QAAAA,OAAO,EAAE,KAAK1C,KAAL,CAAW0C;AAHhB;AAHW,KAAD,CAAlB;AASD;;AAEDC,EAAAA,UAAU,CACRC,QADQ,EAERC,eAFQ,EAGW;AACnB,UAAM7C,KAAK,GAAG,MAAM8C,iBAAN,EAAd;AACA,UAAMpB,YAA0B,GAAG,KAAKD,kBAAL,EAAnC;AAEA,UAAMsB,OAAsB,GAAGF,eAAe,GAC1C,KAAKZ,KAAL,CAAW,CAAC;AAAElB,MAAAA,MAAF;AAAUuB,MAAAA,IAAV;AAAgBE,MAAAA;AAAhB,KAAD,KAAiD;AAC1DI,MAAAA,QAAQ,CAAC,IAAD,EAAO,CACb;AACEI,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,OAAO,EAAElC,MAFX;AAGEmC,QAAAA,SAAS,EAAEV,IAHb;AAIEF,QAAAA;AAJF,OADa,CAAP,CAAR;AAQD,KATD,CAD0C,GAW1CzB,OAAO,CAACC,OAAR,EAXJ;AAaA,UAAMqC,WAAW,GAAGnD,KAAK,CAACoD,SAAN,CAAiBC,MAAD,IAA4B;AAC9D,YAAMC,OAAkC,GAAG,EAA3C;;AACA,cAAQD,MAAM,CAACL,IAAf;AACE,aAAK,UAAL;AAAiB;AACf,kBAAMO,QAAQ,GAAGF,MAAM,CAAChD,IAAP,CAAYmD,MAAZ,CAAmB9B,YAAnB,CAAjB;;AACA,gBAAI6B,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AACXV,gBAAAA,IAAI,EAAE,UADK;AAEXjC,gBAAAA,MAAM,EAAEwC,QAAQ,CAAClB,GAAT,CAAa,KAAKb,WAAlB;AAFG,eAAb;AAID;;AACD;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,kBAAM+B,QAAQ,GAAGF,MAAM,CAACM,IAAP,CAAYH,MAAZ,CAAmB9B,YAAnB,CAAjB;;AACA,gBAAI6B,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AACXV,gBAAAA,IAAI,EAAE,SADK;AAEXY,gBAAAA,IAAI,EAAEL,QAAQ,CAAClB,GAAT,CAAcwB,MAAD,IAAYA,MAAM,CAAC,KAAK7D,KAAL,CAAW0C,OAAZ,CAA/B;AAFK,eAAb;AAID;;AACD;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,kBAAM;AACJoB,cAAAA,OADI;AAEJC,cAAAA,OAFI;AAGJC,cAAAA;AAHI,gBAQF;AAAEF,cAAAA,OAAO,EAAE,EAAX;AAAeC,cAAAA,OAAO,EAAE,EAAxB;AAA4BC,cAAAA,QAAQ,EAAE;AAAtC,aARJ;AAUAX,YAAAA,MAAM,CAACC,OAAP,CAAeW,OAAf,CAAuB,CAAC,CAACC,UAAD,EAAaC,UAAb,CAAD,KAA8C;AACnE,kBAAIzC,YAAY,CAACwC,UAAD,CAAhB,EAA8B;AAC5B,oBAAI,CAACxC,YAAY,CAACyC,UAAD,CAAjB,EAA+B;AAC7BL,kBAAAA,OAAO,CAACJ,IAAR,CAAaQ,UAAU,CAAC,KAAKlE,KAAL,CAAW0C,OAAZ,CAAvB;AACD,iBAFD,MAEO;AACLqB,kBAAAA,OAAO,CAACL,IAAR,CAAa,KAAKlC,WAAL,CAAiB2C,UAAjB,CAAb;AACD;AACF,eAND,MAMO,IAAIzC,YAAY,CAACyC,UAAD,CAAhB,EAA8B;AACnCH,gBAAAA,QAAQ,CAACN,IAAT,CAAc,KAAKlC,WAAL,CAAiB2C,UAAjB,CAAd;AACD;AACF,aAVD;;AAYA,gBAAIL,OAAO,CAACL,MAAR,GAAiB,CAArB,EAAwB;AACtBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AAAEV,gBAAAA,IAAI,EAAE,SAAR;AAAmBY,gBAAAA,IAAI,EAAEE;AAAzB,eAAb;AACD;;AACD,gBAAIC,OAAO,CAACN,MAAR,GAAiB,CAArB,EAAwB;AACtBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AAAEV,gBAAAA,IAAI,EAAE,SAAR;AAAmBjC,gBAAAA,MAAM,EAAEgD;AAA3B,eAAb;AACD;;AACD,gBAAIC,QAAQ,CAACP,MAAT,GAAkB,CAAtB,EAAyB;AACvBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AAAEV,gBAAAA,IAAI,EAAE,UAAR;AAAoBjC,gBAAAA,MAAM,EAAEiD;AAA5B,eAAb;AACD;;AAED;AACD;;AACD;AACE,gBAAM,IAAIhD,KAAJ,CAAU,kBAAV,CAAN;AAzDJ;;AA4DA,UAAIsC,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AAE1Bb,MAAAA,QAAQ,CAAC,IAAD,EAAOU,OAAP,CAAR;AACD,KAjEmB,CAApB,CAjBmB;AAoFnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO;AACLc,MAAAA,IAAI,EAAEjB,WADD;AAELkB,MAAAA,MAAM,EAAElB,WAFH;AAGL7C,MAAAA,IAAI,EAAE,CACJ4B,WADI,EAEJoC,UAFI,KAGevB,OAAO,CAACzC,IAAR,CAAa4B,WAAb,EAA0BoC,UAA1B;AANhB,KAAP;AAQD;;AAE8B,QAAjBlC,iBAAiB,GAE7B;AACA,UAAMnC,MAAM,GAAG,MAAM,KAAKD,KAAL,CAAWC,MAAX,CACnB,KAAKsB,OAAL,CAAaI,QADM,EAEnB,KAAKJ,OAAL,CAAakB,IAFM,CAArB;;AAKA,QAAI,KAAKlB,OAAL,CAAanB,IAAjB,EAAuB;AACrBH,MAAAA,MAAM,CAACC,OAAP,CAAe,KAAKqB,OAAL,CAAanB,IAA5B;AACD;;AAED,QAAI,KAAKmB,OAAL,CAAaZ,KAAjB,EAAwB;AACtB,YAAMV,MAAM,CAACU,KAAP,CAAa,KAAKY,OAAL,CAAaZ,KAA1B,CAAN;AACD;;AAED,WAAOV,MAAP;AACD;;AAtLD;;ACtBF,MAAMkB,mBAAmB,GAIvBC,KAJ0B,IAKVA,KALlB;;AASe,MAAMmD,oBAAN,SAKLjD,iDALK,CAYb;AASAvB,EAAAA,WAAW,CACTC,KADS,EAETuB,OAFS,EAGTC,WAAuC,GAAGL,mBAHjC,EAIT;AACA;AACA,SAAKnB,KAAL,GAAaA,KAAb;AACA,SAAKuB,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEDgD,EAAAA,uBAAuB,GAAiB;AACtC,QAAI,CAAC,KAAK9C,YAAV,EAAwB;AACtB,UAAI,CAAC,KAAKH,OAAL,CAAaI,QAAlB,EAA4B;AAC1B,eAAO,MAAM,IAAb;AACD;;AAED,YAAMC,UAAU,GAAG,IAAIC,cAAK,CAACC,KAAV,CAAgB,KAAKP,OAAL,CAAaI,QAA7B,CAAnB;AACA,WAAKD,YAAL,GAAoBE,UAAU,CAACG,IAAX,CAAgBC,IAAhB,CAAqBJ,UAArB,CAApB;AACD;;AAED,WAAO,KAAKF,YAAZ;AACD;;AAEU,QAALO,KAAK,CAAIC,WAAJ,EAAiE;AAC1E,UAAMjC,MAAM,GAAG,MAAM,KAAKmC,iBAAL,EAArB;AACA,UAAMnC,MAAM,CAACU,KAAP,CAAa,CAAb,CAAN;AACA,WAAOV,MAAM,CAACiB,OAAP,GAAiBZ,IAAjB,CAAuBS,MAAD,IAAqB;AAChD,YAAM0D,IAAY,GAChB1D,MAAM,CAAC0C,MAAP,KAAkB,CAAlB,GAAuB,IAAvB,GAAyC,KAAKjC,WAAL,CAAiBT,MAAM,CAAC,CAAD,CAAvB,CAD3C;AAEA,aAAOmB,WAAW,CAAC;AACjBnB,QAAAA,MAAM,EAAE0D,IADS;AAEjBnC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAExB,MAAM,KAAK,IAAX,GAAkB,CAAlB,GAAsB;AAA/B,SAFW;AAGjByB,QAAAA,IAAI,EAAE;AACJ7B,UAAAA,KAAK,EAAE,CADH;AAEJ+B,UAAAA,OAAO,EAAE,KAAK1C,KAAL,CAAW0C;AAFhB;AAHW,OAAD,CAAlB;AAQD,KAXM,CAAP;AAYD;;AAEDC,EAAAA,UAAU,CACRC,QADQ,EAERC,eAFQ,EAGW;AACnB,UAAM7C,KAAK,GAAG,MAAM8C,iBAAN,EAAd;AACA,UAAMpB,YAA0B,GAAG,KAAK8C,uBAAL,EAAnC;AAEA,UAAMzB,OAAsB,GAAGF,eAAe,GAC1C,KAAKZ,KAAL,CAAW,CAAC;AAAElB,MAAAA,MAAF;AAAUuB,MAAAA,IAAV;AAAgBE,MAAAA;AAAhB,KAAD,KAAiD;AAC1DI,MAAAA,QAAQ,CAAC,IAAD,EAAO,CACb;AACEI,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,OAAO,EAAElC,MAFX;AAGEmC,QAAAA,SAAS,EAAEV,IAHb;AAIEF,QAAAA;AAJF,OADa,CAAP,CAAR;AAQD,KATD,CAD0C,GAW1CzB,OAAO,CAACC,OAAR,EAXJ;AAaA,UAAMqC,WAAW,GAAGnD,KAAK,CAACoD,SAAN,CAAgB,MAAOC,MAAP,IAAkC;AACpE,YAAMC,OAAkC,GAAG,EAA3C;;AACA,cAAQD,MAAM,CAACL,IAAf;AACE,aAAK,UAAL;AAAiB;AACf,kBAAMO,QAAQ,GAAGF,MAAM,CAAChD,IAAP,CAAYmD,MAAZ,CAAmB9B,YAAnB,CAAjB;;AACA,gBAAI6B,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AACXV,gBAAAA,IAAI,EAAE,SADK;AAEXjC,gBAAAA,MAAM,EAAE,KAAKS,WAAL,CAAiB+B,QAAQ,CAAC,CAAD,CAAzB;AAFG,eAAb;AAID;;AACD;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,kBAAMA,QAAQ,GAAGF,MAAM,CAACM,IAAP,CAAYH,MAAZ,CAAmB9B,YAAnB,CAAjB;;AACA,gBAAI6B,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBH,cAAAA,OAAO,CAACI,IAAR,CAAa;AACXV,gBAAAA,IAAI,EAAE,SADK;AAEXY,gBAAAA,IAAI,EAAEL,QAAQ,CAAClB,GAAT,CAAcwB,MAAD,IAAYA,MAAM,CAAC,KAAK7D,KAAL,CAAW0C,OAAZ,CAA/B;AAFK,eAAb;AAID;;AACD;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,kBAAMa,QAAQ,GAAGF,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsB,CAAC,CAACG,IAAD,EAAOtD,IAAP,CAAD,KACrCqB,YAAY,CAACiC,IAAD,CADG,CAAjB;;AAGA,gBAAIJ,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvB,kBAAI,KAAKlC,OAAL,CAAakB,IAAjB,EAAuB;AACrB,sBAAM;AAAE1B,kBAAAA;AAAF,oBAAa,MAAM,KAAKkB,KAAL,CAAYyC,GAAD,IAASA,GAApB,CAAzB;AACApB,gBAAAA,OAAO,CAACI,IAAR,CAAa;AACXV,kBAAAA,IAAI,EAAE,SADK;AAEXjC,kBAAAA;AAFW,iBAAb;AAID,eAND,MAMO,IAAIwC,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AAChC,sBAAM,IAAIzC,KAAJ,CACJ,uEADI,CAAN;AAGD,eAJM,MAIA;AACL,sBAAM,GAAGX,IAAH,IAAWkD,QAAQ,CAAC,CAAD,CAAzB;AACAD,gBAAAA,OAAO,CAACI,IAAR,CAAa;AACXV,kBAAAA,IAAI,EAAE,SADK;AAEXjC,kBAAAA,MAAM,EAAEW,YAAY,CAACrB,IAAD,CAAZ,GAAqB,KAAKmB,WAAL,CAAiBnB,IAAjB,CAArB,GAA8C;AAF3C,iBAAb;AAID;AACF,aAlBD,MAkBO,IAAIkD,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;;AAElC;AACD;;AACD;AACE,gBAAM,IAAIzC,KAAJ,CAAU,kBAAV,CAAN;AAhDJ;;AAmDA,UAAIsC,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AAE1Bb,MAAAA,QAAQ,CAAC,IAAD,EAAOU,OAAP,CAAR;AACD,KAxDmB,CAApB;AA0DA,WAAO;AACLc,MAAAA,IAAI,EAAEjB,WADD;AAELkB,MAAAA,MAAM,EAAElB,WAFH;AAGL7C,MAAAA,IAAI,EAAE,CACJ4B,WADI,EAEJoC,UAFI,KAGevB,OAAO,CAACzC,IAAR,CAAa4B,WAAb,EAA0BoC,UAA1B;AANhB,KAAP;AAQD;;AAE8B,QAAjBlC,iBAAiB,GAE7B;AACA,UAAMnC,MAAM,GAAG,MAAM,KAAKD,KAAL,CAAWC,MAAX,CACnB,KAAKsB,OAAL,CAAaI,QADM,EAEnB,KAAKJ,OAAL,CAAakB,IAFM,CAArB;;AAKA,QAAI,KAAKlB,OAAL,CAAaZ,KAAjB,EAAwB;AACtB,YAAMV,MAAM,CAACU,KAAP,CAAa,KAAKY,OAAL,CAAaZ,KAA1B,CAAN;AACD;;AAED,WAAOV,MAAP;AACD;;AAvJD;;AC5CF;AAyCe,MAAM0E,UAAN,CAWf;AACWjC,EAAAA,OAAO,GAAiB,KAAjB;;AAMhB3C,EAAAA,WAAW,CAAC6E,UAAD,EAA8BC,cAA9B,EAAsD;AAC/D,SAAKD,UAAL,GAAkBA,UAAlB;;AAEA,QAAI,CAACC,cAAL,EAAqB;AACnB,YAAM,IAAI7D,KAAJ,CAAW,4BAA2B6D,cAAe,GAArD,CAAN;AACD;;AAED,SAAKC,WAAL,GAAmBF,UAAU,CAACG,aAAX,GAA2BzE,IAA3B,CAChB0E,MAAD,IAAyB;AACvB,WAAKF,WAAL,GAAmBE,MAAM,CAACC,EAAP,GAAYC,UAAZ,CAAuBL,cAAvB,CAAnB;AACA,aAAO,KAAKC,WAAZ;AACD,KAJgB,EAKhBK,GAAD,IAAc;AACZ,WAAKL,WAAL,GAAmBjE,OAAO,CAACuE,MAAR,CAAeD,GAAf,CAAnB;AACA,aAAO,KAAKL,WAAZ;AACD,KARgB,CAAnB;AAUD;;AAEa,MAAVI,UAAU,GAA+B;AAC3C,QAAI,KAAKN,UAAL,CAAgBS,gBAApB,EAAsC;AACpC,aAAOxE,OAAO,CAACuE,MAAR,CAAe,IAAIpE,KAAJ,CAAU,2BAAV,CAAf,CAAP;AACD;;AAED,WAAOH,OAAO,CAACC,OAAR,CAAgB,KAAKgE,WAArB,CAAP;AACD;;AAEDQ,EAAAA,qBAAqB,CAInB/D,OAJmB,EAKnBC,WALmB,EAMoC;AACvD,WAAO,IAAI+C,oBAAJ,CACL,IADK,EAELhD,OAFK,EAGLC,WAHK,CAAP;AAKD;;AAED+D,EAAAA,qBAAqB,CAInBhE,OAJmB,EAKnBC,WALmB,EAMsC;AACzD,WAAO,IAAIH,oBAAJ,CACL,IADK,EAELE,OAFK,EAGLC,WAHK,CAAP;AAKD;;AAEc,QAATgE,SAAS,CAAC3B,MAAD,EAAiD;AAC9D,QAAI,CAACA,MAAM,CAACnD,GAAZ,EAAiB;AACfmD,MAAAA,MAAM,CAACnD,GAAP,GAAa,IAAI+E,gBAAO,CAACC,QAAZ,GAAuBC,QAAvB,EAAb;AACD;;AAED,QAAI,CAAC9B,MAAM,CAAC+B,OAAZ,EAAqB/B,MAAM,CAAC+B,OAAP,GAAiB,IAAIC,IAAJ,EAAjB;AACrB,QAAI,CAAChC,MAAM,CAACE,OAAZ,EAAqBF,MAAM,CAACE,OAAP,GAAiB,IAAI8B,IAAJ,EAAjB;AAErB,UAAMX,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,UAAM;AAAEY,MAAAA,YAAY,EAAEC;AAAhB,QAAmC,MAAMb,UAAU,CAACM,SAAX;AAE7C3B,IAAAA,MAF6C,CAA/C;;AAIA,QAAI,CAACkC,cAAL,EAAqB;AACnB,YAAM,IAAI/E,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,WAAO6C,MAAP;AACD;;AAEe,QAAVmC,UAAU,CAACnC,MAAD,EAAgC;AAC9C,QAAI,CAACA,MAAM,CAACE,OAAZ,EAAqBF,MAAM,CAACE,OAAP,GAAiB,IAAI8B,IAAJ,EAAjB;AAErB,UAAMX,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,UAAMA,UAAU,CAACc,UAAX,CAAsB;AAAEtF,MAAAA,GAAG,EAAEmD,MAAM,CAACnD;AAAd,KAAtB,EAA8DmD,MAA9D,CAAN;AACA,WAAOA,MAAP;AACD;;AAEc,QAAToC,SAAS,CAMbpC,MANa,EAObqC,wBAPa,EAQG;AAChB,UAAMnF,MAAM,GAAG,MAAM,KAAKoF,iBAAL,CACnBtC,MADmB,EAEnBqC,wBAFmB,CAArB;AAIA,WAAOnF,MAAM,CAAC8C,MAAd;AACD;;AAEsB,QAAjBsC,iBAAiB,CAMrBtC,MANqB,EAOrBqC,wBAPqB,EAQwB;AAC7C,UAAME,YAAY,GAAG;AACnBR,MAAAA,OAAO,EAAE/B,MAAM,CAAC+B,OAAP,IAAkB,IAAIC,IAAJ,EADR;AAEnB,SAAGK;AAFgB,KAArB;;AAKA,QAAI,CAACrC,MAAM,CAACE,OAAZ,EAAqB;AAClBF,MAAAA,MAAD,CAA2BE,OAA3B,GAAqC,IAAI8B,IAAJ,EAArC;AACD;;AAED,UAAMQ,IAA4B,GAAG,EAAE,GAAGxC;AAAL,KAArC;AACA,WAAOwC,IAAI,CAACT,OAAZ;AAEA,UAAMV,UAAU,GAAG,MAAM,KAAKA,UAA9B;AAEA,UAAM;AAAEoB,MAAAA;AAAF,QAAoB,MAAMpB,UAAU,CAACqB,SAAX,CAC9B;AAAE7F,MAAAA,GAAG,EAAEmD,MAAM,CAACnD;AAAd,KAD8B,EAE9B;AAAE2F,MAAAA,IAAF;AAAQD,MAAAA;AAAR,KAF8B,EAG9B;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAH8B,CAAhC;;AAMA,QAAIF,aAAJ,EAAmB;AACjBG,MAAAA,MAAM,CAACC,MAAP,CAAc7C,MAAd,EAAsBuC,YAAtB;AACD;;AAED,WAAO;AAAEvC,MAAAA,MAAM,EAAEA,MAAV;AAAsCG,MAAAA,QAAQ,EAAE,CAAC,CAACsC;AAAlD,KAAP;AACD;;AAEDK,EAAAA,cAAc,CAACC,OAAD,EAAqC;AACjD,WAAO/F,OAAO,CAACsB,GAAR,CAAYyE,OAAO,CAACvE,GAAR,CAAawB,MAAD,IAAmB,KAAKmC,UAAL,CAAgBnC,MAAhB,CAA/B,CAAZ,CAAP;AACD;;AAEuB,QAAlBgD,kBAAkB,CACtBpG,GADsB,EAEtBqG,aAFsB,EAGtBnF,QAHsB,EAIN;AAChB,UAAMuD,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,UAAM6B,aAAa,GAAG,MAAM7B,UAAU,CAACqB,SAAX,CAC1B;AAAE7F,MAAAA,GAAG,EAAED,GAAP;AAAY,SAAGkB;AAAf,KAD0B,EAE1BmF,aAF0B,CAA5B;;AAIA,QAAI,CAACC,aAAa,CAACjB,YAAnB,EAAiC;AAC/BkB,MAAAA,OAAO,CAACC,KAAR,CAAcF,aAAd;AACA,YAAM,IAAI/F,KAAJ,CAAU,eAAV,CAAN;AACD;;AACD,UAAM6C,MAAM,GAAG,MAAM,KAAKqD,SAAL,CAAezG,GAAf,CAArB;AACA,WAAOoD,MAAP;AACD;;AAEDsD,EAAAA,gBAAgB,CACdtD,MADc,EAEdiD,aAFc,EAGE;AAChB,WAAO,KAAKD,kBAAL,CAAwBhD,MAAM,CAACnD,GAA/B,EAAoCoG,aAApC,CAAP;AACD;;AAEDM,EAAAA,iBAAiB,CACfzF,QADe,EAEfmF,aAFe,EAGA;AACf,WAAO,KAAK5B,UAAL,CACJ5E,IADI,CACE4E,UAAD;AAEJA,IAAAA,UAAU,CAACmC,UAAX,CAAsB1F,QAAtB,EAAgCmF,aAAhC,CAHG,EAKJxG,IALI,CAKC,MAASgH,SALV,CAAP,CADe;AAOhB;;AAEDC,EAAAA,WAAW,CAAC9G,GAAD,EAAgBkB,QAAhB,EAA2D;AACpE,WAAO,KAAKuD,UAAL,CACJ5E,IADI,CACE4E,UAAD,IACJA,UAAU,CAACsC,SAAX,CAAqB;AAAE9G,MAAAA,GAAG,EAAED,GAAP;AAAY,SAAGkB;AAAf,KAArB,CAFG,EAIJrB,IAJI,CAIC,MAAMgH,SAJP,CAAP;AAKD;;AAEDE,EAAAA,SAAS,CAAC3D,MAAD,EAA+B;AACtC,WAAO,KAAK0D,WAAL,CAAiB1D,MAAM,CAACnD,GAAxB,CAAP;AACD;;AAED+G,EAAAA,UAAU,CAACC,QAAD,EAA2C;AACnD,WAAO,KAAKxC,UAAL,CACJ5E,IADI,CACE4E,UAAD,IAAgBA,UAAU,CAACuC,UAAX,CAAsBC,QAAtB,CADjB,EAEJpH,IAFI,CAEC,MAAMgH,SAFP,CAAP;AAGD;;AAEU,QAALnH,KAAK,CAACqD,MAAD,EAA4C;AACrD,UAAM0B,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,WAAO1B,MAAM,GACT0B,UAAU,CAACyC,cAAX,CAA0BnE,MAA1B,CADS,GAET0B,UAAU,CAACyC,cAAX,EAFJ;AAGD;;AAEW,QAAN1H,MAAM,CACVuD,MADU,EAEVf,IAFU,EAGqC;AAC/C,UAAMyC,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,UAAM0C,UAAU,GAAGpE,MAAM,GACrB0B,UAAU,CAAC2C,IAAX,CAAwBrE,MAAxB,CADqB,GAEpB0B,UAAU,CAAC2C,IAAX,EAFL;AAGA,QAAIpF,IAAJ,EAAUmF,UAAU,CAACnF,IAAX,CAAgBA,IAAhB;AACV,WAAO,IAAI5C,WAAJ,CAAyC,IAAzC,EAA+C+H,UAA/C,CAAP;AACD;;AAEc,QAATV,SAAS,CACbzG,GADa,EAEbkB,QAFa,EAGe;AAC5B,UAAMuD,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,UAAMnE,MAAM,GAAG,MAAMmE,UAAU,CAAC4C,OAAX,CAA0B;AAC7CpH,MAAAA,GAAG,EAAED,GADwC;AAE7C,SAAGkB;AAF0C,KAA1B,CAArB;AAIA,WAAOZ,MAAM,IAAIuG,SAAjB;AACD;;AAEDS,EAAAA,OAAO,CAACpG,QAAD,EAA6Bc,IAA7B,EAAmE;AACxE,WAAO,KAAKxC,MAAL,CAAmB0B,QAAnB,EAA6Bc,IAA7B,EAAmCnC,IAAnC,CAAyCL,MAAD,IAC7CA,MAAM,CAACiB,OAAP,EADK,CAAP;AAGD;;AAEY,QAAP4G,OAAO,CACXtE,MADW,EAEXf,IAFW,EAGiB;AAC5B,UAAMyC,UAAU,GAAG,MAAM,KAAKA,UAA9B;AACA,UAAMnE,MAAM,GAAG,MAAMmE,UAAU,CAAC4C,OAAX,CAA0BtE,MAA1B,EAAkC;AACrDf,MAAAA;AADqD,KAAlC,CAArB;AAGA,WAAO1B,MAAM,IAAIuG,SAAjB;AACD;;AAvPH;;AChDA,MAAMU,MAAM,GAAG,IAAIC,wBAAJ,CAAW,4BAAX,CAAf;AAEe,MAAMC,eAAN,SAA8BC,4BAA9B,CAAiD;AAO9D;AACApI,EAAAA,WAAW,CAACqI,MAAD,EAAuC;AAChD;;AAEA,QAAI,CAACA,MAAM,CAACC,GAAP,CAAW,MAAX,CAAL,EAAyB;AACvBD,MAAAA,MAAM,CAACE,GAAP,CAAW,MAAX,EAAmB,WAAnB;AACD;;AACD,QAAI,CAACF,MAAM,CAACC,GAAP,CAAW,MAAX,CAAL,EAAyB;AACvBD,MAAAA,MAAM,CAACE,GAAP,CAAW,MAAX,EAAmB,OAAnB;AACD;;AACD,QAAI,CAACF,MAAM,CAACC,GAAP,CAAW,UAAX,CAAL,EAA6B;AAC3B,YAAM,IAAIrH,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,UAAMuH,qBAAqB,GAAIC,iBAAD,IAC3B,aACCJ,MAAM,CAACC,GAAP,CAAW,MAAX,IACK,GACCG,iBAAiB,GACZ,GAAGJ,MAAM,CAACK,GAAP,CAAW,MAAX,CAAD,CAA+BC,KAA/B,CAAqC,CAArC,EAAwC,CAAxC,CAA2C,YADjC,GAEZN,MAAM,CAACK,GAAP,CAAW,MAAX,CACN,IACCD,iBAAiB,GACb,YADa,GAEZJ,MAAM,CAACK,GAAP,CAAW,UAAX,CACN,GATL,GAUI,EACL,EAZD,GAaC,GAAEL,MAAM,CAACK,GAAP,CAAW,MAAX,CAA6B,IAAGL,MAAM,CAACK,GAAP,CAAW,MAAX,CAA6B,IAC9DL,MAAM,CAACK,GAAP,CAAW,UAAX,CACD,EAhBH;;AAkBA,UAAME,gBAAgB,GAAGJ,qBAAqB,CAAC,KAAD,CAA9C;AACA,UAAMK,wBAAwB,GAAGL,qBAAqB,CAAC,IAAD,CAAtD;AAEA,SAAKM,OAAL,CAAaF,gBAAb,EAA+BC,wBAA/B;AACD;;AAEDC,EAAAA,OAAO,CAACF,gBAAD,EAA2BC,wBAA3B,EAAmE;AACxEZ,IAAAA,MAAM,CAACxF,IAAP,CAAY,YAAZ,EAA0B;AAAEoG,MAAAA;AAAF,KAA1B;AAEA,UAAME,cAAc,GAAGrD,gBAAO,CAACsD,WAAR,CAAoBF,OAApB,CAA4BF,gBAA5B,EACpBrI,IADoB,CACdsE,UAAD,IAAgB;AACpBoD,MAAAA,MAAM,CAACxF,IAAP,CAAY,WAAZ,EAAyB;AAAEoG,QAAAA;AAAF,OAAzB;AACAhE,MAAAA,UAAU,CAACoE,EAAX,CAAc,OAAd,EAAuB,MAAM;AAC3BhB,QAAAA,MAAM,CAACiB,IAAP,CAAY,OAAZ,EAAqB;AAAEL,UAAAA;AAAF,SAArB;AACA,aAAKvD,gBAAL,GAAwB,IAAxB;;AACA,aAAKN,aAAL,GAAqB,MAAM;AACzB,gBAAM,IAAI/D,KAAJ,CAAU,2BAAV,CAAN;AACD,SAFD;AAGD,OAND;AAOA4D,MAAAA,UAAU,CAACoE,EAAX,CAAc,SAAd,EAAyB,MAAM;AAC7BhB,QAAAA,MAAM,CAACiB,IAAP,CAAY,SAAZ,EAAuB;AAAEL,UAAAA;AAAF,SAAvB;AACA,aAAKvD,gBAAL,GAAwB,IAAxB;;AACA,aAAKN,aAAL,GAAqB,MAAM;AACzB,gBAAM,IAAI/D,KAAJ,CAAU,4BAAV,CAAN;AACD,SAFD;AAGD,OAND;AAOA4D,MAAAA,UAAU,CAACoE,EAAX,CAAc,WAAd,EAA2B,MAAM;AAC/BhB,QAAAA,MAAM,CAACiB,IAAP,CAAY,WAAZ,EAAyB;AAAEL,UAAAA;AAAF,SAAzB;AACA,aAAKvD,gBAAL,GAAwB,KAAxB;;AACA,aAAKN,aAAL,GAAqB,MAAMlE,OAAO,CAACC,OAAR,CAAgB,KAAKoI,WAArB,CAA3B;AACD,OAJD;AAKAtE,MAAAA,UAAU,CAACoE,EAAX,CAAc,OAAd,EAAwB7D,GAAD,IAAS;AAC9B6C,QAAAA,MAAM,CAACiB,IAAP,CAAY,OAAZ,EAAqB;AAAEL,UAAAA,wBAAF;AAA4BzD,UAAAA;AAA5B,SAArB;AACD,OAFD;AAIA,WAAK+D,WAAL,GAAmBtE,UAAnB;AACA,WAAKuE,WAAL,GAAmB7B,SAAnB;;AACA,WAAKvC,aAAL,GAAqB,MAAMlE,OAAO,CAACC,OAAR,CAAgB,KAAKoI,WAArB,CAA3B;;AACA,aAAOtE,UAAP;AACD,KA9BoB,EA+BpBwE,KA/BoB,CA+BbjE,GAAD,IAAS;AACd6C,MAAAA,MAAM,CAACxF,IAAP,CAAY,eAAZ,EAA6B;AAAEoG,QAAAA;AAAF,OAA7B;AACA5B,MAAAA,OAAO,CAACC,KAAR,CAAc9B,GAAG,CAACkE,OAAJ,IAAelE,GAA7B,EAFc;;AAIdmE,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB;AACAD,QAAAA,OAAO,CAACE,IAAR,CAAa,CAAb;AACD,OAHD;AAKA,YAAMrE,GAAN;AACD,KAzCoB,CAAvB;;AA2CA,SAAKJ,aAAL,GAAqB,MAAMlE,OAAO,CAACC,OAAR,CAAgBgI,cAAhB,CAA3B;;AACA,SAAKK,WAAL,GAAmB,KAAKpE,aAAL,EAAnB;AACD;;AAEDA,EAAAA,aAAa,GAAiC;AAC5C,UAAM,IAAI/D,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAEU,QAALC,KAAK,GAAkB;AAC3B,SAAK8D,aAAL,GAAqB,MAAMlE,OAAO,CAACuE,MAAR,CAAe,IAAIpE,KAAJ,CAAU,mBAAV,CAAf,CAA3B;;AACA,QAAI,KAAKkI,WAAT,EAAsB;AACpB,YAAM,KAAKA,WAAL,CAAiBjI,KAAjB,EAAN;AACA,WAAKiI,WAAL,GAAmB5B,SAAnB;AACD,KAHD,MAGO,IAAI,KAAK6B,WAAT,EAAsB;AAC3B,YAAM,KAAKA,WAAX;AACA,YAAM,KAAKlI,KAAL,EAAN;AACD;AACF;;AA5G6D;;ACIjD,SAASwI,yBAAT,CAIbC,UAJa,EAYb;AACA,SAAO,IAAIC,iCAAJ,CAAmBD,UAAnB,CAAP;AACD;;;;;;"}