{"version":3,"file":"index-node8.es.js","sources":["../src/MongoCursor.js","../src/MongoStore.js","../src/MongoConnection.js"],"sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport { AbstractCursor, type ResultType } from 'liwi-store';\nimport MongoStore from './MongoStore';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n  constructor(store: MongoStore, cursor: Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this._cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this._cursor.next().then(value => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = undefined;\n      this._store = undefined;\n      this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<ResultType>> {\n    return this._cursor.toArray();\n  }\n}\n","import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport { AbstractStore, type InsertType, type UpdateType, type ResultType } from 'liwi-store';\nimport MongoConnection from './MongoConnection';\nimport MongoCursor from './MongoCursor';\n\ntype MongoUpdateCommandResultType = {\n  connection: any,\n  matchedCount: number,\n  modifiedCount: number,\n  result: {| n: number, nModified: number, ok: number |},\n  upsertedCount: number,\n  upsertedId: null,\n};\n\nexport default class MongoStore extends AbstractStore<MongoConnection> {\n  _collection: Collection | Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (db: Db) => {\n        this._collection = db.collection(collectionName);\n        return this._collection;\n      },\n      (err: any) => {\n        this._collection = Promise.reject(err);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection =>\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true }),\n      )\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  async partialUpdateByKey(key: any, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    const collection = await this.collection;\n    const commandResult: MongoUpdateCommandResultType = await collection.updateOne(\n      { _id: key },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    return this.findByKey(key);\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: UpdateType): Promise<void> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection\n      .then(collection => collection.removeOne({ _id: key }))\n      .then(() => undefined);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ResultType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<?ResultType> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n","import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport { AbstractConnection } from 'liwi-store';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection: Db | null;\n  _connecting: Promise<void> | null;\n  connectionFailed: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}` +\n      `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then(connection => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection);\n        });\n        connection.on('error', err => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = null;\n        this.getConnection = () => Promise.resolve(this._connection);\n        return connection;\n      })\n      .catch(err => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.close().then(() => {\n        this._connection = null;\n      });\n    } else if (this._connecting) {\n      return this._connecting.then(() => this.close());\n    }\n  }\n}\n"],"names":["MongoCursor","AbstractCursor","store","cursor","_cursor","count","skip","next","then","value","_result","key","_id","newLimit","limit","Promise","resolve","applyLimit","close","undefined","_store","toArray","MongoStore","AbstractStore","connection","collectionName","keyPath","Error","_collection","getConnection","db","collection","err","reject","connectionFailed","object","ObjectID","toString","created","Date","insertOne","result","ops","ok","n","replaceOne","updated","updateOne","$set","upsert","objects","all","map","partialUpdate","Object","keys","some","partialUpdateByKey","_partialUpdate","commandResult","error","findByKey","criteria","updateMany","removeOne","sort","find","findOne","logger","Logger","MongoConnection","AbstractConnection","config","has","set","connectionString","get","connect","info","connectPromise","MongoClient","on","warn","_connection","_connecting","catch","message","nextTick","exit"],"mappings":"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"}