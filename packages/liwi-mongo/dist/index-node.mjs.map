{"version":3,"file":"index-node.mjs","sources":["../src/MongoCursor.ts","../src/MongoQueryCollection.ts","../src/MongoQuerySingleItem.ts","../src/MongoStore.ts","../src/MongoConnection.ts","../src/createMongoSubscribeStore.ts"],"sourcesContent":["import { AbstractStoreCursor } from \"liwi-store\";\nimport type { AllowedKeyValue } from \"liwi-store\";\nimport type { FindCursor } from \"mongodb\";\nimport type { MongoBaseModel } from \"./MongoBaseModel\";\nimport type MongoStore from \"./MongoStore\";\n\nexport default class MongoCursor<\n  Model extends MongoBaseModel<KeyValue>,\n  Result extends Partial<Model> = Model,\n  KeyValue extends AllowedKeyValue = Model[\"_id\"],\n> extends AbstractStoreCursor<\n  MongoStore<Model, KeyValue>,\n  KeyValue,\n  Model,\n  Result\n> {\n  // key in AbstractCursor\n\n  private readonly cursor: FindCursor<Result>;\n\n  private _result?: Result | null;\n\n  constructor(store: MongoStore<Model, KeyValue>, cursor: FindCursor<Result>) {\n    super(store);\n    this.cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  next(): Promise<KeyValue | undefined> {\n    return this.cursor.next().then((value) => {\n      this._result = value;\n      this.key = value?._id;\n      return this.key;\n    });\n  }\n\n  override async forEach(\n    callback: (result: Result) => Promise<void> | void,\n  ): Promise<void> {\n    for await (const result of this.cursor) {\n      await callback(result);\n    }\n  }\n\n  limit(newLimit: number): Promise<this> {\n    this.cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  override result(): Promise<Result> {\n    if (!this._result) throw new Error(\"Cannot call result() before next()\");\n    return Promise.resolve(this._result);\n  }\n\n  close(): Promise<void> {\n    if (this.cursor) {\n      this.cursor.close();\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Result[]> {\n    return this.cursor.toArray();\n  }\n}\n","/* eslint-disable complexity */\nimport type {\n  AllowedKeyValue,\n  Changes,\n  QueryOptions,\n  QueryParams,\n  QueryResult,\n  QuerySubscription,\n  SubscribeCallback,\n  Transformer,\n} from \"liwi-store\";\nimport type { Actions } from \"liwi-subscribe-store\";\nimport { AbstractSubscribableStoreQuery } from \"liwi-subscribe-store\";\nimport mingo from \"mingo\";\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from \"./MongoBaseModel\";\nimport type MongoCursor from \"./MongoCursor\";\nimport type MongoStore from \"./MongoStore\";\n\nconst identityTransformer = <\n  Model extends MongoBaseModel<any>,\n  Transformed = Model,\n>(\n  model: Model,\n): Transformed => model as unknown as Transformed;\n\ntype TestCriteria = (obj: any) => boolean;\n\nexport default class MongoQueryCollection<\n  Model extends MongoBaseModel<KeyValue>,\n  Params extends QueryParams<Params> = never,\n  KeyValue extends AllowedKeyValue = Model[\"_id\"],\n  Item extends Record<MongoKeyPath, KeyValue> = Model,\n> extends AbstractSubscribableStoreQuery<\n  MongoKeyPath,\n  KeyValue,\n  Model,\n  MongoInsertType<Model, KeyValue>,\n  Params,\n  Item[]\n> {\n  private readonly store: MongoStore<Model, KeyValue>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private testCriteria?: TestCriteria;\n\n  private readonly transformer: Transformer<Model, Item>;\n\n  constructor(\n    store: MongoStore<Model, KeyValue>,\n    options: QueryOptions<Model>,\n    transformer: Transformer<Model, Item> = identityTransformer,\n  ) {\n    super();\n    this.store = store;\n    this.options = options;\n    this.transformer = transformer;\n  }\n\n  createTestCriteria(): TestCriteria {\n    if (!this.testCriteria) {\n      if (!this.options.criteria) {\n        return () => true;\n      }\n\n      // criteria not supported by mingo: updates will not work\n      if (\"$text\" in this.options.criteria) {\n        return () => false;\n      }\n\n      const mingoQuery = new mingo.Query(this.options.criteria);\n      this.testCriteria = mingoQuery.test.bind(mingoQuery);\n    }\n    return this.testCriteria;\n  }\n\n  async fetch<T>(onFulfilled: (result: QueryResult<Item[]>) => T): Promise<T> {\n    const [result, count] = await Promise.all([\n      this.createMongoCursor().then((cursor) => cursor.toArray()),\n      this.store.count(this.options.criteria),\n    ]);\n\n    return onFulfilled({\n      result: result.map(this.transformer),\n      meta: { total: count },\n      info: {\n        sort: this.options.sort,\n        limit: this.options.limit,\n        keyPath: this.store.keyPath,\n      },\n    });\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<KeyValue, Item[]>,\n    _includeInitial: boolean,\n  ): QuerySubscription {\n    const store = super.getSubscribeStore();\n    const testCriteria: TestCriteria = this.createTestCriteria();\n\n    const promise: Promise<void> = _includeInitial\n      ? this.fetch(({ result, meta, info }: QueryResult<Item[]>) => {\n          callback(null, [\n            {\n              type: \"initial\",\n              initial: result,\n              queryInfo: info,\n              meta,\n            },\n          ]);\n        })\n      : Promise.resolve();\n\n    const unsubscribe = store.subscribe((action: Actions<Model>) => {\n      const changes: Changes<KeyValue, Item[]> = [];\n      switch (action.type) {\n        case \"inserted\": {\n          const filtered = action.next.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: \"inserted\",\n              result: filtered.map(this.transformer),\n            });\n          }\n          break;\n        }\n        case \"deleted\": {\n          const filtered = action.prev.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: \"deleted\",\n              keys: filtered.map((object) => object[this.store.keyPath]),\n            });\n          }\n          break;\n        }\n        case \"updated\": {\n          const {\n            deleted,\n            updated,\n            inserted,\n          }: {\n            deleted: KeyValue[];\n            updated: Item[];\n            inserted: Item[];\n          } = { deleted: [], updated: [], inserted: [] };\n\n          action.changes.forEach(([prevObject, nextObject]: [Model, Model]) => {\n            if (testCriteria(prevObject)) {\n              if (!testCriteria(nextObject)) {\n                deleted.push(prevObject[this.store.keyPath]);\n              } else {\n                updated.push(this.transformer(nextObject));\n              }\n            } else if (testCriteria(nextObject)) {\n              inserted.push(this.transformer(nextObject));\n            }\n          });\n\n          if (deleted.length > 0) {\n            changes.push({ type: \"deleted\", keys: deleted });\n          }\n          if (updated.length > 0) {\n            changes.push({ type: \"updated\", result: updated });\n          }\n          if (inserted.length > 0) {\n            changes.push({ type: \"inserted\", result: inserted });\n          }\n\n          break;\n        }\n        default:\n          throw new Error(\"Unsupported type\");\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n    // let _feed;\n    // const promise = this.queryCallback(this.store.query(), this.store.r)\n    //   .changes({\n    //     includeInitial: _includeInitial,\n    //     includeStates: true,\n    //     includeTypes: true,\n    //     includeOffsets: true,\n    //   })\n    //   .then((feed) => {\n    //     if (args.length === 0) {\n    //       _feed = feed;\n    //       delete this._promise;\n    //     }\n    //\n    //     feed.each(callback);\n    //     return feed;\n    //   });\n    //\n    // if (args.length === 0) this._promise = promise;\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: <T, U>(\n        onFulfilled: () => Promise<T> | T,\n        onRejected?: (error: any) => Promise<U> | U,\n      ): Promise<T | U> => promise.then(onFulfilled, onRejected),\n    };\n  }\n\n  private async createMongoCursor(): Promise<\n    MongoCursor<Model, Model, KeyValue>\n  > {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.skip) {\n      cursor.advance(this.options.skip);\n    }\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","import type {\n  AllowedKeyValue,\n  Changes,\n  QueryOptions,\n  QueryParams,\n  QueryResult,\n  QuerySubscription,\n  SubscribeCallback,\n  Transformer,\n} from \"liwi-store\";\nimport type { Actions } from \"liwi-subscribe-store\";\nimport { AbstractSubscribableStoreQuery } from \"liwi-subscribe-store\";\nimport mingo from \"mingo\";\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from \"./MongoBaseModel\";\nimport type MongoCursor from \"./MongoCursor\";\nimport type MongoStore from \"./MongoStore\";\n\nconst identityTransformer = <\n  Model extends MongoBaseModel<any>,\n  Transformed = Model,\n>(\n  model: Model,\n): Transformed => model as unknown as Transformed;\n\ntype TestCriteria = (obj: any) => boolean;\n\nexport default class MongoQuerySingleItem<\n  Model extends MongoBaseModel<KeyValue>,\n  Params extends QueryParams<Params> = never,\n  Result extends Record<MongoKeyPath, KeyValue> | null = Model | null,\n  KeyValue extends AllowedKeyValue = Model[\"_id\"],\n> extends AbstractSubscribableStoreQuery<\n  MongoKeyPath,\n  KeyValue,\n  Model,\n  MongoInsertType<Model, KeyValue>,\n  Params,\n  Result\n> {\n  private readonly store: MongoStore<Model, KeyValue>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private testCriteria?: TestCriteria;\n\n  private readonly transformer: Transformer<Model, Result>;\n\n  constructor(\n    store: MongoStore<Model, KeyValue>,\n    options: QueryOptions<Model>,\n    transformer: Transformer<Model, Result> = identityTransformer,\n  ) {\n    super();\n    this.store = store;\n    this.options = options;\n    this.transformer = transformer;\n  }\n\n  createMingoTestCriteria(): TestCriteria {\n    if (!this.testCriteria) {\n      if (!this.options.criteria) {\n        return () => true;\n      }\n\n      const mingoQuery = new mingo.Query(this.options.criteria);\n      this.testCriteria = mingoQuery.test.bind(mingoQuery);\n    }\n\n    return this.testCriteria;\n  }\n\n  async fetch<T>(onFulfilled: (result: QueryResult<Result>) => T): Promise<T> {\n    const cursor = await this.createMongoCursor();\n    await cursor.limit(1);\n    return cursor.toArray().then((result: Model[]) => {\n      const item: Result =\n        result.length === 0 ? (null as Result) : this.transformer(result[0]!);\n      return onFulfilled({\n        result: item,\n        meta: { total: result === null ? 0 : 1 },\n        info: {\n          limit: 1,\n          keyPath: this.store.keyPath,\n        },\n      });\n    });\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<KeyValue, Result>,\n    _includeInitial: boolean,\n  ): QuerySubscription {\n    const store = super.getSubscribeStore();\n    const testCriteria: TestCriteria = this.createMingoTestCriteria();\n\n    const promise: Promise<void> = _includeInitial\n      ? this.fetch(({ result, meta, info }: QueryResult<Result>) => {\n          callback(null, [\n            {\n              type: \"initial\",\n              initial: result,\n              queryInfo: info,\n              meta,\n            },\n          ]);\n        })\n      : Promise.resolve();\n\n    const unsubscribe = store.subscribe(async (action: Actions<Model>) => {\n      const changes: Changes<KeyValue, Result> = [];\n      switch (action.type) {\n        case \"inserted\": {\n          const filtered = action.next.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: \"updated\",\n              result: this.transformer(filtered[0]!),\n            });\n          }\n          break;\n        }\n        case \"deleted\": {\n          const filtered = action.prev.filter(testCriteria);\n          if (filtered.length > 0) {\n            changes.push({\n              type: \"deleted\",\n              keys: filtered.map((object) => object[this.store.keyPath]),\n            });\n          }\n          break;\n        }\n        case \"updated\": {\n          const filtered = action.changes.filter(([prev, next]) =>\n            testCriteria(prev),\n          );\n          if (filtered.length > 0) {\n            if (this.options.sort) {\n              const { result } = await this.fetch((res) => res);\n              changes.push({\n                type: \"updated\",\n                result,\n              });\n            } else if (filtered.length !== 1) {\n              throw new Error(\n                \"should not match more than 1, use sort if you can have multiple match\",\n              );\n            } else {\n              const [, next] = filtered[0]!;\n              changes.push({\n                type: \"updated\",\n                result: testCriteria(next) ? this.transformer(next) : null!,\n              });\n            }\n          } else if (filtered.length === 0) {\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unsupported type\");\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: <T, U>(\n        onFulfilled: () => Promise<T> | T,\n        onRejected?: (error: any) => Promise<U> | U,\n      ): Promise<T | U> => promise.then(onFulfilled, onRejected),\n    };\n  }\n\n  private async createMongoCursor(): Promise<\n    MongoCursor<Model, Model, KeyValue>\n  > {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","import type {\n  AllowedKeyValue,\n  Criteria,\n  OptionalBaseModelKeysForInsert,\n  QueryOptions,\n  QueryParams,\n  Sort,\n  SubscribableStore,\n  Transformer,\n  Update,\n  UpsertPartialObject,\n  UpsertResult,\n} from \"liwi-store\";\nimport type {\n  Collection,\n  Filter,\n  FindCursor,\n  MongoClient,\n  UpdateFilter,\n} from \"mongodb\";\nimport mongodb from \"mongodb\";\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from \"./MongoBaseModel\";\nimport type MongoConnection from \"./MongoConnection\";\nimport MongoCursor from \"./MongoCursor\";\nimport MongoQueryCollection from \"./MongoQueryCollection\";\nimport MongoQuerySingleItem from \"./MongoQuerySingleItem\";\n\nexport interface MongoUpsertResult<\n  KeyValue extends AllowedKeyValue,\n  Model extends MongoBaseModel<KeyValue>,\n> extends UpsertResult<Model> {\n  object: Model;\n  inserted: boolean;\n}\n\nexport default class MongoStore<\n  Model extends MongoBaseModel<KeyValue>,\n  KeyValue extends AllowedKeyValue = Model[MongoKeyPath],\n> implements\n    SubscribableStore<\n      MongoKeyPath,\n      KeyValue,\n      Model,\n      MongoInsertType<Model>,\n      MongoConnection\n    >\n{\n  readonly keyPath: MongoKeyPath = \"_id\";\n\n  readonly connection: MongoConnection;\n\n  private _collection: Collection<Model> | Promise<Collection<Model>>;\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    this.connection = connection;\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (client: MongoClient) => {\n        this._collection = client.db().collection(collectionName);\n        return this._collection;\n      },\n      (error: Error) => {\n        this._collection = Promise.reject(error);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection<Model>> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error(\"MongoDB connection failed\"));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  createQuerySingleItem<\n    Result extends Record<MongoKeyPath, KeyValue> = Model,\n    Params extends QueryParams<Params> = never,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Result>,\n  ): MongoQuerySingleItem<Model, Params, Result, KeyValue> {\n    return new MongoQuerySingleItem<Model, Params, Result, KeyValue>(\n      this,\n      options,\n      transformer,\n    );\n  }\n\n  createQueryCollection<\n    Item extends Record<MongoKeyPath, KeyValue> = Model,\n    Params extends QueryParams<Params> = never,\n  >(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Item>,\n  ): MongoQueryCollection<Model, Params, Model[\"_id\"], Item> {\n    return new MongoQueryCollection<Model, Params, KeyValue, Item>(\n      this,\n      options,\n      transformer,\n    );\n  }\n\n  async insertOne(object: MongoInsertType<Model>): Promise<Model> {\n    if (!object._id) {\n      object._id = new mongodb.ObjectId().toString() as Model[\"_id\"];\n    }\n\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    const { acknowledged: isAcknowledged } = await collection.insertOne(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      object as any,\n    );\n    if (!isAcknowledged) {\n      throw new Error(\"Fail to insert\");\n    }\n\n    return object as Model;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    await collection.replaceOne({ _id: object._id } as Filter<Model>, object);\n    return object;\n  }\n\n  async upsertOne<\n    K extends Exclude<\n      keyof Model,\n      MongoKeyPath | OptionalBaseModelKeysForInsert\n    >,\n  >(\n    object: UpsertPartialObject<MongoKeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>[\"$setOnInsert\"],\n  ): Promise<Model> {\n    const result = await this.upsertOneWithInfo(\n      object,\n      setOnInsertPartialObject,\n    );\n    return result.object;\n  }\n\n  async upsertOneWithInfo<\n    K extends Exclude<\n      keyof Model,\n      MongoKeyPath | OptionalBaseModelKeysForInsert\n    >,\n  >(\n    object: UpsertPartialObject<MongoKeyPath, KeyValue, Model, K>,\n    setOnInsertPartialObject?: Update<Model>[\"$setOnInsert\"],\n  ): Promise<MongoUpsertResult<KeyValue, Model>> {\n    const $setOnInsert: Update<Model>[\"$setOnInsert\"] = {\n      // @ts-expect-error -- created is Date as set in BaseModel\n      created: object.created || new Date(),\n      ...setOnInsertPartialObject,\n    };\n\n    if (!object.updated) {\n      (object as MongoBaseModel).updated = new Date();\n    }\n\n    const $set: Partial<typeof object> = { ...object };\n    delete $set.created;\n\n    const collection = await this.collection;\n\n    const { upsertedCount } = await collection.updateOne(\n      { _id: object._id } as Filter<Model>,\n      { $set, $setOnInsert } as UpdateFilter<Model>,\n      { upsert: true },\n    );\n\n    if (upsertedCount) {\n      Object.assign(object, $setOnInsert);\n    }\n\n    return { object: object as unknown as Model, inserted: !!upsertedCount };\n  }\n\n  replaceSeveral(objects: Model[]): Promise<Model[]> {\n    return Promise.all(objects.map((object: Model) => this.replaceOne(object)));\n  }\n\n  async partialUpdateByKey(\n    key: KeyValue,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    const collection = await this.collection;\n    const commandResult = await collection.updateOne(\n      { _id: key, ...criteria } as Filter<Model>,\n      partialUpdate as UpdateFilter<Model>,\n    );\n    if (!commandResult.acknowledged) {\n      console.error(commandResult);\n      throw new Error(\"Update failed\");\n    }\n    const object = await this.findByKey(key);\n    return object!;\n  }\n\n  partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    return this.collection\n      .then((collection) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        collection.updateMany(criteria as Filter<Model>, partialUpdate as any),\n      )\n      .then((res) => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: KeyValue, criteria?: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) =>\n        collection.deleteOne({ _id: key, ...criteria } as Filter<Model>),\n      )\n      .then(() => undefined);\n  }\n\n  deleteOne(object: Model): Promise<void> {\n    return this.deleteByKey(object._id);\n  }\n\n  deleteMany(selector: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteMany(selector as Filter<Model>))\n      .then(() => undefined);\n  }\n\n  async count(filter?: Criteria<Model>): Promise<number> {\n    const collection = await this.collection;\n    return filter\n      ? collection.countDocuments(filter as Filter<Model>)\n      : collection.countDocuments();\n  }\n\n  async cursor<Result extends Partial<Model> = Model>(\n    filter?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<MongoCursor<Model, Result, KeyValue>> {\n    const collection = await this.collection;\n    const findCursor = filter\n      ? collection.find<Result>(filter as Filter<Model>)\n      : (collection.find() as unknown as FindCursor<Result>);\n    if (sort) findCursor.sort(sort);\n    return new MongoCursor<Model, Result, KeyValue>(this, findCursor);\n  }\n\n  async findByKey(\n    key: KeyValue,\n    criteria?: Criteria<Model>,\n  ): Promise<Model | undefined> {\n    const collection = await this.collection;\n    const result = await collection.findOne<Model>({\n      _id: key,\n      ...criteria,\n    } as Filter<Model>);\n    return result || undefined;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.cursor<Model>(criteria, sort).then((cursor) =>\n      cursor.toArray(),\n    );\n  }\n\n  async findOne(\n    filter: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    const collection = await this.collection;\n    const result = await collection.findOne<Model>(filter as Filter<Model>, {\n      sort,\n    });\n    return result || undefined;\n  }\n}\n","import { AbstractConnection } from \"liwi-store\";\nimport mongodb from \"mongodb\";\nimport { Logger } from \"nightingale-logger\";\n\nconst logger = new Logger(\"liwi:mongo:MongoConnection\");\n\nexport interface MongoConfig {\n  host?: string;\n  port?: number | string;\n  database: string;\n  user?: string;\n  password?: string;\n}\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection?: mongodb.MongoClient;\n\n  _connecting?: Promise<mongodb.MongoClient>;\n\n  connectionFailed?: boolean;\n\n  // TODO interface\n  constructor({\n    host = \"localhost\",\n    port = \"27017\",\n    database,\n    user,\n    password,\n  }: MongoConfig) {\n    super();\n\n    if (!database) {\n      throw new Error(\"Missing config database\");\n    }\n\n    const buildConnectionString = (redactCredentials: boolean): string =>\n      `mongodb://${\n        user\n          ? `${\n              redactCredentials\n                ? `${user.slice(0, 2)}[redacted]`\n                : encodeURIComponent(user)\n            }:${\n              redactCredentials\n                ? \"[redacted]\"\n                : encodeURIComponent(password ?? \"\")\n            }@`\n          : \"\"\n      }${host}:${port}/${encodeURIComponent(database)}`;\n\n    const connectionString = buildConnectionString(false);\n    const connectionStringRedacted = buildConnectionString(true);\n\n    this.connect(connectionString, connectionStringRedacted);\n  }\n\n  connect(connectionString: string, connectionStringRedacted: string): void {\n    logger.info(\"connecting\", { connectionStringRedacted });\n\n    const connectPromise = mongodb.MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info(\"connected\", { connectionStringRedacted });\n        connection.on(\"close\", () => {\n          logger.warn(\"close\", { connectionStringRedacted });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error(\"MongoDB connection closed\");\n          };\n        });\n        connection.on(\"timeout\", () => {\n          logger.warn(\"timeout\", { connectionStringRedacted });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error(\"MongoDB connection timeout\");\n          };\n        });\n        connection.on(\"reconnect\", () => {\n          logger.warn(\"reconnect\", { connectionStringRedacted });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection!);\n        });\n        connection.on(\"error\", (err) => {\n          logger.warn(\"error\", { connectionStringRedacted, err });\n        });\n\n        this._connection = connection;\n        this._connecting = undefined;\n        this.getConnection = () => Promise.resolve(this._connection!);\n        return connection;\n      })\n      .catch((error: unknown) => {\n        logger.info(\"not connected\", { connectionStringRedacted });\n        console.error((error as Error).message || error);\n        // throw err;\n        process.nextTick(() => {\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit(1);\n        });\n\n        throw error;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<mongodb.MongoClient> {\n    throw new Error(\"call connect()\");\n  }\n\n  async close(): Promise<void> {\n    this.getConnection = () => Promise.reject(new Error(\"Connection closed\"));\n    if (this._connection) {\n      await this._connection.close();\n      this._connection = undefined;\n    } else if (this._connecting) {\n      await this._connecting;\n      await this.close();\n    }\n  }\n}\n","import type { AllowedKeyValue } from \"liwi-store\";\nimport { SubscribeStore } from \"liwi-subscribe-store\";\nimport type {\n  MongoBaseModel,\n  MongoInsertType,\n  MongoKeyPath,\n} from \"./MongoBaseModel\";\nimport type MongoConnection from \"./MongoConnection\";\nimport type MongoStore from \"./MongoStore\";\n\nexport default function createMongoSubscribeStore<\n  Model extends MongoBaseModel<KeyValue>,\n  KeyValue extends AllowedKeyValue = Model[MongoKeyPath],\n>(\n  mongoStore: MongoStore<Model, KeyValue>,\n): SubscribeStore<\n  MongoKeyPath,\n  KeyValue,\n  Model,\n  MongoInsertType<Model, KeyValue>,\n  MongoConnection,\n  MongoStore<Model, KeyValue>\n> {\n  return new SubscribeStore(mongoStore);\n}\n\nexport { type SubscribeStore } from \"liwi-subscribe-store\";\n"],"names":["MongoCursor","AbstractStoreCursor","constructor","store","cursor","advance","count","skip","next","then","value","_result","key","_id","forEach","callback","result","limit","newLimit","Promise","resolve","Error","close","toArray","identityTransformer","model","MongoQueryCollection","AbstractSubscribableStoreQuery","options","transformer","createTestCriteria","testCriteria","criteria","mingoQuery","mingo","Query","test","bind","fetch","onFulfilled","all","createMongoCursor","map","meta","total","info","sort","keyPath","_subscribe","_includeInitial","getSubscribeStore","promise","type","initial","queryInfo","unsubscribe","subscribe","action","changes","filtered","filter","length","push","prev","keys","object","deleted","updated","inserted","prevObject","nextObject","stop","cancel","onRejected","MongoQuerySingleItem","createMingoTestCriteria","item","res","MongoStore","connection","collectionName","_collection","getConnection","client","db","collection","error","reject","connectionFailed","createQuerySingleItem","createQueryCollection","insertOne","mongodb","ObjectId","toString","created","Date","acknowledged","isAcknowledged","replaceOne","upsertOne","setOnInsertPartialObject","upsertOneWithInfo","$setOnInsert","$set","upsertedCount","updateOne","upsert","Object","assign","replaceSeveral","objects","partialUpdateByKey","partialUpdate","commandResult","console","findByKey","partialUpdateOne","partialUpdateMany","updateMany","undefined","deleteByKey","deleteOne","deleteMany","selector","countDocuments","findCursor","find","findOne","findAll","logger","Logger","MongoConnection","AbstractConnection","host","port","database","user","password","buildConnectionString","redactCredentials","slice","encodeURIComponent","connectionString","connectionStringRedacted","connect","connectPromise","MongoClient","on","warn","_connection","err","_connecting","catch","message","process","nextTick","exit","createMongoSubscribeStore","mongoStore","SubscribeStore"],"mappings":"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"}