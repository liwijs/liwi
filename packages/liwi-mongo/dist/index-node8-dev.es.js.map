{"version":3,"file":"index-node8-dev.es.js","sources":["../src/MongoCursor.ts","../src/MongoStore.ts","../src/MongoConnection.ts"],"sourcesContent":["import { Cursor } from 'mongodb';\nimport { AbstractCursor } from 'liwi-store';\nimport MongoStore, { MongoModel, MongoKeyPath } from './MongoStore';\n\nexport default class MongoCursor<\n  Model extends MongoModel\n> extends AbstractCursor<Model, MongoKeyPath, MongoStore<Model>> {\n  // key in AbstractCursor\n\n  private cursor: Cursor;\n\n  private _result?: Model;\n\n  constructor(store: MongoStore<Model>, cursor: Cursor) {\n    super(store);\n    this.cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this.cursor.next().then((value) => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise<this> {\n    this.cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this.cursor.count(applyLimit);\n  }\n\n  result(): Promise<Model> {\n    if (!this._result) throw new Error('Cannot call result() before next()');\n    return Promise.resolve(this._result as Model);\n  }\n\n  close() {\n    if (this.cursor) {\n      this.cursor.close();\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<Model>> {\n    return this.cursor.toArray();\n  }\n}\n","import { ObjectID, Collection, Db } from 'mongodb';\nimport { AbstractStore } from 'liwi-store';\nimport { BaseModel, InsertType, Criteria, Sort, Update } from 'liwi-types';\nimport MongoConnection from './MongoConnection';\nimport MongoCursor from './MongoCursor';\n\nexport interface MongoModel extends BaseModel {\n  _id: string;\n}\n\nexport type MongoKeyPath = '_id';\n\nexport default class MongoStore<Model extends MongoModel> extends AbstractStore<\n  Model,\n  MongoKeyPath,\n  MongoConnection,\n  MongoCursor<Model>\n> {\n  _collection: Collection | Promise<Collection>;\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection, '_id');\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (db: Db) => {\n        this._collection = db.collection(collectionName);\n        return this._collection;\n      },\n      (err: any) => {\n        this._collection = Promise.reject(err);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  async insertOne(object: InsertType<Model, MongoKeyPath>): Promise<Model> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n\n    object.created = new Date();\n    object.updated = new Date();\n\n    const collection = await this.collection;\n    const { result } = await collection.insertOne(object);\n    if (!result.ok || result.n !== 1) {\n      throw new Error('Fail to insert');\n    }\n\n    return object as Model;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    object.updated = new Date();\n\n    const collection = await this.collection;\n    await collection.updateOne({ _id: object._id }, object);\n    return object as Model;\n  }\n\n  async upsertOne(object: InsertType<Model, MongoKeyPath>): Promise<Model> {\n    const $setOnInsert = {\n      created: new Date(),\n    };\n\n    object.updated = new Date();\n\n    const $set = Object.assign({}, object);\n    delete $set.created;\n\n    const collection = await this.collection;\n\n    const { upsertedCount } = await collection.updateOne(\n      { _id: object._id },\n      { $set, $setOnInsert },\n      { upsert: true },\n    );\n\n    if (upsertedCount) {\n      object.created = $setOnInsert.created;\n    }\n\n    return object as Model;\n  }\n\n  replaceSeveral(objects: Array<Model>): Promise<Array<Model>> {\n    return Promise.all(objects.map((object: Model) => this.replaceOne(object)));\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const collection = await this.collection;\n    const commandResult = await collection.updateOne(\n      { _id: key },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    const object = await this.findByKey(key);\n    return object as Model;\n  }\n\n  partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    return this.collection\n      .then((collection) => collection.updateMany(criteria, partialUpdate))\n      .then((res) => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteOne({ _id: key }))\n      .then(() => undefined);\n  }\n\n  deleteMany(selector: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteMany(selector))\n      .then(() => undefined);\n  }\n\n  cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<MongoCursor<Model>> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    return this.collection.then((collection) =>\n      collection.findOne({ _id: key }),\n    );\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => cursor.limit(1).next());\n  }\n}\n","import Logger from 'nightingale-logger';\nimport { MongoClient, Db } from 'mongodb';\nimport { AbstractConnection } from 'liwi-store';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection?: Db;\n\n  _connecting?: Promise<Db>;\n\n  connectionFailed?: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${\n        config.has('user')\n          ? `${config.get('user')}:${config.get('password')}@`\n          : ''\n      }` +\n      `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString: string) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection closed');\n          };\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection timeout');\n          };\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection as Db);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = undefined;\n        this.getConnection = () => Promise.resolve(this._connection as Db);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  async close(): Promise<void> {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      await this._connection.close();\n      this._connection = undefined;\n    } else if (this._connecting) {\n      await this._connecting;\n      await this.close();\n    }\n  }\n}\n"],"names":["MongoCursor","AbstractCursor","constructor","store","cursor","_result","advance","count","skip","next","then","value","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","Error","close","toArray","MongoStore","AbstractStore","connection","collectionName","_collection","getConnection","db","collection","err","reject","connectionFailed","insertOne","object","ObjectID","toString","created","Date","updated","ok","n","replaceOne","updateOne","upsertOne","$setOnInsert","$set","Object","assign","upsertedCount","upsert","replaceSeveral","objects","all","map","partialUpdateByKey","partialUpdate","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","criteria","updateMany","undefined","deleteByKey","deleteOne","deleteMany","selector","sort","find","findOne","logger","Logger","MongoConnection","AbstractConnection","config","_connection","_connecting","has","set","connectionString","get","connect","info","connectPromise","MongoClient","on","warn","catch","message","process","nextTick","exit"],"mappings":"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"}