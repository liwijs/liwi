{"version":3,"file":"index-node10.es.js","sources":["../src/MongoCursor.ts","../src/MongoQuery.ts","../src/MongoStore.ts","../src/MongoConnection.ts","../src/index.ts"],"sourcesContent":["import { Cursor } from 'mongodb';\nimport { AbstractStoreCursor } from 'liwi-store';\nimport MongoStore, { MongoModel, MongoKeyPath } from './MongoStore';\n\nexport default class MongoCursor<\n  Model extends MongoModel\n> extends AbstractStoreCursor<Model, MongoKeyPath, MongoStore<Model>> {\n  // key in AbstractCursor\n\n  private cursor: Cursor;\n\n  private _result?: Model;\n\n  constructor(store: MongoStore<Model>, cursor: Cursor) {\n    super(store);\n    this.cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this.cursor.next().then((value) => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise<this> {\n    this.cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this.cursor.count(applyLimit);\n  }\n\n  result(): Promise<Model> {\n    if (!this._result) throw new Error('Cannot call result() before next()');\n    return Promise.resolve(this._result as Model);\n  }\n\n  close() {\n    if (this.cursor) {\n      this.cursor.close();\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Model[]> {\n    return this.cursor.toArray();\n  }\n}\n","import mingo from 'mingo';\nimport { SubscribeResult, SubscribeCallback } from 'liwi-store';\nimport { Changes, QueryOptions, Transformer } from 'liwi-types';\nimport { AbstractSubscribeQuery, Actions } from 'liwi-subscribe-store';\nimport MongoStore, { MongoModel } from './MongoStore';\n\nconst identityTransformer = <Model extends MongoModel, Transformed = Model>(\n  model: Model,\n): Transformed => (model as unknown) as Transformed;\n\ninterface TestCriteria {\n  test(obj: any): boolean;\n}\n\nexport default class MongoQuery<\n  Model extends MongoModel,\n  Transformed = Model\n> extends AbstractSubscribeQuery<Model, MongoStore<Model>, Transformed> {\n  private readonly store: MongoStore<Model>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private mingoQuery?: TestCriteria;\n\n  private readonly transformer: Transformer<Model, Transformed>;\n\n  constructor(\n    store: MongoStore<Model>,\n    options: QueryOptions<Model>,\n    transformer: Transformer<Model, Transformed> = identityTransformer,\n  ) {\n    super();\n    this.store = store;\n    this.options = options;\n    this.transformer = transformer;\n  }\n\n  createMingoQuery(): TestCriteria {\n    if (!this.mingoQuery) {\n      if (!this.options.criteria) {\n        return { test: () => true };\n      }\n\n      this.mingoQuery = new mingo.Query(this.options.criteria);\n    }\n\n    return this.mingoQuery;\n  }\n\n  async fetch<T>(onFulfilled: (result: Transformed[]) => T): Promise<T> {\n    const cursor = await this.createMongoCursor();\n    return cursor\n      .toArray()\n      .then((result: Model[]) => result.map(this.transformer))\n      .then(onFulfilled);\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<Transformed>,\n    _includeInitial: boolean,\n  ): SubscribeResult<Transformed[]> {\n    const store = super.getSubscribeStore();\n    const mingoQuery: TestCriteria = this.createMingoQuery();\n\n    const promise =\n      _includeInitial &&\n      this.fetch((result: Transformed[]) => {\n        callback(null, [{ type: 'initial', initial: result }]);\n        return result;\n      });\n\n    const unsubscribe = store.subscribe((action: Actions<Model>) => {\n      const filtered = (action.type === 'inserted'\n        ? action.next\n        : action.prev\n      ).filter((object: Model) => mingoQuery.test(object));\n      const changes: Changes<Transformed> = [];\n      switch (action.type) {\n        case 'inserted':\n          changes.push({\n            type: 'inserted',\n            objects: filtered.map(this.transformer),\n          });\n          break;\n        case 'deleted':\n          changes.push({\n            type: 'deleted',\n            keys: filtered.map((object: Model) => object[this.store.keyPath]),\n          });\n          break;\n        case 'updated': {\n          const { deleted, updated } = filtered.reduce(\n            (\n              acc: { deleted: string[]; updated: Transformed[] },\n              object: Model,\n              index: number,\n            ) => {\n              const nextObject = action.next[index];\n              if (!mingoQuery.test(nextObject)) {\n                acc.deleted.push(object[this.store.keyPath]);\n              } else {\n                acc.updated.push(this.transformer(nextObject));\n              }\n\n              return acc;\n            },\n            { deleted: [], updated: [] },\n          );\n\n          if (deleted.length !== 0) {\n            changes.push({ type: 'deleted', keys: deleted });\n          }\n          if (updated.length !== 0) {\n            changes.push({ type: 'updated', objects: updated });\n          }\n\n          break;\n        }\n        default:\n          throw new Error('Unsupported type');\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n    // let _feed;\n    // const promise = this.queryCallback(this.store.query(), this.store.r)\n    //   .changes({\n    //     includeInitial: _includeInitial,\n    //     includeStates: true,\n    //     includeTypes: true,\n    //     includeOffsets: true,\n    //   })\n    //   .then((feed) => {\n    //     if (args.length === 0) {\n    //       _feed = feed;\n    //       delete this._promise;\n    //     }\n    //\n    //     feed.each(callback);\n    //     return feed;\n    //   });\n    //\n    // if (args.length === 0) this._promise = promise;\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: _includeInitial\n        ? (\n            onFulfilled: (result: Transformed[]) => any,\n            onRejected?: (error: any) => any,\n          ) => (promise as Promise<Transformed[]>).then(onFulfilled, onRejected)\n        : () => Promise.resolve(),\n    };\n  }\n\n  private async createMongoCursor() {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","/* eslint-disable max-lines */\nimport { ObjectID, Collection, Db } from 'mongodb';\nimport { AbstractStore, UpsertResult } from 'liwi-store';\nimport {\n  BaseModel,\n  InsertType,\n  Criteria,\n  Sort,\n  Update,\n  QueryOptions,\n  Transformer,\n} from 'liwi-types';\nimport MongoConnection from './MongoConnection';\nimport MongoCursor from './MongoCursor';\nimport MongoQuery from './MongoQuery';\nimport { MongoKeyPath } from '.';\n\nexport type MongoKeyPath = '_id';\n\nexport interface MongoModel extends BaseModel {\n  _id: string;\n}\n\nexport type MongoInsertType<Model extends MongoModel> = InsertType<\n  Model,\n  MongoKeyPath\n>;\n\nexport interface MongoUpsertResult<Model extends MongoModel>\n  extends UpsertResult<Model> {\n  object: Model;\n  inserted: boolean;\n}\n\nexport default class MongoStore<Model extends MongoModel> extends AbstractStore<\n  Model,\n  MongoKeyPath,\n  MongoConnection,\n  MongoCursor<Model>\n> {\n  private _collection: Collection | Promise<Collection>;\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection, '_id');\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (db: Db) => {\n        this._collection = db.collection(collectionName);\n        return this._collection;\n      },\n      (err: any) => {\n        this._collection = Promise.reject(err);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection> {\n    if (super.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  createQuery<Transformed>(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Transformed>,\n  ): MongoQuery<Model, Transformed> {\n    return new MongoQuery(this, options, transformer);\n  }\n\n  async insertOne(object: MongoInsertType<Model>): Promise<Model> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    const { result } = await collection.insertOne(object);\n    if (!result.ok || result.n !== 1) {\n      throw new Error('Fail to insert');\n    }\n\n    return object as Model;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    await collection.updateOne({ _id: object._id }, object);\n    return object as Model;\n  }\n\n  async upsertOneWithInfo(\n    object: MongoInsertType<Model>,\n  ): Promise<MongoUpsertResult<Model>> {\n    const $setOnInsert = {\n      created: object.created || new Date(),\n    };\n\n    if (!object.updated) object.updated = new Date();\n\n    const $set = Object.assign({}, object);\n    delete $set.created;\n\n    const collection = await this.collection;\n\n    const { upsertedCount } = await collection.updateOne(\n      { _id: object._id },\n      { $set, $setOnInsert },\n      { upsert: true },\n    );\n\n    if (upsertedCount) {\n      object.created = $setOnInsert.created;\n    }\n\n    return { object: object as Model, inserted: !!upsertedCount };\n  }\n\n  replaceSeveral(objects: Model[]): Promise<Model[]> {\n    return Promise.all(objects.map((object: Model) => this.replaceOne(object)));\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    const collection = await this.collection;\n    const commandResult = await collection.updateOne(\n      { _id: key, ...criteria },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    const object = await this.findByKey(key);\n    return object as Model;\n  }\n\n  partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    return this.collection\n      .then((collection) => collection.updateMany(criteria, partialUpdate))\n      .then((res) => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteOne({ _id: key }))\n      .then(() => undefined);\n  }\n\n  deleteMany(selector: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteMany(selector))\n      .then(() => undefined);\n  }\n\n  cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<MongoCursor<Model>> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    return this.collection.then((collection) =>\n      collection.findOne({ _id: key }),\n    );\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => cursor.limit(1).next());\n  }\n}\n","import Logger from 'nightingale-logger';\nimport { MongoClient, Db } from 'mongodb';\nimport { AbstractConnection } from 'liwi-store';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection?: Db;\n\n  _connecting?: Promise<Db>;\n\n  connectionFailed?: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${\n        config.has('user')\n          ? `${config.get('user')}:${config.get('password')}@`\n          : ''\n      }` +\n      `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString: string) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection closed');\n          };\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection timeout');\n          };\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection as Db);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = undefined;\n        this.getConnection = () => Promise.resolve(this._connection as Db);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  async close(): Promise<void> {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      await this._connection.close();\n      this._connection = undefined;\n    } else if (this._connecting) {\n      await this._connecting;\n      await this.close();\n    }\n  }\n}\n","/* eslint-disable typescript/no-use-before-define */\nimport * as MongoStoreExports from './MongoStore';\n\nexport { default as MongoStore } from './MongoStore';\nexport { default as MongoConnection } from './MongoConnection';\n\nexport type MongoModel = MongoStoreExports.MongoModel;\nexport type MongoKeyPath = MongoStoreExports.MongoKeyPath;\nexport type MongoInsertType<\n  Model extends MongoModel\n> = MongoStoreExports.MongoInsertType<Model>;\n"],"names":["MongoCursor","AbstractStoreCursor","constructor","store","cursor","advance","count","skip","next","then","value","_result","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","Error","close","toArray","identityTransformer","model","MongoQuery","AbstractSubscribeQuery","options","transformer","createMingoQuery","mingoQuery","criteria","test","mingo","Query","fetch","onFulfilled","createMongoCursor","map","_subscribe","callback","_includeInitial","getSubscribeStore","promise","type","initial","unsubscribe","subscribe","action","filtered","prev","filter","object","changes","push","objects","keys","keyPath","deleted","updated","reduce","acc","index","nextObject","length","stop","cancel","onRejected","sort","MongoStore","AbstractStore","connection","collectionName","_collection","getConnection","db","collection","err","reject","connectionFailed","createQuery","insertOne","ObjectID","toString","created","Date","ok","n","replaceOne","updateOne","upsertOneWithInfo","$setOnInsert","$set","Object","assign","upsertedCount","upsert","inserted","replaceSeveral","all","partialUpdateByKey","partialUpdate","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","updateMany","undefined","deleteByKey","deleteOne","deleteMany","selector","find","findOne","logger","Logger","MongoConnection","AbstractConnection","config","has","set","connectionString","get","connect","info","connectPromise","MongoClient","on","warn","_connection","_connecting","catch","message","process","nextTick","exit"],"mappings":"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"}