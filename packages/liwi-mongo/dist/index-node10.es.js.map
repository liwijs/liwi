{"version":3,"file":"index-node10.es.js","sources":["../src/MongoCursor.ts","../src/MongoQuery.ts","../src/MongoStore.ts","../src/MongoConnection.ts"],"sourcesContent":["import { Cursor } from 'mongodb';\nimport { AbstractStoreCursor } from 'liwi-store';\nimport MongoStore, { MongoModel, MongoKeyPath } from './MongoStore';\n\nexport default class MongoCursor<\n  Model extends MongoModel,\n  Result extends Partial<Model> = Model\n> extends AbstractStoreCursor<Model, MongoKeyPath, MongoStore<Model>, Result> {\n  // key in AbstractCursor\n\n  private readonly cursor: Cursor;\n\n  private _result?: Result;\n\n  constructor(store: MongoStore<Model>, cursor: Cursor) {\n    super(store);\n    this.cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this.cursor.next().then((value) => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise<this> {\n    this.cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit = false) {\n    return this.cursor.count(applyLimit);\n  }\n\n  result(): Promise<Result> {\n    if (!this._result) throw new Error('Cannot call result() before next()');\n    return Promise.resolve(this._result as Result);\n  }\n\n  close() {\n    if (this.cursor) {\n      this.cursor.close();\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Result[]> {\n    return this.cursor.toArray();\n  }\n}\n","import mingo from 'mingo';\nimport { SubscribeResult, SubscribeCallback } from 'liwi-store';\nimport { Changes, QueryOptions, Transformer } from 'liwi-types';\nimport { AbstractSubscribeQuery, Actions } from 'liwi-subscribe-store';\nimport MongoStore, { MongoModel } from './MongoStore';\n\nconst identityTransformer = <Model extends MongoModel, Transformed = Model>(\n  model: Model,\n): Transformed => (model as unknown) as Transformed;\n\ninterface TestCriteria {\n  test(obj: any): boolean;\n}\n\nexport default class MongoQuery<\n  Model extends MongoModel,\n  Transformed = Model\n> extends AbstractSubscribeQuery<Model, MongoStore<Model>, Transformed> {\n  private readonly store: MongoStore<Model>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private mingoQuery?: TestCriteria;\n\n  private readonly transformer: Transformer<Model, Transformed>;\n\n  constructor(\n    store: MongoStore<Model>,\n    options: QueryOptions<Model>,\n    transformer: Transformer<Model, Transformed> = identityTransformer,\n  ) {\n    super();\n    this.store = store;\n    this.options = options;\n    this.transformer = transformer;\n  }\n\n  createMingoQuery(): TestCriteria {\n    if (!this.mingoQuery) {\n      if (!this.options.criteria) {\n        return { test: () => true };\n      }\n\n      this.mingoQuery = new mingo.Query(this.options.criteria);\n    }\n\n    return this.mingoQuery;\n  }\n\n  async fetch<T>(onFulfilled: (result: Transformed[]) => T): Promise<T> {\n    const cursor = await this.createMongoCursor();\n    return cursor\n      .toArray()\n      .then((result: Model[]) => result.map(this.transformer))\n      .then(onFulfilled);\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<Transformed>,\n    _includeInitial: boolean,\n  ): SubscribeResult<Transformed[]> {\n    const store = super.getSubscribeStore();\n    const mingoQuery: TestCriteria = this.createMingoQuery();\n\n    const promise =\n      _includeInitial &&\n      this.fetch((result: Transformed[]) => {\n        callback(null, [\n          {\n            type: 'initial',\n            initial: result,\n            queryInfo: {\n              limit: this.options.limit,\n              keyPath: this.store.keyPath,\n            },\n          },\n        ]);\n        return result;\n      });\n\n    const unsubscribe = store.subscribe((action: Actions<Model>) => {\n      const filtered = (action.type === 'inserted'\n        ? action.next\n        : action.prev\n      ).filter((object: Model) => mingoQuery.test(object));\n      const changes: Changes<Transformed> = [];\n      switch (action.type) {\n        case 'inserted':\n          changes.push({\n            type: 'inserted',\n            objects: filtered.map(this.transformer),\n          });\n          break;\n        case 'deleted':\n          changes.push({\n            type: 'deleted',\n            keys: filtered.map((object: Model) => object[this.store.keyPath]),\n          });\n          break;\n        case 'updated': {\n          const { deleted, updated } = filtered.reduce(\n            (\n              acc: { deleted: string[]; updated: Transformed[] },\n              object: Model,\n              index: number,\n            ) => {\n              const nextObject = action.next[index];\n              if (!mingoQuery.test(nextObject)) {\n                acc.deleted.push(object[this.store.keyPath]);\n              } else {\n                acc.updated.push(this.transformer(nextObject));\n              }\n\n              return acc;\n            },\n            { deleted: [], updated: [] },\n          );\n\n          if (deleted.length !== 0) {\n            changes.push({ type: 'deleted', keys: deleted });\n          }\n          if (updated.length !== 0) {\n            changes.push({ type: 'updated', objects: updated });\n          }\n\n          break;\n        }\n        default:\n          throw new Error('Unsupported type');\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n    // let _feed;\n    // const promise = this.queryCallback(this.store.query(), this.store.r)\n    //   .changes({\n    //     includeInitial: _includeInitial,\n    //     includeStates: true,\n    //     includeTypes: true,\n    //     includeOffsets: true,\n    //   })\n    //   .then((feed) => {\n    //     if (args.length === 0) {\n    //       _feed = feed;\n    //       delete this._promise;\n    //     }\n    //\n    //     feed.each(callback);\n    //     return feed;\n    //   });\n    //\n    // if (args.length === 0) this._promise = promise;\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: _includeInitial\n        ? (\n            onFulfilled: (result: Transformed[]) => any,\n            onRejected?: (error: any) => any,\n          ) => (promise as Promise<Transformed[]>).then(onFulfilled, onRejected)\n        : () => Promise.resolve(),\n    };\n  }\n\n  private async createMongoCursor() {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","/* eslint-disable max-lines */\nimport { ObjectID, Collection, MongoClient } from 'mongodb';\nimport { AbstractStore, UpsertResult } from 'liwi-store';\nimport {\n  BaseModel,\n  InsertType,\n  Criteria,\n  Sort,\n  Update,\n  QueryOptions,\n  Transformer,\n} from 'liwi-types';\nimport MongoConnection from './MongoConnection';\nimport MongoCursor from './MongoCursor';\nimport MongoQuery from './MongoQuery';\nimport { MongoKeyPath } from '.';\n\nexport type MongoKeyPath = '_id';\n\nexport interface MongoModel extends BaseModel {\n  _id: string;\n}\n\nexport type MongoInsertType<Model extends MongoModel> = InsertType<\n  Model,\n  MongoKeyPath\n>;\n\nexport interface MongoUpsertResult<Model extends MongoModel>\n  extends UpsertResult<Model> {\n  object: Model;\n  inserted: boolean;\n}\n\nexport default class MongoStore<Model extends MongoModel> extends AbstractStore<\n  Model,\n  MongoKeyPath,\n  MongoConnection,\n  MongoCursor<Model>\n> {\n  private _collection: Collection | Promise<Collection>;\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection, '_id');\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (client: MongoClient) => {\n        this._collection = client.db().collection(collectionName);\n        return this._collection;\n      },\n      (err: any) => {\n        this._collection = Promise.reject(err);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection> {\n    if (super.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  createQuery<Transformed>(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Transformed>,\n  ): MongoQuery<Model, Transformed> {\n    return new MongoQuery(this, options, transformer);\n  }\n\n  async insertOne(object: MongoInsertType<Model>): Promise<Model> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    const { result } = await collection.insertOne(object);\n    if (!result.ok || result.n !== 1) {\n      throw new Error('Fail to insert');\n    }\n\n    return object as Model;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    await collection.replaceOne({ _id: object._id }, object);\n    return object as Model;\n  }\n\n  async upsertOneWithInfo(\n    object: MongoInsertType<Model>,\n  ): Promise<MongoUpsertResult<Model>> {\n    const $setOnInsert = {\n      created: object.created || new Date(),\n    };\n\n    if (!object.updated) object.updated = new Date();\n\n    const $set = { ...object };\n    delete $set.created;\n\n    const collection = await this.collection;\n\n    const { upsertedCount } = await collection.updateOne(\n      { _id: object._id },\n      { $set, $setOnInsert },\n      { upsert: true },\n    );\n\n    if (upsertedCount) {\n      object.created = $setOnInsert.created;\n    }\n\n    return { object: object as Model, inserted: !!upsertedCount };\n  }\n\n  replaceSeveral(objects: Model[]): Promise<Model[]> {\n    return Promise.all(objects.map((object: Model) => this.replaceOne(object)));\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n    criteria?: Criteria<Model>,\n  ): Promise<Model> {\n    const collection = await this.collection;\n    const commandResult = await collection.updateOne(\n      { _id: key, ...criteria },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    const object = await this.findByKey(key);\n    return object as Model;\n  }\n\n  partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    return this.collection\n      .then((collection) => collection.updateMany(criteria, partialUpdate))\n      .then((res) => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteOne({ _id: key }))\n      .then(() => undefined);\n  }\n\n  deleteMany(selector: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteMany(selector))\n      .then(() => undefined);\n  }\n\n  cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<MongoCursor<Model>> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    return this.collection\n      .then((collection) => collection.findOne({ _id: key }))\n      .then((result) => result || undefined);\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => cursor.limit(1).next());\n  }\n}\n","import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport { AbstractConnection } from 'liwi-store';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection?: MongoClient;\n\n  _connecting?: Promise<MongoClient>;\n\n  connectionFailed?: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${\n        config.has('user')\n          ? `${config.get('user')}:${config.get('password')}@`\n          : ''\n      }` +\n      `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString: string) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString, {\n      useNewUrlParser: true,\n    })\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection closed');\n          };\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection timeout');\n          };\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () =>\n            Promise.resolve(this._connection as MongoClient);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = undefined;\n        this.getConnection = () =>\n          Promise.resolve(this._connection as MongoClient);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<MongoClient> {\n    throw new Error('call connect()');\n  }\n\n  async close(): Promise<void> {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      await this._connection.close();\n      this._connection = undefined;\n    } else if (this._connecting) {\n      await this._connecting;\n      await this.close();\n    }\n  }\n}\n"],"names":["MongoCursor","AbstractStoreCursor","constructor","store","cursor","advance","count","skip","next","then","value","_result","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","Error","close","toArray","identityTransformer","model","MongoQuery","AbstractSubscribeQuery","options","transformer","createMingoQuery","mingoQuery","criteria","test","mingo","Query","fetch","onFulfilled","createMongoCursor","map","_subscribe","callback","_includeInitial","getSubscribeStore","promise","type","initial","queryInfo","keyPath","unsubscribe","subscribe","action","filtered","prev","filter","object","changes","push","objects","keys","deleted","updated","reduce","acc","index","nextObject","length","stop","cancel","onRejected","sort","MongoStore","AbstractStore","connection","collectionName","_collection","getConnection","client","db","collection","err","reject","connectionFailed","createQuery","insertOne","ObjectID","toString","created","Date","ok","n","replaceOne","upsertOneWithInfo","$setOnInsert","$set","upsertedCount","updateOne","upsert","inserted","replaceSeveral","all","partialUpdateByKey","partialUpdate","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","updateMany","undefined","deleteByKey","deleteOne","deleteMany","selector","find","findOne","logger","Logger","MongoConnection","AbstractConnection","config","has","set","connectionString","get","connect","info","connectPromise","MongoClient","useNewUrlParser","on","warn","_connection","_connecting","catch","message","process","nextTick","exit"],"mappings":"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"}