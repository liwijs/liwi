{"version":3,"file":"index-node10-dev.cjs.js","sources":["../src/MongoCursor.ts","../src/MongoQuery.ts","../src/MongoStore.ts","../src/MongoConnection.ts","../src/index.ts"],"sourcesContent":["import { Cursor } from 'mongodb';\nimport { AbstractCursor } from 'liwi-store';\nimport MongoStore, { MongoModel, MongoKeyPath } from './MongoStore';\n\nexport default class MongoCursor<\n  Model extends MongoModel\n> extends AbstractCursor<Model, MongoKeyPath, MongoStore<Model>> {\n  // key in AbstractCursor\n\n  private cursor: Cursor;\n\n  private _result?: Model;\n\n  constructor(store: MongoStore<Model>, cursor: Cursor) {\n    super(store);\n    this.cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this.cursor.next().then((value) => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise<this> {\n    this.cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this.cursor.count(applyLimit);\n  }\n\n  result(): Promise<Model> {\n    if (!this._result) throw new Error('Cannot call result() before next()');\n    return Promise.resolve(this._result as Model);\n  }\n\n  close() {\n    if (this.cursor) {\n      this.cursor.close();\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<Model>> {\n    return this.cursor.toArray();\n  }\n}\n","import mingo from 'mingo';\nimport { SubscribeResult, SubscribeCallback } from 'liwi-store';\nimport { Changes, QueryOptions } from 'liwi-types';\nimport { AbstractSubscribeQuery, Actions } from 'liwi-subscribe-store';\nimport MongoStore, { MongoModel } from './MongoStore';\n\nexport default class MongoQuery<\n  Model extends MongoModel\n> extends AbstractSubscribeQuery<Model, MongoStore<Model>> {\n  private readonly store: MongoStore<Model>;\n\n  private readonly options: QueryOptions<Model>;\n\n  private mingoQuery?: mingo.Query;\n\n  constructor(store: MongoStore<Model>, options: QueryOptions<Model>) {\n    super();\n    this.store = store;\n    this.options = options;\n  }\n\n  createMingoQuery(): mingo.Query {\n    if (!this.mingoQuery) {\n      this.mingoQuery = new mingo.Query(this.options.criteria);\n    }\n\n    return this.mingoQuery;\n  }\n\n  async fetch<T>(onFulfilled: (result: Array<Model>) => T): Promise<T> {\n    const cursor = await this.createMongoCursor();\n    return cursor.toArray().then(onFulfilled);\n  }\n\n  _subscribe(\n    callback: SubscribeCallback<Model>,\n    _includeInitial: boolean,\n    args: Array<any>,\n  ): SubscribeResult {\n    const store = super.getSubscribeStore();\n    const mingoQuery: mingo.Query = this.createMingoQuery();\n\n    const promise =\n      _includeInitial &&\n      this.fetch((result: Array<Model>) => {\n        callback(null, [{ type: 'initial', initial: result }]);\n        return result;\n      });\n\n    const unsubscribe = store.subscribe((action: Actions<Model>) => {\n      const filtered = (action.type === 'inserted'\n        ? action.next\n        : action.prev\n      ).filter((object: Model) => mingoQuery.test(object));\n      const changes: Changes<Model> = [];\n      switch (action.type) {\n        case 'inserted':\n          changes.push({ type: 'inserted', objects: filtered });\n          break;\n        case 'deleted':\n          changes.push({\n            type: 'deleted',\n            keys: filtered.map((object: Model) => object[this.store.keyPath]),\n          });\n          break;\n        case 'updated': {\n          const { deleted, updated } = filtered.reduce(\n            (\n              acc: { deleted: Array<string>; updated: Array<Model> },\n              object: Model,\n              index: number,\n            ) => {\n              const nextObject = action.next[index];\n              if (!mingoQuery.test(nextObject)) {\n                acc.deleted.push(object[this.store.keyPath]);\n              } else {\n                acc.updated.push(nextObject);\n              }\n\n              return acc;\n            },\n            { deleted: [], updated: [] },\n          );\n\n          if (deleted.length !== 0) {\n            changes.push({ type: 'deleted', keys: deleted });\n          }\n          if (updated.length !== 0) {\n            changes.push({ type: 'updated', objects: updated });\n          }\n\n          break;\n        }\n        default:\n          throw new Error('Unsupported type');\n      }\n\n      if (changes.length === 0) return;\n\n      callback(null, changes);\n    });\n    // let _feed;\n    // const promise = this.queryCallback(this.store.query(), this.store.r)\n    //   .changes({\n    //     includeInitial: _includeInitial,\n    //     includeStates: true,\n    //     includeTypes: true,\n    //     includeOffsets: true,\n    //   })\n    //   .then((feed) => {\n    //     if (args.length === 0) {\n    //       _feed = feed;\n    //       delete this._promise;\n    //     }\n    //\n    //     feed.each(callback);\n    //     return feed;\n    //   });\n    //\n    // if (args.length === 0) this._promise = promise;\n\n    return {\n      stop: unsubscribe,\n      cancel: unsubscribe,\n      then: _includeInitial\n        ? (onFulfilled: (result: Array<Model>) => any) =>\n            (promise as Promise<Array<Model>>).then(onFulfilled)\n        : () => Promise.resolve(),\n    };\n  }\n\n  private async createMongoCursor() {\n    const cursor = await this.store.cursor(\n      this.options.criteria,\n      this.options.sort,\n    );\n\n    if (this.options.limit) {\n      await cursor.limit(this.options.limit);\n    }\n\n    return cursor;\n  }\n}\n","import { ObjectID, Collection, Db } from 'mongodb';\nimport { AbstractStore, UpsertResult } from 'liwi-store';\nimport {\n  BaseModel,\n  InsertType,\n  Criteria,\n  Sort,\n  Update,\n  QueryOptions,\n} from 'liwi-types';\nimport MongoConnection from './MongoConnection';\nimport MongoCursor from './MongoCursor';\nimport MongoQuery from './MongoQuery';\nimport { MongoKeyPath } from '.';\n\nexport type MongoKeyPath = '_id';\n\nexport interface MongoModel extends BaseModel {\n  _id: string;\n}\n\nexport type MongoInsertType<Model extends MongoModel> = InsertType<\n  Model,\n  MongoKeyPath\n>;\n\nexport interface MongoUpsertResult<Model extends MongoModel>\n  extends UpsertResult<Model> {\n  object: Model;\n  inserted: boolean;\n}\n\nexport default class MongoStore<Model extends MongoModel> extends AbstractStore<\n  Model,\n  MongoKeyPath,\n  MongoConnection,\n  MongoCursor<Model>,\n  MongoQuery<Model>\n> {\n  private _collection: Collection | Promise<Collection>;\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection, '_id');\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection().then(\n      (db: Db) => {\n        this._collection = db.collection(collectionName);\n        return this._collection;\n      },\n      (err: any) => {\n        this._collection = Promise.reject(err);\n        return this._collection;\n      },\n    );\n  }\n\n  get collection(): Promise<Collection> {\n    if (super.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  createQuery(options: QueryOptions<Model>): MongoQuery<Model> {\n    return new MongoQuery(this, options);\n  }\n\n  async insertOne(object: MongoInsertType<Model>): Promise<Model> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    const { result } = await collection.insertOne(object);\n    if (!result.ok || result.n !== 1) {\n      throw new Error('Fail to insert');\n    }\n\n    return object as Model;\n  }\n\n  async replaceOne(object: Model): Promise<Model> {\n    if (!object.updated) object.updated = new Date();\n\n    const collection = await this.collection;\n    await collection.updateOne({ _id: object._id }, object);\n    return object as Model;\n  }\n\n  async upsertOneWithInfo(\n    object: MongoInsertType<Model>,\n  ): Promise<MongoUpsertResult<Model>> {\n    const $setOnInsert = {\n      created: object.created || new Date(),\n    };\n\n    if (!object.updated) object.updated = new Date();\n\n    const $set = Object.assign({}, object);\n    delete $set.created;\n\n    const collection = await this.collection;\n\n    const { upsertedCount } = await collection.updateOne(\n      { _id: object._id },\n      { $set, $setOnInsert },\n      { upsert: true },\n    );\n\n    if (upsertedCount) {\n      object.created = $setOnInsert.created;\n    }\n\n    return { object: object as Model, inserted: !!upsertedCount };\n  }\n\n  replaceSeveral(objects: Array<Model>): Promise<Array<Model>> {\n    return Promise.all(objects.map((object: Model) => this.replaceOne(object)));\n  }\n\n  async partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    const collection = await this.collection;\n    const commandResult = await collection.updateOne(\n      { _id: key },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    const object = await this.findByKey(key);\n    return object as Model;\n  }\n\n  partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model> {\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void> {\n    return this.collection\n      .then((collection) => collection.updateMany(criteria, partialUpdate))\n      .then((res) => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteOne({ _id: key }))\n      .then(() => undefined);\n  }\n\n  deleteMany(selector: Criteria<Model>): Promise<void> {\n    return this.collection\n      .then((collection) => collection.deleteMany(selector))\n      .then(() => undefined);\n  }\n\n  cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<MongoCursor<Model>> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<Model | undefined> {\n    return this.collection.then((collection) =>\n      collection.findOne({ _id: key }),\n    );\n  }\n\n  findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined> {\n    return this.collection\n      .then((collection) => collection.find(criteria))\n      .then(sort && ((cursor) => cursor.sort(sort)))\n      .then((cursor) => cursor.limit(1).next());\n  }\n}\n","import Logger from 'nightingale-logger';\nimport { MongoClient, Db } from 'mongodb';\nimport { AbstractConnection } from 'liwi-store';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection?: Db;\n\n  _connecting?: Promise<Db>;\n\n  connectionFailed?: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${\n        config.has('user')\n          ? `${config.get('user')}:${config.get('password')}@`\n          : ''\n      }` +\n      `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString: string) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection closed');\n          };\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => {\n            throw new Error('MongoDB connection timeout');\n          };\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection as Db);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = undefined;\n        this.getConnection = () => Promise.resolve(this._connection as Db);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          // eslint-disable-next-line unicorn/no-process-exit\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  async close(): Promise<void> {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      await this._connection.close();\n      this._connection = undefined;\n    } else if (this._connecting) {\n      await this._connecting;\n      await this.close();\n    }\n  }\n}\n","/* eslint-disable typescript/no-use-before-define */\nimport * as MongoStoreExports from './MongoStore';\n\nexport { default as MongoStore } from './MongoStore';\nexport { default as MongoConnection } from './MongoConnection';\n\nexport type MongoModel = MongoStoreExports.MongoModel;\nexport type MongoKeyPath = MongoStoreExports.MongoKeyPath;\nexport type MongoInsertType<\n  Model extends MongoModel\n> = MongoStoreExports.MongoInsertType<Model>;\n"],"names":["MongoCursor","AbstractCursor","constructor","store","cursor","advance","count","skip","next","then","value","_result","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","Error","close","toArray","MongoQuery","AbstractSubscribeQuery","options","createMingoQuery","mingoQuery","mingo","Query","criteria","fetch","onFulfilled","createMongoCursor","_subscribe","callback","_includeInitial","getSubscribeStore","promise","type","initial","unsubscribe","subscribe","action","filtered","prev","filter","object","test","changes","push","objects","keys","map","keyPath","deleted","updated","reduce","acc","index","nextObject","length","stop","cancel","sort","MongoStore","AbstractStore","connection","collectionName","_collection","getConnection","db","collection","err","reject","connectionFailed","createQuery","insertOne","ObjectID","toString","created","Date","ok","n","replaceOne","updateOne","upsertOneWithInfo","$setOnInsert","$set","Object","assign","upsertedCount","upsert","inserted","replaceSeveral","all","partialUpdateByKey","partialUpdate","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","updateMany","undefined","deleteByKey","deleteOne","deleteMany","selector","find","findOne","logger","Logger","MongoConnection","AbstractConnection","config","has","set","connectionString","get","connect","info","connectPromise","MongoClient","on","warn","_connection","_connecting","catch","message","process","nextTick","exit"],"mappings":"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"}