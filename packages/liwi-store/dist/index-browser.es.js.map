{"version":3,"file":"index-browser.es.js","sources":["../src/AbstractConnection.ts","../src/AbstractCursor.ts","../src/AbstractQuery.ts","../src/AbstractStore.ts"],"sourcesContent":["export default abstract class AbstractConnection {\n  abstract getConnection(): Promise<any>;\n\n  abstract close(): Promise<void>;\n}\n","/* eslint-disable no-await-in-loop */\n\nimport { BaseModel } from 'liwi-types';\nimport AbstractStore from './AbstractStore';\n\nexport default abstract class AbstractCursor<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Store extends AbstractStore<Model, KeyPath, any, any>\n> {\n  key: any;\n\n  _store: Store;\n\n  constructor(store: Store) {\n    this._store = store;\n  }\n\n  get store(): Store {\n    return this._store;\n  }\n\n  abstract close(): Promise<void> | void;\n\n  abstract next(): Promise<any>;\n\n  nextResult(): Promise<Model> {\n    return this.next().then(() => this.result());\n  }\n\n  abstract limit(newLimit: number): Promise<this>;\n\n  abstract count(applyLimit: boolean /*  = false */): Promise<number>;\n\n  abstract toArray(): Promise<Array<Model>>;\n\n  result(): Promise<Model> {\n    if (!this.key) throw new Error('Cannot call result() before next()');\n    return this.store.findByKey(this.key) as Promise<Model>;\n  }\n\n  delete(): Promise<void> {\n    return this.store.deleteByKey(this.key);\n  }\n\n  async forEachKeys(callback: (key: any) => any): Promise<void> {\n    while (true) {\n      const key = await this.next();\n      if (!key) return;\n\n      await callback(key);\n    }\n  }\n\n  forEach(callback: (result: Model) => any): Promise<void> {\n    return this.forEachKeys(() =>\n      this.result().then((result) => callback(result)),\n    );\n  }\n\n  *keysIterator() {\n    while (true) {\n      yield this.next();\n    }\n  }\n\n  *[Symbol.iterator]() {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const keyPromise of this.keysIterator()) {\n      yield keyPromise.then((key) => key && this.result());\n    }\n  }\n\n  // TODO Symbol.asyncIterator, https://phabricator.babeljs.io/T7356\n  /*\n    async *keysAsyncIterator() {\n        while (true) {\n             const key = await this.next();\n             if (!key) return;\n\n             yield key;\n        }\n     }\n\n     async *[Symbol.asyncIterator] {\n        for await (let key of this.keysAsyncIterator()) {\n            yield await this.result();\n        }\n     }\n     */\n}\n","import AbstractStore from './AbstractStore';\n\nexport interface SubscribeResult {\n  cancel: () => void;\n  stop: () => void;\n  then: (cb: any) => Promise<any>;\n}\n\nexport type Callback = (err: Error | null, result: any) => void;\n\nexport default abstract class AbstractQuery<\n  Store extends AbstractStore<any, any, any, any>\n> {\n  store: Store;\n\n  constructor(store: Store) {\n    this.store = store;\n  }\n\n  abstract fetch(onFulfilled?: (value: any) => any): Promise<any>;\n\n  fetchAndSubscribe(callback: Callback, ...args: Array<any>) {\n    return this._subscribe(callback, true, args);\n  }\n\n  subscribe(callback: Callback, ...args: Array<any>) {\n    return this._subscribe(callback, false, args);\n  }\n\n  abstract _subscribe(\n    callback: Callback,\n    _includeInitial: boolean,\n    args: Array<any>,\n  ): SubscribeResult;\n}\n","import assert from 'assert';\nimport { BaseModel, InsertType, Update, Criteria, Sort } from 'liwi-types';\nimport AbstractConnection from './AbstractConnection';\nimport AbstractCursor from './AbstractCursor';\n\nexport default abstract class AbstractStore<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Connection extends AbstractConnection,\n  Cursor extends AbstractCursor<Model, KeyPath, any>\n> {\n  _connection: Connection;\n\n  readonly keyPath: KeyPath;\n\n  constructor(connection: Connection, keyPath: KeyPath) {\n    assert(connection);\n    this._connection = connection;\n    this.keyPath = keyPath;\n  }\n\n  get connection(): Connection {\n    return this._connection;\n  }\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Array<any>> {\n    return this.cursor(criteria, sort).then((cursor: Cursor) =>\n      cursor.toArray(),\n    );\n  }\n\n  abstract insertOne(object: InsertType<Model, KeyPath>): Promise<Model>;\n\n  abstract replaceOne(object: Model): Promise<Model>;\n\n  abstract upsertOne(\n    object: InsertType<Model, KeyPath>,\n  ): Promise<Model | Model>;\n\n  abstract partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n  ): Promise<Model>;\n\n  abstract partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model>;\n\n  abstract partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void>;\n\n  abstract deleteByKey(key: any): Promise<void>;\n\n  abstract cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Cursor>;\n\n  abstract findByKey(key: any): Promise<Model | undefined>;\n\n  abstract findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined>;\n}\n"],"names":["AbstractConnection","Symbol","iterator","AbstractCursor","store","key","_store","nextResult","next","then","result","Error","findByKey","delete","deleteByKey","forEachKeys","callback","forEach","keysIterator","keyPromise","AbstractQuery","fetchAndSubscribe","args","_subscribe","subscribe","AbstractStore","connection","keyPath","_connection","assert","findAll","criteria","sort","cursor","toArray"],"mappings":";;IAA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBCkE1BC,MAAM,CAACC;;;IA7DmBC;;;0BAShBC,KAAZ,EAA0B;SAJ1BC,GAI0B;SAF1BC,MAE0B;SACnBA,MAAL,GAAcF,KAAd;;;;;SAWFG,mCAA6B;;;WACpB,KAAKC,IAAL,GAAYC,IAAZ,CAAiB;aAAM,KAAI,CAACC,MAAL,EAAN;KAAjB,CAAP;;;SASFA,2BAAyB;QACnB,CAAC,KAAKL,GAAV,EAAe,MAAM,IAAIM,KAAJ,CAAU,oCAAV,CAAN;WACR,KAAKP,KAAL,CAAWQ,SAAX,CAAqB,KAAKP,GAA1B,CAAP;;;SAGFQ,4BAAwB;WACf,KAAKT,KAAL,CAAWU,WAAX,CAAuB,KAAKT,GAA5B,CAAP;;;SAGIU;;;;;6CAAYC;;;;;;;qBAEI,KAAKR,IAAL;;;cAAZH;;kBACDA;;;;;;;;;qBAECW,QAAQ,CAACX,GAAD;;;;;;;;;;;;;;;;;;;SAIlBY,2BAAQD,UAAiD;;;WAChD,KAAKD,WAAL,CAAiB;aACtB,MAAI,CAACL,MAAL,GAAcD,IAAd,CAAmB,UAACC,MAAD;eAAYM,QAAQ,CAACN,MAAD,CAApB;OAAnB,CADsB;KAAjB,CAAP;;;SAKDQ;;;;;;;;mBAES,KAAKV,IAAL,EAAN;;;;;;;;;;;;;;;;;;;;;;;;wBAMuB,KAAKU,YAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAdC;;mBACHA,UAAU,CAACV,IAAX,CAAgB,UAACJ,GAAD;qBAASA,GAAG,IAAI,MAAI,CAACK,MAAL,EAAhB;aAAhB,CAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAnDe;aACV,KAAKJ,MAAZ;;;;;;;ICT0Bc;;;yBAKhBhB,KAAZ,EAA0B;SAF1BA,KAE0B;SACnBA,KAAL,GAAaA,KAAb;;;;;SAKFiB,+CAAkBL,UAAyC;cAAlBM,IAAkB;;kCAAlBA,IAAkB;MAAlBA,IAAkB;;;WAClD,KAAKC,UAAL,CAAgBP,QAAhB,EAA0B,IAA1B,EAAgCM,IAAhC,CAAP;;;SAGFE,+BAAUR,UAAyC;eAAlBM,IAAkB;;mCAAlBA,IAAkB;MAAlBA,IAAkB;;;WAC1C,KAAKC,UAAL,CAAgBP,QAAhB,EAA0B,KAA1B,EAAiCM,IAAjC,CAAP;;;;;;ICrB0BG;;;yBAUhBC,UAAZ,EAAoCC,OAApC,EAAsD;SAJtDC,WAIsD;SAF7CD,OAE6C;IACpDE,MAAM,CAACH,UAAD,CAAN;SACKE,WAAL,GAAmBF,UAAnB;SACKC,OAAL,GAAeA,OAAf;;;;;SAOFG,2BAAQC,UAA4BC,MAAyC;WACpE,KAAKC,MAAL,CAAYF,QAAZ,EAAsBC,IAAtB,EAA4BvB,IAA5B,CAAiC,UAACwB,MAAD;aACtCA,MAAM,CAACC,OAAP,EADsC;KAAjC,CAAP;;;;;wBAL2B;aACpB,KAAKN,WAAZ;;;;;;;;;"}