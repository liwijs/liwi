{"version":3,"file":"index-browser-dev.es.js","sources":["../src/AbstractConnection.ts","../src/AbstractCursor.ts","../src/AbstractStoreCursor.ts","../src/AbstractQuery.ts","../src/AbstractStore.ts"],"sourcesContent":["export default abstract class AbstractConnection {\n  abstract getConnection(): Promise<any>;\n\n  abstract close(): Promise<void>;\n}\n","/* eslint-disable no-await-in-loop */\n\nimport { BaseModel } from 'liwi-types';\n\nexport default abstract class AbstractCursor<\n  Model extends BaseModel,\n  KeyPath extends string\n> {\n  abstract close(): Promise<void> | void;\n\n  abstract next(): Promise<any>;\n\n  nextResult(): Promise<Model> {\n    return this.next().then(() => this.result());\n  }\n\n  abstract limit(newLimit: number): Promise<this>;\n\n  abstract count(applyLimit: boolean /*  = false */): Promise<number>;\n\n  abstract toArray(): Promise<Model[]>;\n\n  abstract result(): Promise<Model>;\n\n  async forEachKeys(callback: (key: any) => any): Promise<void> {\n    while (true) {\n      const key = await this.next();\n      if (!key) return;\n\n      await callback(key);\n    }\n  }\n\n  forEach(callback: (result: Model) => any): Promise<void> {\n    return this.forEachKeys(() =>\n      this.result().then((result) => callback(result)),\n    );\n  }\n\n  *keysIterator() {\n    while (true) {\n      yield this.next();\n    }\n  }\n\n  *[Symbol.iterator]() {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const keyPromise of this.keysIterator()) {\n      yield keyPromise.then((key) => key && this.result());\n    }\n  }\n\n  // TODO Symbol.asyncIterator, https://phabricator.babeljs.io/T7356\n  /*\n    async *keysAsyncIterator() {\n        while (true) {\n             const key = await this.next();\n             if (!key) return;\n\n             yield key;\n        }\n     }\n\n     async *[Symbol.asyncIterator] {\n        for await (let key of this.keysAsyncIterator()) {\n            yield await this.result();\n        }\n     }\n     */\n}\n","/* eslint-disable no-await-in-loop */\n\nimport { BaseModel } from 'liwi-types';\nimport AbstractCursor from './AbstractCursor';\nimport InternalCommonStoreClient from './InternalCommonStoreClient';\n\nexport default abstract class AbstractStoreCursor<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Store extends InternalCommonStoreClient<Model, KeyPath, any>\n> extends AbstractCursor<Model, KeyPath> {\n  key: any;\n\n  protected _store: Store;\n\n  constructor(store: Store) {\n    super();\n    this._store = store;\n  }\n\n  get store(): Store {\n    return this._store;\n  }\n\n  overrideStore(store: Store) {\n    this._store = store;\n  }\n\n  result(): Promise<Model> {\n    if (!this.key) throw new Error('Cannot call result() before next()');\n    return this.store.findByKey(this.key) as Promise<Model>;\n  }\n\n  delete(): Promise<void> {\n    return this.store.deleteByKey(this.key);\n  }\n}\n","import { BaseModel, Changes, Fields, Criteria, Sort } from 'liwi-types';\n\nexport interface QueryOptions<Model extends BaseModel> {\n  fields?: Fields<Model>;\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n}\n\nexport interface SubscribeResult {\n  cancel: () => void;\n  stop: () => void;\n  then: (cb: any) => Promise<any>;\n}\n\nexport type SubscribeCallback<Model> = (\n  err: Error | null,\n  changes: Changes<Model>,\n) => void;\n\nexport default abstract class AbstractQuery<Model extends BaseModel> {\n  abstract fetch(onFulfilled?: (value: any) => any): Promise<any>;\n\n  fetchAndSubscribe(callback: SubscribeCallback<Model>, ...args: any[]) {\n    return this._subscribe(callback, true, args);\n  }\n\n  subscribe(callback: SubscribeCallback<Model>, ...args: any[]) {\n    return this._subscribe(callback, false, args);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<Model>,\n    _includeInitial: boolean,\n    args: any[],\n  ): SubscribeResult;\n}\n","import assert from 'assert';\nimport {\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n} from 'liwi-types';\nimport Store, { UpsertResult } from './Store';\nimport AbstractConnection from './AbstractConnection';\nimport AbstractStoreCursor from './AbstractStoreCursor';\nimport AbstractQuery from './AbstractQuery';\n\nexport default abstract class AbstractStore<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Connection extends AbstractConnection,\n  Cursor extends AbstractStoreCursor<Model, KeyPath, any>,\n  Query extends AbstractQuery<Model>\n> implements Store<Model, KeyPath, Connection, Cursor, Query> {\n  private readonly _connection: Connection;\n\n  readonly keyPath: KeyPath;\n\n  constructor(connection: Connection, keyPath: KeyPath) {\n    assert(connection);\n    this._connection = connection;\n    this.keyPath = keyPath;\n  }\n\n  get connection(): Connection {\n    return this._connection;\n  }\n\n  abstract createQuery(options: QueryOptions<Model>): Query;\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.cursor(criteria, sort).then((cursor: Cursor) =>\n      cursor.toArray(),\n    );\n  }\n\n  abstract findByKey(key: any): Promise<Model | undefined>;\n\n  abstract findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined>;\n\n  abstract cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Cursor>;\n\n  abstract insertOne(object: InsertType<Model, KeyPath>): Promise<Model>;\n\n  abstract replaceOne(object: Model): Promise<Model>;\n\n  abstract replaceSeveral(objects: Model[]): Promise<Model[]>;\n\n  async upsertOne(object: InsertType<Model, KeyPath>): Promise<Model> {\n    const result = await this.upsertOneWithInfo(object);\n    return result.object;\n  }\n\n  abstract upsertOneWithInfo(\n    object: InsertType<Model, KeyPath>,\n  ): Promise<UpsertResult<Model>>;\n\n  abstract partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n  ): Promise<Model>;\n\n  abstract partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model>;\n\n  abstract partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void>;\n\n  abstract deleteByKey(key: any): Promise<void>;\n\n  deleteOne(object: Model): Promise<void> {\n    return this.deleteByKey(object[this.keyPath]);\n  }\n\n  abstract deleteMany(selector: Criteria<Model>): Promise<void>;\n}\n"],"names":["AbstractConnection","AbstractCursor","nextResult","next","then","result","forEachKeys","callback","key","forEach","keysIterator","Symbol","iterator","keyPromise","AbstractStoreCursor","store","_store","overrideStore","Error","findByKey","delete","deleteByKey","AbstractQuery","fetchAndSubscribe","args","_subscribe","subscribe","AbstractStore","connection","keyPath","assert","_connection","findAll","criteria","sort","cursor","toArray","upsertOne","object","upsertOneWithInfo","deleteOne"],"mappings":";;IAA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA9B;IAI8BC;;;;;;;SAQ5BC,aAAA,sBAA6B;;;WACpB,KAAKC,IAAL,GAAYC,IAAZ,CAAiB;aAAM,KAAI,CAACC,MAAL,EAAN;KAAjB,CAAP;;;SAWIC;;;;;4BAAN,iBAAkBC,QAAlB;;;;;;;qBAEsB,KAAKJ,IAAL,EAFtB;;;cAEUK,GAFV;;kBAGSA,GAHT;;;;;;;;;qBAKUD,QAAQ,CAACC,GAAD,CALlB;;;;;;;;;;;;;;;;;;;SASAC,UAAA,iBAAQF,QAAR,EAAyD;;;WAChD,KAAKD,WAAL,CAAiB;aACtB,MAAI,CAACD,MAAL,GAAcD,IAAd,CAAmB,UAACC,MAAD;eAAYE,QAAQ,CAACF,MAAD,CAApB;OAAnB,CADsB;KAAjB,CAAP;;;SAKDK;;0BAAD;;;;;;mBAEU,KAAKP,IAAL,EAAN;;;;;;;;;;;;;SAIFQ,MAAM,CAACC;;0BAAT;;;;;;;;;wBAE2B,KAAKF,YAAL,EAF3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAEaG,UAFb;;mBAGUA,UAAU,CAACT,IAAX,CAAgB,UAACI,GAAD;qBAASA,GAAG,IAAI,MAAI,CAACH,MAAL,EAAhB;aAAhB,CAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC1CwBS;;;;;+BAShBC,KAAZ,EAA0B;gBACxB,0BADwB;;UAEnBC,MAAL,GAAcD,KAAd;;;;;;SAOFE,gBAAA,uBAAcF,KAAd,EAA4B;SACrBC,MAAL,GAAcD,KAAd;;;SAGFV,SAAA,kBAAyB;QACnB,CAAC,KAAKG,GAAV,EAAe,MAAM,IAAIU,KAAJ,CAAU,oCAAV,CAAN;WACR,KAAKH,KAAL,CAAWI,SAAX,CAAqB,KAAKX,GAA1B,CAAP;;;SAGFY,SAAA,mBAAwB;WACf,KAAKL,KAAL,CAAWM,WAAX,CAAuB,KAAKb,GAA5B,CAAP;;;;;wBAdiB;aACV,KAAKQ,MAAZ;;;;;EAXMf;;ICSoBqB;;;;;;;SAG5BC,oBAAA,2BAAkBhB,QAAlB,EAAsE;cAAbiB,IAAa;;kCAAbA,IAAa;MAAbA,IAAa;;;WAC7D,KAAKC,UAAL,CAAgBlB,QAAhB,EAA0B,IAA1B,EAAgCiB,IAAhC,CAAP;;;SAGFE,YAAA,mBAAUnB,QAAV,EAA8D;eAAbiB,IAAa;;mCAAbA,IAAa;MAAbA,IAAa;;;WACrD,KAAKC,UAAL,CAAgBlB,QAAhB,EAA0B,KAA1B,EAAiCiB,IAAjC,CAAP;;;;;;ICb0BG;;;yBAWhBC,UAAZ,EAAoCC,OAApC,EAAsD;IACpDC,MAAM,CAACF,UAAD,CAAN;SACKG,WAAL,GAAmBH,UAAnB;SACKC,OAAL,GAAeA,OAAf;;;;;SASFG,UAAA,iBAAQC,QAAR,EAAoCC,IAApC,EAA0E;WACjE,KAAKC,MAAL,CAAYF,QAAZ,EAAsBC,IAAtB,EAA4B9B,IAA5B,CAAiC,UAAC+B,MAAD;aACtCA,MAAM,CAACC,OAAP,EADsC;KAAjC,CAAP;;;SAuBIC;;;;;4BAAN,iBAAgBC,MAAhB;;;;;;;qBACuB,KAAKC,iBAAL,CAAuBD,MAAvB,CADvB;;;cACQjC,MADR;+CAESA,MAAM,CAACiC,MAFhB;;;;;;;;;;;;;;;SA0BAE,YAAA,mBAAUF,MAAV,EAAwC;WAC/B,KAAKjB,WAAL,CAAiBiB,MAAM,CAAC,KAAKT,OAAN,CAAvB,CAAP;;;;;wBAzD2B;aACpB,KAAKE,WAAZ;;;;;;;;;"}