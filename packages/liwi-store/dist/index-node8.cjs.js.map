{"version":3,"file":"index-node8.cjs.js","sources":["../src/AbstractConnection.ts","../src/AbstractCursor.ts","../src/AbstractStoreCursor.ts","../src/AbstractQuery.ts","../src/AbstractStore.ts"],"sourcesContent":["export default abstract class AbstractConnection {\n  abstract getConnection(): Promise<any>;\n\n  abstract close(): Promise<void>;\n}\n","/* eslint-disable no-await-in-loop */\n\nimport { BaseModel } from 'liwi-types';\n\nexport default abstract class AbstractCursor<\n  Model extends BaseModel,\n  KeyPath extends string\n> {\n  abstract close(): Promise<void> | void;\n\n  abstract next(): Promise<any>;\n\n  nextResult(): Promise<Model> {\n    return this.next().then(() => this.result());\n  }\n\n  abstract limit(newLimit: number): Promise<this>;\n\n  abstract count(applyLimit: boolean /*  = false */): Promise<number>;\n\n  abstract toArray(): Promise<Model[]>;\n\n  abstract result(): Promise<Model>;\n\n  async forEachKeys(callback: (key: any) => any): Promise<void> {\n    while (true) {\n      const key = await this.next();\n      if (!key) return;\n\n      await callback(key);\n    }\n  }\n\n  forEach(callback: (result: Model) => any): Promise<void> {\n    return this.forEachKeys(() =>\n      this.result().then((result) => callback(result)),\n    );\n  }\n\n  *keysIterator() {\n    while (true) {\n      yield this.next();\n    }\n  }\n\n  *[Symbol.iterator]() {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const keyPromise of this.keysIterator()) {\n      yield keyPromise.then((key) => key && this.result());\n    }\n  }\n\n  // TODO Symbol.asyncIterator, https://phabricator.babeljs.io/T7356\n  /*\n    async *keysAsyncIterator() {\n        while (true) {\n             const key = await this.next();\n             if (!key) return;\n\n             yield key;\n        }\n     }\n\n     async *[Symbol.asyncIterator] {\n        for await (let key of this.keysAsyncIterator()) {\n            yield await this.result();\n        }\n     }\n     */\n}\n","/* eslint-disable no-await-in-loop */\n\nimport { BaseModel } from 'liwi-types';\nimport AbstractCursor from './AbstractCursor';\nimport InternalCommonStoreClient from './InternalCommonStoreClient';\n\nexport default abstract class AbstractStoreCursor<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Store extends InternalCommonStoreClient<Model, KeyPath, any>\n> extends AbstractCursor<Model, KeyPath> {\n  key: any;\n\n  protected _store: Store;\n\n  constructor(store: Store) {\n    super();\n    this._store = store;\n  }\n\n  get store(): Store {\n    return this._store;\n  }\n\n  overrideStore(store: Store) {\n    this._store = store;\n  }\n\n  result(): Promise<Model> {\n    if (!this.key) throw new Error('Cannot call result() before next()');\n    return this.store.findByKey(this.key) as Promise<Model>;\n  }\n\n  delete(): Promise<void> {\n    return this.store.deleteByKey(this.key);\n  }\n}\n","import { BaseModel, Changes, Fields, Criteria, Sort } from 'liwi-types';\n\nexport interface QueryOptions<Model extends BaseModel> {\n  fields?: Fields<Model>;\n  criteria?: Criteria<Model>;\n  sort?: Sort<Model>;\n}\n\nexport interface SubscribeResult<Value> {\n  cancel: () => void;\n  stop: () => void;\n  then: (\n    onFulfilled: (value: Value) => any,\n    onRejected?: (error: any) => any,\n  ) => Promise<any>;\n}\n\nexport type SubscribeCallback<Value> = (\n  err: Error | null,\n  changes: Changes<Value>,\n) => void;\n\nexport default abstract class AbstractQuery<Value> {\n  abstract fetch(onFulfilled?: (value: Value[]) => any): Promise<any>;\n\n  fetchAndSubscribe(callback: SubscribeCallback<Value>) {\n    return this._subscribe(callback, true);\n  }\n\n  subscribe(callback: SubscribeCallback<Value>) {\n    return this._subscribe(callback, false);\n  }\n\n  abstract _subscribe(\n    callback: SubscribeCallback<Value>,\n    _includeInitial: boolean,\n  ): SubscribeResult<Value[]>;\n}\n","import assert from 'assert';\nimport {\n  BaseModel,\n  InsertType,\n  Update,\n  Criteria,\n  Sort,\n  QueryOptions,\n  Transformer,\n} from 'liwi-types';\nimport Store, { UpsertResult } from './Store';\nimport AbstractConnection from './AbstractConnection';\nimport AbstractStoreCursor from './AbstractStoreCursor';\nimport AbstractQuery from './AbstractQuery';\n\nexport default abstract class AbstractStore<\n  Model extends BaseModel,\n  KeyPath extends string,\n  Connection extends AbstractConnection,\n  Cursor extends AbstractStoreCursor<Model, KeyPath, any>\n> implements Store<Model, KeyPath, Connection, Cursor> {\n  private readonly _connection: Connection;\n\n  public readonly keyPath: KeyPath;\n\n  public constructor(connection: Connection, keyPath: KeyPath) {\n    assert(connection);\n    this._connection = connection;\n    this.keyPath = keyPath;\n  }\n\n  get connection(): Connection {\n    return this._connection;\n  }\n\n  abstract createQuery<Transformed>(\n    options: QueryOptions<Model>,\n    transformer?: Transformer<Model, Transformed>,\n  ): AbstractQuery<Transformed>;\n\n  findAll(criteria?: Criteria<Model>, sort?: Sort<Model>): Promise<Model[]> {\n    return this.cursor(criteria, sort).then((cursor: Cursor) =>\n      cursor.toArray(),\n    );\n  }\n\n  abstract findByKey(key: any): Promise<Model | undefined>;\n\n  abstract findOne(\n    criteria: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Model | undefined>;\n\n  abstract cursor(\n    criteria?: Criteria<Model>,\n    sort?: Sort<Model>,\n  ): Promise<Cursor>;\n\n  abstract insertOne(object: InsertType<Model, KeyPath>): Promise<Model>;\n\n  abstract replaceOne(object: Model): Promise<Model>;\n\n  abstract replaceSeveral(objects: Model[]): Promise<Model[]>;\n\n  async upsertOne(object: InsertType<Model, KeyPath>): Promise<Model> {\n    const result = await this.upsertOneWithInfo(object);\n    return result.object;\n  }\n\n  abstract upsertOneWithInfo(\n    object: InsertType<Model, KeyPath>,\n  ): Promise<UpsertResult<Model>>;\n\n  abstract partialUpdateByKey(\n    key: any,\n    partialUpdate: Update<Model>,\n  ): Promise<Model>;\n\n  abstract partialUpdateOne(\n    object: Model,\n    partialUpdate: Update<Model>,\n  ): Promise<Model>;\n\n  abstract partialUpdateMany(\n    criteria: Criteria<Model>,\n    partialUpdate: Update<Model>,\n  ): Promise<void>;\n\n  abstract deleteByKey(key: any): Promise<void>;\n\n  deleteOne(object: Model): Promise<void> {\n    return this.deleteByKey(object[this.keyPath]);\n  }\n\n  abstract deleteMany(selector: Criteria<Model>): Promise<void>;\n}\n"],"names":["AbstractConnection","AbstractCursor","nextResult","next","then","result","forEachKeys","callback","key","forEach","keysIterator","Symbol","iterator","keyPromise","AbstractStoreCursor","constructor","store","_store","overrideStore","Error","findByKey","delete","deleteByKey","AbstractQuery","fetchAndSubscribe","_subscribe","subscribe","AbstractStore","connection","keyPath","assert","_connection","findAll","criteria","sort","cursor","toArray","upsertOne","object","upsertOneWithInfo","deleteOne"],"mappings":";;;;;;;;AAAe,MAAeA,kBAAf,CAAkC;;ACAjD;AAIA,AAAe,MAAeC,cAAf,CAGb;EAKAC,UAAU,GAAmB;WACpB,KAAKC,IAAL,GAAYC,IAAZ,CAAiB,MAAM,KAAKC,MAAL,EAAvB,CAAP;;;QAWIC,WAAN,CAAkBC,QAAlB,EAA8D;WACrD,IAAP,EAAa;YACLC,GAAG,GAAG,MAAM,KAAKL,IAAL,EAAlB;UACI,CAACK,GAAL,EAAU;YAEJD,QAAQ,CAACC,GAAD,CAAd;;;;EAIJC,OAAO,CAACF,QAAD,EAAkD;WAChD,KAAKD,WAAL,CAAiB,MACtB,KAAKD,MAAL,GAAcD,IAAd,CAAoBC,MAAD,IAAYE,QAAQ,CAACF,MAAD,CAAvC,CADK,CAAP;;;GAKDK,YAAD,GAAgB;WACP,IAAP,EAAa;YACL,KAAKP,IAAL,EAAN;;;;IAIFQ,MAAM,CAACC,QAAT,IAAqB;;SAEd,MAAMC,UAAX,IAAyB,KAAKH,YAAL,EAAzB,EAA8C;YACtCG,UAAU,CAACT,IAAX,CAAiBI,GAAD,IAASA,GAAG,IAAI,KAAKH,MAAL,EAAhC,CAAN;;GAzCJ;;;;;;;;;;;;;;;;;;;;ACPF;AAGA,AAGe,MAAeS,mBAAf,SAILb,cAJK,CAI0B;EAKvCc,WAAW,CAACC,KAAD,EAAe;;SAEnBC,MAAL,GAAcD,KAAd;;;MAGEA,KAAJ,GAAmB;WACV,KAAKC,MAAZ;;;EAGFC,aAAa,CAACF,KAAD,EAAe;SACrBC,MAAL,GAAcD,KAAd;;;EAGFX,MAAM,GAAmB;QACnB,CAAC,KAAKG,GAAV,EAAe,MAAM,IAAIW,KAAJ,CAAU,oCAAV,CAAN;WACR,KAAKH,KAAL,CAAWI,SAAX,CAAqB,KAAKZ,GAA1B,CAAP;;;EAGFa,MAAM,GAAkB;WACf,KAAKL,KAAL,CAAWM,WAAX,CAAuB,KAAKd,GAA5B,CAAP;;;;;ACZW,MAAee,aAAf,CAAoC;EAGjDC,iBAAiB,CAACjB,QAAD,EAAqC;WAC7C,KAAKkB,UAAL,CAAgBlB,QAAhB,EAA0B,IAA1B,CAAP;;;EAGFmB,SAAS,CAACnB,QAAD,EAAqC;WACrC,KAAKkB,UAAL,CAAgBlB,QAAhB,EAA0B,KAA1B,CAAP;;;;;ACfW,MAAeoB,aAAf,CAKwC;EAK9CZ,WAAP,CAAmBa,UAAnB,EAA2CC,OAA3C,EAA6D;IAC3DC,MAAM,CAACF,UAAD,CAAN;SACKG,WAAL,GAAmBH,UAAnB;SACKC,OAAL,GAAeA,OAAf;;;MAGED,UAAJ,GAA6B;WACpB,KAAKG,WAAZ;;;EAQFC,OAAO,CAACC,QAAD,EAA6BC,IAA7B,EAAmE;WACjE,KAAKC,MAAL,CAAYF,QAAZ,EAAsBC,IAAtB,EAA4B9B,IAA5B,CAAkC+B,MAAD,IACtCA,MAAM,CAACC,OAAP,EADK,CAAP;;;QAuBIC,SAAN,CAAgBC,MAAhB,EAAoE;UAC5DjC,MAAM,GAAG,MAAM,KAAKkC,iBAAL,CAAuBD,MAAvB,CAArB;WACOjC,MAAM,CAACiC,MAAd;;;EAwBFE,SAAS,CAACF,MAAD,EAA+B;WAC/B,KAAKhB,WAAL,CAAiBgB,MAAM,CAAC,KAAKT,OAAN,CAAvB,CAAP;;;;;;;;;;;"}