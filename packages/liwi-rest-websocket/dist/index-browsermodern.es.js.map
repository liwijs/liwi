{"version":3,"file":"index-browsermodern.es.js","sources":["../src/index.js"],"sourcesContent":["import Logger from 'nightingale-logger';\nimport { encode, decode } from 'extended-json';\n\nconst logger = new Logger('liwi:rest-websocket');\n\nexport default function init(io, restService) {\n  io.on('connection', socket => {\n    const openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on(\n      'rest',\n      (\n        { type, restName, json }: { json?: ?string, restName: string, type: string },\n        args: ?Array<any> | Function,\n        callback: ?Function,\n      ) => {\n        try {\n          if (json) {\n            if (!PRODUCTION && callback) {\n              throw new Error('Cannot have args and json.');\n            }\n\n            callback = args;\n            args = decode(json);\n            if (!Array.isArray(args)) {\n              logger.debug('args', { args });\n\n              if (callback) {\n                throw new Error('Invalid args');\n              }\n            }\n          }\n\n          if (!callback) {\n            logger[!PRODUCTION ? 'warn' : 'error']('callback missing');\n            return;\n          }\n\n          const restResource = restService.get(restName);\n\n          logger.info('rest', { type, restName, args });\n          switch (type) {\n            case 'cursor toArray': {\n              const [options] = args;\n              return restService\n                .createCursor(restResource, socket.user, options)\n                .then(cursor => cursor.toArray())\n                .then(results => callback(null, encode(results)))\n                .catch(err => {\n                  logger.error(type, err);\n                  callback(err.message);\n                });\n            }\n\n            case 'insertOne':\n            case 'updateOne':\n            case 'updateSeveral':\n            case 'partialUpdateByKey':\n            case 'partialUpdateOne':\n            case 'partialUpdateMany':\n            case 'deleteByKey':\n            case 'deleteOne':\n            case 'findOne':\n              try {\n                if (!PRODUCTION && !restResource[type]) {\n                  throw new Error(`rest: ${restName}.${type} is not available`);\n                }\n\n                // eslint-disable-next-line prettier/prettier\n                return restResource[type](socket.user, ...args)\n                  .then(result => callback(null, encode(result)))\n                  .catch(err => {\n                    logger.error(type, { err });\n                    callback(err.message || err);\n                  });\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            case 'fetch':\n            case 'subscribe':\n            case 'fetchAndSubscribe':\n              try {\n                const [key, eventName, otherArgs = []] = args;\n\n                if (!key.startsWith('query')) {\n                  throw new Error('Invalid query key');\n                }\n\n                const query = restResource.queries[key]; // todo pass connected user\n                if (!query) {\n                  throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n                }\n\n                if (type === 'fetch') {\n                  return query[type](\n                    result => callback(null, result && encode(result)),\n                    ...otherArgs,\n                  ).catch(err => {\n                    logger.error(type, { err });\n                    callback(err.message || err);\n                  });\n                } else {\n                  const watcher = query[type]((err, result) => {\n                    if (err) {\n                      logger.error(type, { err });\n                    }\n\n                    socket.emit(eventName, err, result && encode(result));\n                  });\n                  watcher.then(\n                    () => callback(),\n                    err => {\n                      logger.error(type, { err });\n                      callback(err.message || err);\n                    },\n                  );\n\n                  openWatchers.add(watcher);\n                }\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            default:\n              try {\n                logger.warn('Unknown command', { type });\n                callback(`rest: unknown command \"${type}\"`);\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n          }\n        } catch (err) {\n          logger.warn('rest error', { err });\n          callback(err.message || err);\n        }\n      },\n    );\n  });\n}\n"],"names":["logger","Logger","init","io","restService","on","openWatchers","Set","forEach","watcher","stop","type","restName","json","args","callback","decode","Array","isArray","debug","Error","restResource","get","info","options","createCursor","socket","user","then","cursor","toArray","encode","results","catch","error","err","message","result","key","eventName","otherArgs","startsWith","query","queries","emit","add","warn"],"mappings":"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"}