{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":["Cursor","MongoStore","AbstractCursor","MongoCursor","constructor","store","cursor","_cursor","advance","count","skip","next","then","value","_result","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","close","_store","undefined","toArray"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,eAAe,MAAMC,WAAN,SAAqCD,cAArC,CAA2E;AACxFE,cAAYC,KAAZ,EAA8BC,MAA9B,EAA6C;AAC3C,UAAMD,KAAN;AACA,SAAKE,OAAL,GAAeD,MAAf;AACD;;AAEDE,UAAQC,KAAR,EAA2B;AACzB,SAAKF,OAAL,CAAaG,IAAb,CAAkBD,KAAlB;AACD;;AAEDE,SAAoB;AAClB,WAAO,KAAKJ,OAAL,CAAaI,IAAb,GACJC,IADI,CACEC,KAAD,IAAW;AACf,WAAKC,OAAL,GAAeD,KAAf;AACA,WAAKE,GAAL,GAAWF,SAASA,MAAMG,GAA1B;AACA,aAAO,KAAKD,GAAZ;AACD,KALI,CAAP;AAMD;;AAEDE,QAAMC,QAAN,EAA+B;AAC7B,SAAKX,OAAL,CAAaU,KAAb,CAAmBC,QAAnB;AACA,WAAOC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDX,UAAkC;AAAA,QAA5BY,UAA4B,yDAAP,KAAO;;AAChC,WAAO,KAAKd,OAAL,CAAaE,KAAb,CAAmBY,UAAnB,CAAP;AACD;;AAEDC,WAAS;AACP,WAAOH,QAAQC,OAAR,CAAgB,KAAKN,OAArB,CAAP;AACD;;AAEDS,UAAQ;AACN,QAAI,KAAKhB,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAagB,KAAb;AACA,WAAKhB,OAAL,GAAe,KAAKiB,MAAL,GAAc,KAAKV,OAAL,GAAeW,SAA5C;AACD;;AAED,WAAON,QAAQC,OAAR,EAAP;AACD;;AAEDM,YAAoC;AAClC,WAAO,KAAKnB,OAAL,CAAamB,OAAb,EAAP;AACD;AA3CuF","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class MongoCursor<ModelType> extends AbstractCursor<MongoStore, ModelType> {\n  constructor(store:MongoStore, cursor:Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count:number):void {\n    this._cursor.skip(count);\n  }\n\n  next():Promise<any> {\n    return this._cursor.next()\n      .then((value) => {\n        this._result = value;\n        this.key = value && value._id;\n        return this.key;\n      });\n  }\n\n  limit(newLimit:number):Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit:boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = this._store = this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray():Promise<Array<ModelType>> {\n    return this._cursor.toArray();\n  }\n}\n"]}