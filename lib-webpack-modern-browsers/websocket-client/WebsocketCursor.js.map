{"version":3,"sources":["../../src/websocket-client/WebsocketCursor.js"],"names":["AbstractCursor","WebsocketCursor","constructor","store","options","_options","limit","newLimit","_idCursor","Error","Promise","resolve","_create","connection","emit","then","idCursor","type","args","id","advance","count","next","result","_result","key","_store","keyPath","applyLimit","close","closedPromise","undefined","toArray"],"mappings":";AACA,OAAOA,cAAP,MAA2B,yBAA3B;;AAEA,eAAe,MAAMC,eAAN,SAAyCD,cAAzC,CAAmF;;AAKhGE,cAAYC,KAAZ,EAAkCC,OAAlC,EAA2C;AACzC,UAAMD,KAAN;AACA,SAAKE,QAAL,GAAgBD,OAAhB;AACD;;AAED;;AAEAE,QAAMC,QAAN,EAAsC;AACpC,QAAI,KAAKC,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACpB,SAAKJ,QAAL,CAAcC,KAAd,GAAsBC,QAAtB;AACA,WAAOG,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED;;AAEAC,YAAU;AACR,QAAI,KAAKJ,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACpB,WAAO,KAAKN,KAAL,CAAWU,UAAX,CAAsBC,IAAtB,CAA2B,cAA3B,EAA2C,KAAKT,QAAhD,EAA0DU,IAA1D,CAAgEC,QAAD,IAAc;AAClF,UAAI,CAACA,QAAL,EAAe;AACf,WAAKR,SAAL,GAAiBQ,QAAjB;AACD,KAHM,CAAP;AAID;;AAEDF,OAAKG,IAAL,EAA6B;AAAA,sCAAfC,IAAe;AAAfA,UAAe;AAAA;;AAC3B,QAAI,CAAC,KAAKV,SAAV,EAAqB;AACnB,aAAO,KAAKI,OAAL,GAAeG,IAAf,CAAoB,MAAM,KAAKD,IAAL,CAAUG,IAAV,EAAgB,GAAGC,IAAnB,CAA1B,CAAP;AACD;;AAED,WAAO,KAAKf,KAAL,CAAWW,IAAX,CAAgB,QAAhB,EAA0B,EAAEG,IAAF,EAAQE,IAAI,KAAKX,SAAjB,EAA1B,EAAwDU,IAAxD,CAAP;AACD;;AAEDE,UAAQC,KAAR,EAAsB;AACpB,SAAKP,IAAL,CAAU,SAAV,EAAqBO,KAArB;AACA,WAAO,IAAP;AACD;;AAEDC,SAAsB;AACpB,WAAO,KAAKR,IAAL,CAAU,MAAV,EAAkBC,IAAlB,CAAwBQ,MAAD,IAAY;AACxC,WAAKC,OAAL,GAAeD,MAAf;AACA,WAAKE,GAAL,GAAWF,UAAUA,OAAO,KAAKG,MAAL,CAAYC,OAAnB,CAArB;AACA,aAAO,KAAKF,GAAZ;AACD,KAJM,CAAP;AAKD;;AAEDF,WAA8B;AAC5B,WAAOb,QAAQC,OAAR,CAAgB,KAAKa,OAArB,CAAP;AACD;;AAEDH,UAAkC;AAAA,QAA5BO,UAA4B,uEAAP,KAAO;;AAChC,WAAO,KAAKd,IAAL,CAAU,OAAV,EAAmBc,UAAnB,CAAP;AACD;;AAEDC,UAAiB;AACf,QAAI,CAAC,KAAKH,MAAV,EAAkB,OAAOhB,QAAQC,OAAR,EAAP;;AAElB,QAAMmB,gBAAgB,KAAKtB,SAAL,GAAiB,KAAKM,IAAL,CAAU,OAAV,CAAjB,GAAsCJ,QAAQC,OAAR,EAA5D;AACA,SAAKH,SAAL,GAAiB,KAAKH,QAAL,GAAgB,IAAjC;AACA,SAAKqB,MAAL,GAAc,KAAKF,OAAL,GAAeO,SAA7B;AACA,WAAOD,aAAP;AACD;;AAEDE,YAA0B;AACxB,WAAO,KAAK7B,KAAL,CAAWW,IAAX,CAAgB,gBAAhB,EAAkC,KAAKT,QAAvC,EAAiDU,IAAjD,CAAuDQ,MAAD,IAAY;AACvE,WAAKM,KAAL;AACA,aAAON,MAAP;AACD,KAHM,CAAP;AAID;AAvE+F","file":"WebsocketCursor.js","sourcesContent":["import WebsocketStore from './WebsocketStore';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class WebsocketCursor<ModelType> extends AbstractCursor<WebsocketStore<ModelType>> {\n  _idCursor: ?number;\n  _options: ?Object;\n  _result: ?Object;\n\n  constructor(store:WebsocketStore, options) {\n    super(store);\n    this._options = options;\n  }\n\n  /* options */\n\n  limit(newLimit:number): Promise<this> {\n    if (this._idCursor) throw new Error('Cursor already created');\n    this._options.limit = newLimit;\n    return Promise.resolve(this);\n  }\n\n  /* results */\n\n  _create() {\n    if (this._idCursor) throw new Error('Cursor already created');\n    return this.store.connection.emit('createCursor', this._options).then((idCursor) => {\n      if (!idCursor) return;\n      this._idCursor = idCursor;\n    });\n  }\n\n  emit(type, ...args): Promise {\n    if (!this._idCursor) {\n      return this._create().then(() => this.emit(type, ...args));\n    }\n\n    return this.store.emit('cursor', { type, id: this._idCursor }, args);\n  }\n\n  advance(count:number) {\n    this.emit('advance', count);\n    return this;\n  }\n\n  next(): Promise<?any> {\n    return this.emit('next').then((result) => {\n      this._result = result;\n      this.key = result && result[this._store.keyPath];\n      return this.key;\n    });\n  }\n\n  result(): Promise<?ModelType> {\n    return Promise.resolve(this._result);\n  }\n\n  count(applyLimit:boolean = false) {\n    return this.emit('count', applyLimit);\n  }\n\n  close(): Promise {\n    if (!this._store) return Promise.resolve();\n\n    const closedPromise = this._idCursor ? this.emit('close') : Promise.resolve();\n    this._idCursor = this._options = null;\n    this._store = this._result = undefined;\n    return closedPromise;\n  }\n\n  toArray(): Promise<Array> {\n    return this.store.emit('cursor toArray', this._options).then((result) => {\n      this.close();\n      return result;\n    });\n  }\n}\n"]}