{"version":3,"sources":["../../src/websocket-client/Query.js"],"names":["Logger","AbstractQuery","decode","logger","Query","constructor","store","key","fetch","callback","emit","then","_subscribe","_includeInitial","args","eventName","restName","connection","on","err","result","_stopEmitSubscribe","promise","emitSubscribe","stopEmitSubscribe","info","catch","off","stop","cancel","Promise","resolve","cb"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;AAEA,SAASC,MAAT,QAAuB,YAAvB;;AAOA,IAAMC,SAAS,IAAIH,MAAJ,CAAW,6BAAX,CAAf;;AAEA,eAAe,MAAMI,KAAN,SAAoBH,aAApB,CAAkD;AAC/DI,cAAYC,KAAZ,EAAmCC,GAAnC,EAAgD;AAC9C,UAAMD,KAAN;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;;AAEDC,QAAMC,QAAN,EAAoC;AAClC,WAAO,KAAKH,KAAL,CAAWI,IAAX,CAAgB,OAAhB,EAAyB,KAAKH,GAA9B,EAAmCI,IAAnC,CAAwCF,QAAxC,CAAP;AACD;;AAEDG,aAAWH,QAAX,EAA+BI,kBAAkB,KAAjD,EAAwDC,IAAxD,EAA+F;AAAA;;AAC7F,QAAMC,YAAa,cAAY,KAAKT,KAAL,CAAWU,QAAS,MAAG,KAAKT,GAAI,GAA/D;AACA,SAAKD,KAAL,CAAWW,UAAX,CAAsBC,EAAtB,CAAyBH,SAAzB,EAAoC,UAACI,GAAD,EAAMC,MAAN,EAAiB;AACnDX,eAASU,GAAT,EAAcjB,OAAOkB,MAAP,CAAd;AACD,KAFD;;AAIA,QAAIC,2BAAJ;AACA,QAAIC,UAAU,KAAKhB,KAAL,CAAWiB,aAAX,CACZV,kBAAkB,mBAAlB,GAAwC,WAD5B,EAEZ,KAAKN,GAFO,EAGZQ,SAHY,EAIZD,IAJY,EAKZH,IALY,CAKP,6BAAqB;AAC1BU,2BAAqBG,iBAArB;AACArB,aAAOsB,IAAP,CAAY,YAAZ;AACD,KARa,EAQXC,KARW,CAQL,eAAO;AACd,YAAKpB,KAAL,CAAWW,UAAX,CAAsBU,GAAtB,CAA0BZ,SAA1B,EAAqCN,QAArC;AACA,YAAMU,GAAN;AACD,KAXa,CAAd;;AAaA,QAAMS,OAAO,SAAPA,IAAO,GAAM;AACjB,UAAI,CAACN,OAAL,EAAc;AACdD;AACAC,cAAQX,IAAR,CAAa,YAAM;AACjBW,kBAAU,IAAV;AACA,cAAKhB,KAAL,CAAWW,UAAX,CAAsBU,GAAtB,CAA0BZ,SAA1B,EAAqCN,QAArC;AACD,OAHD;AAID,KAPD;;AASA,WAAO;AACLoB,cAAQD,IADH;AAELA,UAFK;AAGLjB,YAAM;AAAA,eAAMmB,QAAQC,OAAR,CAAgBT,OAAhB,EAAyBX,IAAzB,CAA8BqB,EAA9B,CAAN;AAAA;AAHD,KAAP;AAKD;AA5C8D","file":"Query.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport AbstractQuery from '../store/AbstractQuery';\nimport WebsocketStore from './WebsocketStore';\nimport { decode } from '../msgpack';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nconst logger = new Logger('liwi:websocket-client:query');\n\nexport default class Query extends AbstractQuery<WebsocketStore> {\n  constructor(store: WebsocketStore, key: string) {\n    super(store);\n    this.key = key;\n  }\n\n  fetch(callback: ?Function): Promise {\n    return this.store.emit('fetch', this.key).then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    const eventName = `subscribe:${this.store.restName}.${this.key}`;\n    this.store.connection.on(eventName, (err, result) => {\n      callback(err, decode(result));\n    });\n\n    let _stopEmitSubscribe;\n    let promise = this.store.emitSubscribe(\n      _includeInitial ? 'fetchAndSubscribe' : 'subscribe',\n      this.key,\n      eventName,\n      args,\n    ).then(stopEmitSubscribe => {\n      _stopEmitSubscribe = stopEmitSubscribe;\n      logger.info('subscribed');\n    }).catch(err => {\n      this.store.connection.off(eventName, callback);\n      throw err;\n    });\n\n    const stop = () => {\n      if (!promise) return;\n      _stopEmitSubscribe();\n      promise.then(() => {\n        promise = null;\n        this.store.connection.off(eventName, callback);\n      });\n    };\n\n    return {\n      cancel: stop,\n      stop,\n      then: cb => Promise.resolve(promise).then(cb),\n    };\n  }\n}\n"]}