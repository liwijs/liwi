{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":["Logger","AbstractStore","WebsocketCursor","encode","decode","Query","logger","WebsocketStore","constructor","websocket","restName","keyPath","Error","createQuery","key","debug","emit","type","args","connection","isDisconnected","buffer","map","arg","undefined","toString","then","result","emitSubscribe","on","off","insertOne","object","updateOne","updateSeveral","objects","partialUpdateByKey","partialUpdate","partialUpdateOne","partialUpdateMany","criteria","deleteByKey","deleteOne","cursor","sort","Promise","resolve","findByKey","findOne","id"],"mappings":"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","file":"WebsocketStore.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\nimport { encode, decode } from '../msgpack';\nimport Query from './Query';\n\nconst logger = new Logger('liwi:websocket-client');\n\ntype WebsocketConnection = {\n    emit: Function,\n    isConnected: Function,\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n  keyPath = 'id';\n\n  constructor(websocket: WebsocketConnection, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    logger.debug('createQuery', { key });\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    logger.debug('emit', { type, args });\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection.emit('rest', {\n      type,\n      restName: this.restName,\n      buffer: args && encode(args.map(arg => (arg === undefined ? null : arg))).toString(),\n    }).then(result => result && decode(result));\n  }\n\n  emitSubscribe(type, ...args) {\n    const emit = () => this.emit(type, ...args);\n    return emit().then(result => {\n      this.connection.on('reconnect', emit);\n      return () => this.connection.off('reconnect', emit);\n    });\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}