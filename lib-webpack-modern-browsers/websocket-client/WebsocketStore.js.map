{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":[],"mappings":"AAAA,OAAO,aAAP,MAA0B,wBAA1B;AACA,OAAO,eAAP,MAA4B,mBAA5B;;AAOA,eAAe,MAAM,cAAN,SAAwC,aAAxC,CAA2E;;AAGtF,gBAAY,SAAZ,EAA4C,QAA5C,EAA8D;AAC1D,cAAM,SAAN;;AAD0D,aAF9D,OAE8D,GAFpD,KAEoD;AAG1D,YAAI,CAAC,QAAL,EAAe;AACX,kBAAM,IAAI,KAAJ,CAAW,uBAAqB,QAAS,IAAzC,CAAN;AACH;;AAED,aAAK,QAAL,GAAgB,QAAhB;AACH;;AAED,SAAK,IAAL,EAAoB;AAChB,YAAI,CAAC,KAAK,UAAL,CAAgB,WAAhB,EAAL,EAAoC;AAChC,kBAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAHe,0CAAN,IAAM;AAAN,gBAAM;AAAA;;AAIhB,eAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,MAArB,EAA6B,EAAE,IAAF,EAAQ,UAAU,KAAK,QAAvB,EAA7B,EAAgE,IAAhE,CAAP;AACH;;AAED,cAAU,MAAV,EAAiD;AAC7C,eAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB,CAAP;AACH;;AAED,cAAU,MAAV,EAAiD;AAC7C,eAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB,CAAP;AACH;;AAED,kBAAc,OAAd,EAAoE;AAChE,eAAO,KAAK,IAAL,CAAU,eAAV,EAA2B,OAA3B,CAAP;AACH;;AAED,uBAAmB,GAAnB,EAA6B,aAA7B,EAA6D;AACzD,eAAO,KAAK,IAAL,CAAU,oBAAV,EAAgC,GAAhC,EAAqC,aAArC,CAAP;AACH;;AAED,qBAAiB,MAAjB,EAAoC,aAApC,EAA+E;AAC3E,eAAO,KAAK,IAAL,CAAU,kBAAV,EAA8B,MAA9B,EAAsC,aAAtC,CAAP;AACH;;AAED,sBAAkB,QAAlB,EAA4B,aAA5B,EAA4D;AACxD,eAAO,KAAK,IAAL,CAAU,mBAAV,EAA+B,QAA/B,EAAyC,aAAzC,CAAP;AACH;;AAED,gBAAY,GAAZ,EAA+B;AAC3B,eAAO,KAAK,IAAL,CAAU,aAAV,EAAyB,GAAzB,CAAP;AACH;;AAED,cAAU,MAAV,EAAsC;AAClC,eAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB,CAAP;AACH;;AAED,WAAO,QAAP,EAA0B,IAA1B,EAA8E;AAC1E,eAAO,QAAQ,OAAR,CAAgB,IAAI,eAAJ,CAAoB,IAApB,EAA0B,EAAE,QAAF,EAAY,IAAZ,EAA1B,CAAhB,CAAP;AACH;;AAED,cAAU,GAAV,EAAoB;AAChB,eAAO,KAAK,OAAL,CAAa,EAAE,KAAK,GAAP,EAAb,CAAP;AACH;;AAED,YAAQ,QAAR,EAA0B,IAA1B,EAA0D;AACtD,eAAO,KAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,EAA+B,IAA/B,CAAP;AACH;AA9DqF","file":"WebsocketStore.js","sourcesContent":["import AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\n\ntype WebsocketConnection = {\n    emit: Function;\n    isConnected: Function;\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n    keyPath = '_id';\n\n    constructor(websocket: WebsocketConnection, restName: string) {\n        super(websocket);\n\n        if (!restName) {\n            throw new Error(`Invalid restName: \"${restName}\"`);\n        }\n\n        this.restName = restName;\n    }\n\n    emit(type, ...args) {\n        if (!this.connection.isConnected()) {\n            throw new Error('Websocket is not connected');\n        }\n        return this.connection.emit('rest', { type, restName: this.restName }, args);\n    }\n\n    insertOne(object: ModelType): Promise<ModelType> {\n        return this.emit('insertOne', object);\n    }\n\n    updateOne(object: ModelType): Promise<ModelType> {\n        return this.emit('updateOne', object);\n    }\n\n    updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n        return this.emit('updateSeveral', objects);\n    }\n\n    partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n        return this.emit('partialUpdateByKey', key, partialUpdate);\n    }\n\n    partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n        return this.emit('partialUpdateOne', object, partialUpdate);\n    }\n\n    partialUpdateMany(criteria, partialUpdate: Object): Promise {\n        return this.emit('partialUpdateMany', criteria, partialUpdate);\n    }\n\n    deleteByKey(key: any): Promise {\n        return this.emit('deleteByKey', key);\n    }\n\n    deleteOne(object: ModelType): Promise {\n        return this.emit('deleteOne', object);\n    }\n\n    cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n        return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n    }\n\n    findByKey(key: any) {\n        return this.findOne({ _id: key });\n    }\n\n    findOne(criteria: Object, sort: ?Object): Promise<Object> {\n        return this.emit('findOne', criteria, sort);\n    }\n}\n"]}