{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":["Cursor","MongoStore","AbstractCursor","MongoCursor","store","cursor","_cursor","count","skip","next","then","value","_result","key","_id","newLimit","limit","Promise","resolve","applyLimit","close","_store","undefined","toArray"],"mappings":";;;;;;;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;IAEqBC,W;;;AACnB,uBAAYC,KAAZ,EAA8BC,MAA9B,EAA6C;AAAA;;AAAA,0HACrCD,KADqC;;AAE3C,UAAKE,OAAL,GAAeD,MAAf;AAF2C;AAG5C;;;;4BAEOE,K,EAAmB;AACzB,WAAKD,OAAL,CAAaE,IAAb,CAAkBD,KAAlB;AACD;;;2BAEmB;AAAA;;AAClB,aAAO,KAAKD,OAAL,CAAaG,IAAb,GACJC,IADI,CACC,UAACC,KAAD,EAAW;AACf,eAAKC,OAAL,GAAeD,KAAf;AACA,eAAKE,GAAL,GAAWF,SAASA,MAAMG,GAA1B;AACA,eAAO,OAAKD,GAAZ;AACD,OALI,CAAP;AAMD;;;0BAEKE,Q,EAAyB;AAC7B,WAAKT,OAAL,CAAaU,KAAb,CAAmBD,QAAnB;AACA,aAAOE,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;;4BAEiC;AAAA,UAA5BC,UAA4B,yDAAP,KAAO;;AAChC,aAAO,KAAKb,OAAL,CAAaC,KAAb,CAAmBY,UAAnB,CAAP;AACD;;;6BAEQ;AACP,aAAOF,QAAQC,OAAR,CAAgB,KAAKN,OAArB,CAAP;AACD;;;4BAEO;AACN,UAAI,KAAKN,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAac,KAAb;AACA,aAAKd,OAAL,GAAe,KAAKe,MAAL,GAAc,KAAKT,OAAL,GAAeU,SAA5C;AACD;;AAED,aAAOL,QAAQC,OAAR,EAAP;AACD;;;8BAEmC;AAClC,aAAO,KAAKZ,OAAL,CAAaiB,OAAb,EAAP;AACD;;;;EA3CiDrB,c;;eAA/BC,W","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class MongoCursor<ModelType> extends AbstractCursor<MongoStore, ModelType> {\n  constructor(store:MongoStore, cursor:Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count:number):void {\n    this._cursor.skip(count);\n  }\n\n  next():Promise<any> {\n    return this._cursor.next()\n      .then((value) => {\n        this._result = value;\n        this.key = value && value._id;\n        return this.key;\n      });\n  }\n\n  limit(newLimit:number):Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit:boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = this._store = this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray():Promise<Array<ModelType>> {\n    return this._cursor.toArray();\n  }\n}\n"]}