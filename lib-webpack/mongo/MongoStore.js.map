{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":[],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n    _collection: Collection|Promise<Collection>;\n    keyPath = '_id';\n\n    constructor(connection: MongoConnection, collectionName: string) {\n        super(connection);\n\n        if (!collectionName) {\n            throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n        }\n\n        this._collection = connection.getConnection()\n            .then((db: Db) => this._collection = db.collection(collectionName));\n    }\n\n    get collection(): Promise<Collection> {\n        if (this.connection.connectionFailed) {\n            return Promise.reject(new Error('MongoDB connection failed'));\n        }\n\n        return Promise.resolve(this._collection);\n    }\n\n    insertOne(object: ModelType): Promise<ModelType> {\n        if (!object._id) {\n            object._id = (new ObjectID()).toString();\n        }\n        if (!object.created) {\n            object.created = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.insertOne(object))\n            .then(({ result, connection, ops }) => {\n                if (!result.ok || result.n !== 1) {\n                    throw new Error('Fail to insert');\n                }\n            })\n            .then(() => object);\n    }\n\n    updateOne(object: ModelType): Promise<ModelType> {\n        if (!object.updated) {\n            object.updated = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.updateOne({ _id: object._id }, object))\n            .then(() => object);\n    }\n\n    upsertOne(object: ModelType): Promise<ModelType> {\n        if (!object.updated) {\n            object.updated = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true }))\n            .then(() => object);\n    }\n\n    updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n        return Promise.all(objects.map(object => this.updateOne(object)));\n    }\n\n    _partialUpdate(partialUpdate: Object) {\n        // https://docs.mongodb.com/manual/reference/operator/update/\n        // if has a mongo operator\n        if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n            return partialUpdate;\n        } else {\n            return { $set: partialUpdate };\n        }\n    }\n\n    partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.collection\n            .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n    }\n\n    partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.partialUpdateByKey(object._id, partialUpdate)\n            .then(res => this.findByKey(object._id));\n    }\n\n    partialUpdateMany(criteria, partialUpdate: Object): Promise {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.collection\n            .then(collection => collection.updateMany(criteria, partialUpdate))\n            .then(res => null); // TODO return updated object\n    }\n\n    deleteByKey(key: any): Promise {\n        return this.collection\n            .then(collection => collection.removeOne({ _id: key }))\n            .then(() => null);\n    }\n\n\n    cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n        return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => new MongoCursor(this, cursor));\n    }\n\n    findByKey(key: any) {\n        return this.findOne({ _id: key });\n    }\n\n    findOne(criteria: Object, sort: ?Object): Promise<Object> {\n        return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => cursor.limit(1).next());\n    }\n}\n"]}