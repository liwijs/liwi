{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":[],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n  _collection: Collection|Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection()\n            .then((db: Db) => this._collection = db.collection(collectionName));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object._id) {\n      object._id = (new ObjectID()).toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n            .then(collection => collection.insertOne(object))\n            .then(({ result, connection, ops }) => {\n              if (!result.ok || result.n !== 1) {\n                throw new Error('Fail to insert');\n              }\n            })\n            .then(() => object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n            .then(collection => collection.updateOne({ _id: object._id }, object))\n            .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n            .then(collection => (\n              collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true })\n            ))\n            .then(() => object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n        // https://docs.mongodb.com/manual/reference/operator/update/\n        // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n            .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate)\n            .then(res => this.findByKey(object._id));\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n            .then(collection => collection.updateMany(criteria, partialUpdate))\n            .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.collection\n            .then(collection => collection.removeOne({ _id: key }))\n            .then(() => null);\n  }\n\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n    return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}