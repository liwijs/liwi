{"version":3,"sources":["../../src/websocket-client/WebsocketCursor.js"],"names":["AbstractCursor","WebsocketCursor","store","options","_options","newLimit","_idCursor","Error","limit","Promise","resolve","connection","emit","then","idCursor","type","args","_create","id","count","result","_result","key","_store","keyPath","applyLimit","closedPromise","undefined","close"],"mappings":";;;;;;;;AACA,OAAOA,cAAP,MAA2B,yBAA3B;;IAEqBC,e;;;AAKnB,2BAAYC,KAAZ,EAAkCC,OAAlC,EAA2C;AAAA;;AAAA,kIACnCD,KADmC;;AAEzC,UAAKE,QAAL,GAAgBD,OAAhB;AAFyC;AAG1C;;AAED;;;;0BAEME,Q,EAAgC;AACpC,UAAI,KAAKC,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACpB,WAAKH,QAAL,CAAcI,KAAd,GAAsBH,QAAtB;AACA,aAAOI,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED;;;;8BAEU;AAAA;;AACR,UAAI,KAAKJ,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACpB,aAAO,KAAKL,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2B,cAA3B,EAA2C,KAAKR,QAAhD,EAA0DS,IAA1D,CAA+D,UAACC,QAAD,EAAc;AAClF,YAAI,CAACA,QAAL,EAAe;AACf,eAAKR,SAAL,GAAiBQ,QAAjB;AACD,OAHM,CAAP;AAID;;;yBAEIC,I,EAAwB;AAAA;;AAAA,wCAAfC,IAAe;AAAfA,YAAe;AAAA;;AAC3B,UAAI,CAAC,KAAKV,SAAV,EAAqB;AACnB,eAAO,KAAKW,OAAL,GAAeJ,IAAf,CAAoB;AAAA,iBAAM,OAAKD,IAAL,gBAAUG,IAAV,SAAmBC,IAAnB,EAAN;AAAA,SAApB,CAAP;AACD;;AAED,aAAO,KAAKd,KAAL,CAAWU,IAAX,CAAgB,QAAhB,EAA0B,EAAEG,UAAF,EAAQG,IAAI,KAAKZ,SAAjB,EAA1B,EAAwDU,IAAxD,CAAP;AACD;;;4BAEOG,K,EAAc;AACpB,WAAKP,IAAL,CAAU,SAAV,EAAqBO,KAArB;AACA,aAAO,IAAP;AACD;;;2BAEqB;AAAA;;AACpB,aAAO,KAAKP,IAAL,CAAU,MAAV,EAAkBC,IAAlB,CAAuB,UAACO,MAAD,EAAY;AACxC,eAAKC,OAAL,GAAeD,MAAf;AACA,eAAKE,GAAL,GAAWF,UAAUA,OAAO,OAAKG,MAAL,CAAYC,OAAnB,CAArB;AACA,eAAO,OAAKF,GAAZ;AACD,OAJM,CAAP;AAKD;;;6BAE6B;AAC5B,aAAOb,QAAQC,OAAR,CAAgB,KAAKW,OAArB,CAAP;AACD;;;4BAEiC;AAAA,UAA5BI,UAA4B,uEAAP,KAAO;;AAChC,aAAO,KAAKb,IAAL,CAAU,OAAV,EAAmBa,UAAnB,CAAP;AACD;;;4BAEgB;AACf,UAAI,CAAC,KAAKF,MAAV,EAAkB,OAAOd,QAAQC,OAAR,EAAP;;AAElB,UAAMgB,gBAAgB,KAAKpB,SAAL,GAAiB,KAAKM,IAAL,CAAU,OAAV,CAAjB,GAAsCH,QAAQC,OAAR,EAA5D;AACA,WAAKJ,SAAL,GAAiB,KAAKF,QAAL,GAAgB,IAAjC;AACA,WAAKmB,MAAL,GAAc,KAAKF,OAAL,GAAeM,SAA7B;AACA,aAAOD,aAAP;AACD;;;8BAEyB;AAAA;;AACxB,aAAO,KAAKxB,KAAL,CAAWU,IAAX,CAAgB,gBAAhB,EAAkC,KAAKR,QAAvC,EAAiDS,IAAjD,CAAsD,UAACO,MAAD,EAAY;AACvE,eAAKQ,KAAL;AACA,eAAOR,MAAP;AACD,OAHM,CAAP;AAID;;;;EAvEqDpB,c;;eAAnCC,e","file":"WebsocketCursor.js","sourcesContent":["import WebsocketStore from './WebsocketStore';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class WebsocketCursor<ModelType> extends AbstractCursor<WebsocketStore<ModelType>> {\n  _idCursor: ?number;\n  _options: ?Object;\n  _result: ?Object;\n\n  constructor(store:WebsocketStore, options) {\n    super(store);\n    this._options = options;\n  }\n\n  /* options */\n\n  limit(newLimit:number): Promise<this> {\n    if (this._idCursor) throw new Error('Cursor already created');\n    this._options.limit = newLimit;\n    return Promise.resolve(this);\n  }\n\n  /* results */\n\n  _create() {\n    if (this._idCursor) throw new Error('Cursor already created');\n    return this.store.connection.emit('createCursor', this._options).then((idCursor) => {\n      if (!idCursor) return;\n      this._idCursor = idCursor;\n    });\n  }\n\n  emit(type, ...args): Promise {\n    if (!this._idCursor) {\n      return this._create().then(() => this.emit(type, ...args));\n    }\n\n    return this.store.emit('cursor', { type, id: this._idCursor }, args);\n  }\n\n  advance(count:number) {\n    this.emit('advance', count);\n    return this;\n  }\n\n  next(): Promise<?any> {\n    return this.emit('next').then((result) => {\n      this._result = result;\n      this.key = result && result[this._store.keyPath];\n      return this.key;\n    });\n  }\n\n  result(): Promise<?ModelType> {\n    return Promise.resolve(this._result);\n  }\n\n  count(applyLimit:boolean = false) {\n    return this.emit('count', applyLimit);\n  }\n\n  close(): Promise {\n    if (!this._store) return Promise.resolve();\n\n    const closedPromise = this._idCursor ? this.emit('close') : Promise.resolve();\n    this._idCursor = this._options = null;\n    this._store = this._result = undefined;\n    return closedPromise;\n  }\n\n  toArray(): Promise<Array> {\n    return this.store.emit('cursor toArray', this._options).then((result) => {\n      this.close();\n      return result;\n    });\n  }\n}\n"]}