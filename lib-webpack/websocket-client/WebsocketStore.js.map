{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,aAAP,MAA0B,wBAA1B;AACA,OAAO,eAAP,MAA4B,mBAA5B;;IAOqB,c;;;AAGnB,0BAAY,SAAZ,EAA4C,QAA5C,EAA8D;AAAA;;AAAA,kGACtD,SADsD;;AAAA,UAF9D,OAE8D,GAFpD,KAEoD;;;AAG5D,QAAI,CAAC,QAAL,EAAe;AACb,YAAM,IAAI,KAAJ,yBAAgC,QAAhC,OAAN;AACD;;AAED,UAAK,QAAL,GAAgB,QAAhB;AAP4D;AAQ7D;;;;yBAEI,I,EAAe;AAClB,UAAI,CAAC,KAAK,UAAL,CAAgB,WAAhB,EAAL,EAAoC;AAClC,cAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAHiB,wCAAN,IAAM;AAAN,YAAM;AAAA;;AAIlB,aAAO,KAAK,UAAL,CAAgB,IAAhB,CAAqB,MAArB,EAA6B,EAAE,UAAF,EAAQ,UAAU,KAAK,QAAvB,EAA7B,EAAgE,IAAhE,CAAP;AACD;;;8BAES,M,EAAuC;AAC/C,aAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB,CAAP;AACD;;;8BAES,M,EAAuC;AAC/C,aAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB,CAAP;AACD;;;kCAEa,O,EAAsD;AAClE,aAAO,KAAK,IAAL,CAAU,eAAV,EAA2B,OAA3B,CAAP;AACD;;;uCAEkB,G,EAAU,a,EAAgC;AAC3D,aAAO,KAAK,IAAL,CAAU,oBAAV,EAAgC,GAAhC,EAAqC,aAArC,CAAP;AACD;;;qCAEgB,M,EAAmB,a,EAA2C;AAC7E,aAAO,KAAK,IAAL,CAAU,kBAAV,EAA8B,MAA9B,EAAsC,aAAtC,CAAP;AACD;;;sCAEiB,Q,EAAU,a,EAAgC;AAC1D,aAAO,KAAK,IAAL,CAAU,mBAAV,EAA+B,QAA/B,EAAyC,aAAzC,CAAP;AACD;;;gCAEW,G,EAAmB;AAC7B,aAAO,KAAK,IAAL,CAAU,aAAV,EAAyB,GAAzB,CAAP;AACD;;;8BAES,M,EAA4B;AACpC,aAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB,CAAP;AACD;;;2BAEM,Q,EAAmB,I,EAAoD;AAC5E,aAAO,QAAQ,OAAR,CAAgB,IAAI,eAAJ,CAAoB,IAApB,EAA0B,EAAE,kBAAF,EAAY,UAAZ,EAA1B,CAAhB,CAAP;AACD;;;8BAES,G,EAAU;AAClB,aAAO,KAAK,OAAL,CAAa,EAAE,KAAK,GAAP,EAAb,CAAP;AACD;;;4BAEO,Q,EAAkB,I,EAAgC;AACxD,aAAO,KAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,EAA+B,IAA/B,CAAP;AACD;;;;EA9DoD,a;;eAAlC,c","file":"WebsocketStore.js","sourcesContent":["import AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\n\ntype WebsocketConnection = {\n    emit: Function,\n    isConnected: Function,\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n  keyPath = '_id';\n\n  constructor(websocket: WebsocketConnection, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  emit(type, ...args) {\n    if (!this.connection.isConnected()) {\n      throw new Error('Websocket is not connected');\n    }\n    return this.connection.emit('rest', { type, restName: this.restName }, args);\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}