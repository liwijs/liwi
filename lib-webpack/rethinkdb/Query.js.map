{"version":3,"sources":["../../src/rethinkdb/Query.js"],"names":["AbstractQuery","Query","callback","queryCallback","store","query","r","run","then","_includeInitial","args","_feed","promise","changes","includeInitial","includeStates","includeTypes","includeOffsets","length","feed","_promise","each","stop","closeFeed","cancel","cb","errCb","close"],"mappings":";;;;;;;;AAAA,OAAOA,aAAP,MAA0B,wBAA1B;;IAQqBC,K;;;;;;;;;;;0BACbC,Q,EAA8B;AAClC,aAAO,KAAKC,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuC,KAAKD,KAAL,CAAWE,CAAlD,EAAqDC,GAArD,GAA2DC,IAA3D,CAAgEN,QAAhE,CAAP;AACD;;;+BAEUA,Q,EAAoF;AAAA;;AAAA,UAAhEO,eAAgE,uEAA9C,KAA8C;;AAAA,UAAvCC,IAAuC;;AAC7F,UAAIC,cAAJ;AACA,UAAIC,UACF,KAAKT,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuC,KAAKD,KAAL,CAAWE,CAAlD,EAAqDO,OAArD,CAA6D;AAC3DC,wBAAgBL,eAD2C;AAE3DM,uBAAe,IAF4C;AAG3DC,sBAAc,IAH6C;AAI3DC,wBAAgB;AAJ2C,OAA7D,EAMCT,IAND,CAMM,gBAAQ;AACZ,YAAIE,KAAKQ,MAAL,KAAgB,CAApB,EAAuB;AACrBP,kBAAQQ,IAAR;AACA,iBAAO,OAAKC,QAAZ;AACD;;AAEDD,aAAKE,IAAL,CAAUnB,QAAV;AACA,eAAOiB,IAAP;AACD,OAdD,CADF;;AAiBA,UAAIT,KAAKQ,MAAL,KAAgB,CAApB,EAAuB,KAAKE,QAAL,GAAgBR,OAAhB;;AAEvB,UAAMU,OAAO,SAAPA,IAAO,GAAM;AACjB,eAAKC,SAAL,CAAeZ,KAAf,EAAsBC,OAAtB;AACD,OAFD;;AAIA,aAAO;AACLU,kBADK;AAELE,gBAAQF,IAFH;AAGLd,cAAM,cAACiB,EAAD,EAAKC,KAAL;AAAA,iBAAed,QAAQJ,IAAR,CAAaiB,EAAb,EAAiBC,KAAjB,CAAf;AAAA;AAHD,OAAP;AAKD;;;8BAESP,I,EAAMP,O,EAAS;AACvB,UAAIO,IAAJ,EAAU;AACRA,aAAKQ,KAAL;AACD,OAFD,MAEO,IAAIf,OAAJ,EAAa;AAClBA,gBAAQJ,IAAR,CAAa;AAAA,iBAAQW,KAAKQ,KAAL,EAAR;AAAA,SAAb;AACD;AACF;;;;EA3CgC3B,a;;eAAdC,K","file":"Query.js","sourcesContent":["import AbstractQuery from '../store/AbstractQuery';\nimport RethinkStore from './RethinkStore';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nexport default class Query extends AbstractQuery<RethinkStore> {\n  fetch(callback: ?Function): Promise {\n    return this.queryCallback(this.store.query(), this.store.r).run().then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    let _feed;\n    let promise =\n      this.queryCallback(this.store.query(), this.store.r).changes({\n        includeInitial: _includeInitial,\n        includeStates: true,\n        includeTypes: true,\n        includeOffsets: true,\n      })\n      .then(feed => {\n        if (args.length === 0) {\n          _feed = feed;\n          delete this._promise;\n        }\n\n        feed.each(callback);\n        return feed;\n      });\n\n    if (args.length === 0) this._promise = promise;\n\n    const stop = () => {\n      this.closeFeed(_feed, promise);\n    };\n\n    return {\n      stop,\n      cancel: stop,\n      then: (cb, errCb) => promise.then(cb, errCb),\n    };\n  }\n\n  closeFeed(feed, promise) {\n    if (feed) {\n      feed.close();\n    } else if (promise) {\n      promise.then(feed => feed.close());\n    }\n  }\n}\n"]}