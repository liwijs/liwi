{"version":3,"sources":["../../src/rest/RestService.js"],"names":[],"mappings":";;;;;;AAAA,OAAO,UAAP,MAAuB,cAAvB;;IAEqB,W;AACnB,uBAAY,aAAZ,EAAgC;AAAA;;AAC9B,SAAK,aAAL,GAAqB,aAArB;AACD;;;;oCAEe,G,EAAa,Y,EAAc;AACzC,WAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,EAA4B,YAA5B;AACD;;;wBAEG,G,EAAa;AACf,UAAM,eAAe,KAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,CAArB;AACA,UAAI,CAAC,YAAL,EAAmB,MAAM,IAAI,KAAJ,8BAAqC,GAArC,OAAN;AACnB,aAAO,YAAP;AACD;;;;4EAGK,Q,EACA,a;YACE,Q,SAAA,Q;YAAU,I,SAAA,I;YAAM,K,SAAA,K;;;;;;AAEhB,4B,GAAe,KAAK,GAAL,CAAS,QAAT,C;;AACrB,2BAAW,aAAa,QAAb,CAAsB,aAAtB,EAAqC,YAAY,EAAjD,CAAX;AACA,uBAAO,aAAa,IAAb,CAAkB,aAAlB,EAAiC,IAAjC,CAAP;;uBACqB,aAAa,KAAb,CAAmB,MAAnB,CAA0B,QAA1B,EAAoC,IAApC,C;;;AAAf,sB;;AACN,wBAAQ,aAAa,KAAb,CAAmB,KAAnB,CAAR;AACA,oBAAI,KAAJ,EAAW,OAAO,KAAP,CAAa,aAAb,EAA4B,KAA5B;iDACJ,IAAI,UAAJ,CAAe,YAAf,EAA6B,aAA7B,EAA4C,MAA5C,C;;;;;;;;;;;;;;;;;;;;;eA1BU,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n        restName: string,\n        connectedUser: ?Object,\n        { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n    ): Promise {\n    const restResource = this.get(restName);\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}