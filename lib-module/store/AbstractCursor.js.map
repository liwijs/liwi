{"version":3,"sources":["../../src/store/AbstractCursor.js"],"names":["AbstractCursor","store","_store","Error","next","then","result","findByKey","key","deleteByKey","callback","forEachKeys","Symbol","iterator","keysIterator","keyPromise"],"mappings":";;;;;;IAGqBA,c;AAGnB,0BAAYC,KAAZ,EAA0B;AAAA;;AACxB,SAAKC,MAAL,GAAcD,KAAd;AACD;;;;4BAMO;AACN,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;;;2BAEoB;AACnB,YAAM,IAAIA,KAAJ,CAAU,+BAAV,CAAN;AACD;;;iCAE0B;AAAA;;AACzB,aAAO,KAAKC,IAAL,GAAYC,IAAZ,CAAiB;AAAA,eAAM,MAAKC,MAAL,EAAN;AAAA,OAAjB,CAAP;AACD;;;4BAEsC;AACrC,YAAM,IAAIH,KAAJ,CAAU,gCAAV,CAAN;AACD;;;4BAEkC;AAAA,0EAAP,KAAO;;AACjC,YAAM,IAAIA,KAAJ,CAAU,gCAAV,CAAN;AACD;;;6BAE6B;AAC5B,aAAO,KAAKF,KAAL,CAAWM,SAAX,CAAqB,KAAKC,GAA1B,CAAP;AACD;;;8BAEuB;AACtB,aAAO,KAAKP,KAAL,CAAWQ,WAAX,CAAuB,KAAKD,GAA5B,CAAP;AACD;;;;0FAEiBE,Q;;;;;;;uBAEI,KAAKN,IAAL,E;;;AAAZI,mB;;oBACDA,G;;;;;;;;;uBAECE,SAASF,GAAT,C;;;;;;;;;;;;;;;;;;;;4BAIFE,Q,EAAyB;AAAA;;AAC/B,aAAO,KAAKC,WAAL,CAAiB;AAAA,eAAM,OAAKL,MAAL,GAAcD,IAAd,CAAmB;AAAA,iBAAUK,SAASJ,MAAT,CAAV;AAAA,SAAnB,CAAN;AAAA,OAAjB,CAAP;AACD;;;;;;;;;qBAIS,KAAKF,IAAL,E;;;;;;;;;;;;;;SAIRQ,OAAOC,Q;;;;;;;;;;AACP;;;;;0BACuB,KAAKC,YAAL,E;;;;;;;;AAAdC,wB;;qBACDA,WAAWV,IAAX,CAAgB;AAAA,uBAAOG,OAAO,OAAKF,MAAL,EAAd;AAAA,eAAhB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIV;AACA;;;;;;;;;;;;;;;;;wBA3DmB;AACjB,aAAO,KAAKJ,MAAZ;AACD;;;;KAZH;;;SAGqBF,c","file":"AbstractCursor.js","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport type { ResultType } from '../types';\n\nexport default class AbstractCursor<Store> {\n  key: any;\n\n  constructor(store: Store) {\n    this._store = store;\n  }\n\n  get store(): Store {\n    return this._store;\n  }\n\n  close() {\n    throw new Error('close() missing implementation');\n  }\n\n  next(): Promise<any> {\n    throw new Error('next() missing implementation');\n  }\n\n  nextResult(): Promise<any> {\n    return this.next().then(() => this.result());\n  }\n\n  limit(newLimit: number): Promise<void> {\n    throw new Error('limit() missing implementation');\n  }\n\n  count(applyLimit: boolean = false) {\n    throw new Error('count() missing implementation');\n  }\n\n  result(): Promise<ResultType> {\n    return this.store.findByKey(this.key);\n  }\n\n  delete(): Promise<void> {\n    return this.store.deleteByKey(this.key);\n  }\n\n  async forEachKeys(callback: Function): Promise<void> {\n    while (true) {\n      const key = await this.next();\n      if (!key) return;\n\n      await callback(key);\n    }\n  }\n\n  forEach(callback): Promise<void> {\n    return this.forEachKeys(() => this.result().then(result => callback(result)));\n  }\n\n  *keysIterator() {\n    while (true) {\n      yield this.next();\n    }\n  }\n\n  *[Symbol.iterator]() {\n    // eslint-disable-next-line no-restricted-syntax\n    for (let keyPromise of this.keysIterator()) {\n      yield keyPromise.then(key => key && this.result());\n    }\n  }\n\n  // TODO Symbol.asyncIterator, https://phabricator.babeljs.io/T7356\n  /*\n    async *keysAsyncIterator() {\n        while (true) {\n             const key = await this.next();\n             if (!key) return;\n\n             yield key;\n        }\n     }\n\n     async *[Symbol.asyncIterator] {\n        for await (let key of this.keysAsyncIterator()) {\n            yield await this.result();\n        }\n     }\n     */\n}\n"]}