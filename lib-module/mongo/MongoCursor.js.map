{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":["AbstractCursor","MongoCursor","store","cursor","_cursor","count","skip","next","then","_result","value","key","_id","newLimit","limit","Promise","resolve","applyLimit","close","undefined","_store","toArray"],"mappings":";;;;;;;;AAEA,OAAOA,cAAP,MAA2B,yBAA3B;;IAGqBC,W;;;AACnB,uBAAYC,KAAZ,EAA+BC,MAA/B,EAA+C;AAAA;;AAAA,0HACvCD,KADuC;;AAE7C,UAAKE,OAAL,GAAeD,MAAf;AAF6C;AAG9C;;;;4BAEOE,K,EAAqB;AAC3B,WAAKD,OAAL,CAAaE,IAAb,CAAkBD,KAAlB;AACD;;;2BAEoB;AAAA;;AACnB,aAAO,KAAKD,OAAL,CAAaG,IAAb,GAAoBC,IAApB,CAAyB,iBAAS;AACvC,eAAKC,OAAL,GAAeC,KAAf;AACA,eAAKC,GAAL,GAAWD,SAASA,MAAME,GAA1B;AACA,eAAO,OAAKD,GAAZ;AACD,OAJM,CAAP;AAKD;;;0BAEKE,Q,EAA2B;AAC/B,WAAKT,OAAL,CAAaU,KAAb,CAAmBD,QAAnB;AACA,aAAOE,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;;4BAEkC;AAAA,UAA7BC,UAA6B,uEAAP,KAAO;;AACjC,aAAO,KAAKb,OAAL,CAAaC,KAAb,CAAmBY,UAAnB,CAAP;AACD;;;6BAEQ;AACP,aAAOF,QAAQC,OAAR,CAAgB,KAAKP,OAArB,CAAP;AACD;;;4BAEO;AACN,UAAI,KAAKL,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAac,KAAb;AACA,aAAKd,OAAL,GAAee,SAAf;AACA,aAAKC,MAAL,GAAcD,SAAd;AACA,aAAKV,OAAL,GAAeU,SAAf;AACD;;AAED,aAAOJ,QAAQC,OAAR,EAAP;AACD;;;8BAEqC;AACpC,aAAO,KAAKZ,OAAL,CAAaiB,OAAb,EAAP;AACD;;;;EA5CsCrB,c;;SAApBC,W","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\nimport type { ResultType } from '../types';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n  constructor(store: MongoStore, cursor: Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this._cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this._cursor.next().then(value => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = undefined;\n      this._store = undefined;\n      this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<ResultType>> {\n    return this._cursor.toArray();\n  }\n}\n"]}