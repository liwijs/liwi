{"version":3,"sources":["../../src/websocket-client/Query.js"],"names":["Logger","AbstractQuery","decode","logger","Query","store","key","callback","emit","then","_includeInitial","args","eventName","restName","listener","err","result","decodedResult","connection","on","_stopEmitSubscribe","promise","emitSubscribe","stopEmitSubscribe","info","catch","off","stop","cancel","Promise","resolve","cb"],"mappings":";;;;;;;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;AAEA,SAASC,MAAT,QAAuB,kBAAvB;;AAOA,IAAMC,SAAS,IAAIH,MAAJ,CAAW,6BAAX,CAAf;;IAEqBI,K;;;AACnB,iBAAYC,KAAZ,EAAmCC,GAAnC,EAAgD;AAAA;;AAAA,8GACxCD,KADwC;;AAE9C,UAAKC,GAAL,GAAWA,GAAX;AAF8C;AAG/C;;;;0BAEKC,Q,EAAmC;AACvC,aAAO,KAAKF,KAAL,CAAWG,IAAX,CAAgB,OAAhB,EAAyB,KAAKF,GAA9B,EAAmCG,IAAnC,CAAwCF,QAAxC,CAAP;AACD;;;+BAEUA,Q,EAAoF;AAAA;;AAAA,UAAhEG,eAAgE,uEAA9C,KAA8C;;AAAA,UAAvCC,IAAuC;;AAC7F,UAAMC,2BAAyB,KAAKP,KAAL,CAAWQ,QAApC,SAAgD,KAAKP,GAA3D;AACA,UAAMQ,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,MAAN,EAAiB;AAChC,YAAMC,gBAAgBD,UAAUd,OAAOc,MAAP,CAAhC;;AAEAT,iBAASQ,GAAT,EAAcE,aAAd;AACD,OAJD;AAKA,WAAKZ,KAAL,CAAWa,UAAX,CAAsBC,EAAtB,CAAyBP,SAAzB,EAAoCE,QAApC;;AAEA,UAAIM,2BAAJ;AACA,UAAIC,UAAU,KAAKhB,KAAL,CACXiB,aADW,CACGZ,kBAAkB,mBAAlB,GAAwC,WAD3C,EACwD,KAAKJ,GAD7D,EACkEM,SADlE,EAC6ED,IAD7E,EAEXF,IAFW,CAEN,6BAAqB;AACzBW,6BAAqBG,iBAArB;AACApB,eAAOqB,IAAP,CAAY,YAAZ;AACD,OALW,EAMXC,KANW,CAML,eAAO;AACZ,eAAKpB,KAAL,CAAWa,UAAX,CAAsBQ,GAAtB,CAA0Bd,SAA1B,EAAqCE,QAArC;AACA,cAAMC,GAAN;AACD,OATW,CAAd;;AAWA,UAAMY,OAAO,SAAPA,IAAO,GAAM;AACjB,YAAI,CAACN,OAAL,EAAc;AACdD;AACAC,gBAAQZ,IAAR,CAAa,YAAM;AACjBY,oBAAU,IAAV;AACA,iBAAKhB,KAAL,CAAWa,UAAX,CAAsBQ,GAAtB,CAA0Bd,SAA1B,EAAqCE,QAArC;AACD,SAHD;AAID,OAPD;;AASA,aAAO;AACLc,gBAAQD,IADH;AAELA,kBAFK;AAGLlB,cAAM;AAAA,iBAAMoB,QAAQC,OAAR,CAAgBT,OAAhB,EAAyBZ,IAAzB,CAA8BsB,EAA9B,CAAN;AAAA;AAHD,OAAP;AAKD;;;;EA7CgC9B,a;;SAAdG,K","file":"Query.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport AbstractQuery from '../store/AbstractQuery';\nimport WebsocketStore from './WebsocketStore';\nimport { decode } from '../extended-json';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nconst logger = new Logger('liwi:websocket-client:query');\n\nexport default class Query extends AbstractQuery<WebsocketStore> {\n  constructor(store: WebsocketStore, key: string) {\n    super(store);\n    this.key = key;\n  }\n\n  fetch(callback: ?Function): Promise<any> {\n    return this.store.emit('fetch', this.key).then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    const eventName = `subscribe:${this.store.restName}.${this.key}`;\n    const listener = (err, result) => {\n      const decodedResult = result && decode(result);\n      if (!PRODUCTION) logger.debug(eventName, { result, decodedResult });\n      callback(err, decodedResult);\n    };\n    this.store.connection.on(eventName, listener);\n\n    let _stopEmitSubscribe;\n    let promise = this.store\n      .emitSubscribe(_includeInitial ? 'fetchAndSubscribe' : 'subscribe', this.key, eventName, args)\n      .then(stopEmitSubscribe => {\n        _stopEmitSubscribe = stopEmitSubscribe;\n        logger.info('subscribed');\n      })\n      .catch(err => {\n        this.store.connection.off(eventName, listener);\n        throw err;\n      });\n\n    const stop = () => {\n      if (!promise) return;\n      _stopEmitSubscribe();\n      promise.then(() => {\n        promise = null;\n        this.store.connection.off(eventName, listener);\n      });\n    };\n\n    return {\n      cancel: stop,\n      stop,\n      then: cb => Promise.resolve(promise).then(cb),\n    };\n  }\n}\n"]}