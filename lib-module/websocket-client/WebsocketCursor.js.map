{"version":3,"sources":["../../src/websocket-client/WebsocketCursor.js"],"names":["AbstractCursor","WebsocketCursor","store","options","_options","newLimit","_idCursor","Error","limit","Promise","resolve","connection","emit","then","idCursor","type","args","id","_create","count","_result","result","key","_store","keyPath","applyLimit","closedPromise","close"],"mappings":";;;;;;;;AACA,OAAOA,cAAP,MAA2B,yBAA3B;;IAGqBC,e;AAKnB,2BAAYC,KAAZ,EAAmCC,OAAnC,EAA4C;AAAA;;AAAA,kIACpCD,KADoC;;AAAA,WAE1C,MAAKE,QAAL,GAAgBD,OAF0B,EAE1C,MAAKC,QAAL,GAAgBD,OAF0B;AAG3C;;AAED;;;;0BAEME,Q,EAAiC;AACrC,UAAI,KAAKC,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;;AAEpB,aADA,KAAKH,QAAL,CAAcI,KAAd,GAAsBH,QACtB,EAAOI,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED;;;;8BAEU;AAAA;;AACR,UAAI,KAAKJ,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACpB,aAAO,KAAKL,KAAL,CAAWS,UAAX,CAAsBC,IAAtB,CAA2B,cAA3B,EAA2C,KAAKR,QAAhD,EAA0DS,IAA1D,CAA+D,oBAAY;AAC3EC,gBAD2E,KAEhF,OAAKR,SAAL,GAAiBQ,QAF+D;AAGjF,OAHM,CAAP;AAID;;;yBAEIC,I,EAA6B;AAAA;;AAAA,wCAApBC,IAAoB,kEAApBA,IAAoB;;AAAA,aAC3B,KAAKV,SADsB,GAKzB,KAAKJ,KAAL,CAAWU,IAAX,CAAgB,QAAhB,EAA0B,EAAEG,UAAF,EAAQE,IAAI,KAAKX,SAAjB,EAA1B,EAAwDU,IAAxD,CALyB,GAEvB,KAAKE,OAAL,GAAeL,IAAf,CAAoB;AAAA,eAAM,OAAKD,IAAL,gBAAUG,IAAV,SAAmBC,IAAnB,EAAN;AAAA,OAApB,CAFuB;AAMjC;;;4BAEOG,K,EAAe;AAErB,aADA,KAAKP,IAAL,CAAU,SAAV,EAAqBO,KAArB,CACA,EAAO,IAAP;AACD;;;2BAEqB;AAAA;;AACpB,aAAO,KAAKP,IAAL,CAAU,MAAV,EAAkBC,IAAlB,CAAuB,kBAAU;AAGtC,eAFA,OAAKO,OAAL,GAAeC,MAEf,EADA,OAAKC,GAAL,GAAWD,UAAUA,OAAO,OAAKE,MAAL,CAAYC,OAAnB,CACrB,EAAO,OAAKF,GAAZ;AACD,OAJM,CAAP;AAKD;;;6BAE8B;AAC7B,aAAOb,QAAQC,OAAR,CAAgB,KAAKU,OAArB,CAAP;AACD;;;4BAEkC;AAAA,UAA7BK,UAA6B;;AACjC,aAAO,KAAKb,IAAL,CAAU,OAAV,EAAmBa,UAAnB,CAAP;AACD;;;4BAEsB;AACrB,UAAI,CAAC,KAAKF,MAAV,EAAkB,OAAOd,QAAQC,OAAR,EAAP;;AAElB,UAAMgB,gBAAgB,KAAKpB,SAAL,GAAiB,KAAKM,IAAL,CAAU,OAAV,CAAjB,GAAsCH,QAAQC,OAAR,EAA5D;;AAKA,aAJA,KAAKJ,SAAL,GAAiB,IAIjB,EAHA,KAAKF,QAAL,GAAgB,IAGhB,EAFA,KAAKmB,MAAL,SAEA,EADA,KAAKH,OAAL,SACA,EAAOM,aAAP;AACD;;;8BAE4C;AAAA;;AAC3C,aAAO,KAAKxB,KAAL,CAAWU,IAAX,CAAgB,gBAAhB,EAAkC,KAAKR,QAAvC,EAAiDS,IAAjD,CAAsD,kBAAU;AAErE,eADA,OAAKc,KAAL,EACA,EAAON,MAAP;AACD,OAHM,CAAP;AAID;;EAzE0CrB,c;;SAAxBC,e","file":"WebsocketCursor.js","sourcesContent":["import WebsocketStore from './WebsocketStore';\nimport AbstractCursor from '../store/AbstractCursor';\nimport type { ResultType } from '../types';\n\nexport default class WebsocketCursor extends AbstractCursor<WebsocketStore> {\n  _idCursor: ?number;\n  _options: ?Object;\n  _result: ?Object;\n\n  constructor(store: WebsocketStore, options) {\n    super(store);\n    this._options = options;\n  }\n\n  /* options */\n\n  limit(newLimit: number): Promise<this> {\n    if (this._idCursor) throw new Error('Cursor already created');\n    this._options.limit = newLimit;\n    return Promise.resolve(this);\n  }\n\n  /* results */\n\n  _create() {\n    if (this._idCursor) throw new Error('Cursor already created');\n    return this.store.connection.emit('createCursor', this._options).then(idCursor => {\n      if (!idCursor) return;\n      this._idCursor = idCursor;\n    });\n  }\n\n  emit(type, ...args): Promise<any> {\n    if (!this._idCursor) {\n      return this._create().then(() => this.emit(type, ...args));\n    }\n\n    return this.store.emit('cursor', { type, id: this._idCursor }, args);\n  }\n\n  advance(count: number) {\n    this.emit('advance', count);\n    return this;\n  }\n\n  next(): Promise<?any> {\n    return this.emit('next').then(result => {\n      this._result = result;\n      this.key = result && result[this._store.keyPath];\n      return this.key;\n    });\n  }\n\n  result(): Promise<?ResultType> {\n    return Promise.resolve(this._result);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this.emit('count', applyLimit);\n  }\n\n  close(): Promise<void> {\n    if (!this._store) return Promise.resolve();\n\n    const closedPromise = this._idCursor ? this.emit('close') : Promise.resolve();\n    this._idCursor = null;\n    this._options = null;\n    this._store = undefined;\n    this._result = undefined;\n    return closedPromise;\n  }\n\n  toArray(): Promise<Array<Array<ResultType>>> {\n    return this.store.emit('cursor toArray', this._options).then(result => {\n      this.close();\n      return result;\n    });\n  }\n}\n"]}