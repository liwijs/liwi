{"version":3,"sources":["../../src/rethinkdb/RethinkStore.js"],"names":["AbstractStore","Query","RethinkStore","connection","tableName","r","_connection","keyPath","_tableName","table","query","criteria","sort","filter","Object","keys","forEach","key","orderBy","desc","tableCreate","then","object","created","Date","insert","inserted","generatedKeys","generated_keys","Error","id","replaceOne","updated","get","replace","conflict","run","objects","Promise","all","map","partialUpdate","update","returnChanges","res","changes","new_val","delete","cursor","next","catch","field","getField"],"mappings":"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","file":"RethinkStore.js","sourcesContent":["import RethinkConnection from './RethinkConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport Query from './Query';\n// import RethinkCursor from './RethinkCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\nexport default class RethinkStore extends AbstractStore<RethinkConnection> {\n  tableName: string;\n  keyPath = 'id';\n\n  constructor(connection: RethinkConnection, tableName: string) {\n    super(connection);\n    this._tableName = tableName;\n    this.r = this.connection._connection;\n  }\n\n  table() {\n    return this.r.table(this._tableName);\n  }\n\n  createQuery(query) {\n    return new Query(this, query);\n  }\n\n  query() {\n    return this.table();\n  }\n\n  _query(criteria: ?Object, sort: ?Object) {\n    const query = this.table();\n\n    if (criteria) {\n      query.filter(criteria);\n    }\n\n    if (sort) {\n      Object.keys(sort).forEach(key => {\n        if (sort[key] === -1) {\n          query.orderBy(this.r.desc(key));\n        } else {\n          query.orderBy(key);\n        }\n      });\n    }\n\n    return query;\n  }\n\n  create(): Promise<void> {\n    return this.r.tableCreate(this._tableName).then(() => null);\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object.created) object.created = new Date();\n\n    return this.table()\n      .insert(object)\n      .then(({ inserted, generated_keys: generatedKeys }) => {\n        if (inserted !== 1) throw new Error('Could not insert');\n        if (object.id == null) {\n          object.id = generatedKeys[0];\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    return this.table().get(object.id).replace(object).then(() => object);\n  }\n\n  upsertOne(object: UpdateType): Promise<ResultType> {\n    if (!object.updated) object.updated = new Date();\n\n    return this.table().insert(object, { conflict: 'replace' }).run().then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.replaceOne(object)));\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise<void> {\n    return this.table().get(key).update(partialUpdate).run();\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    return this.table()\n      .get(object.id)\n      .update(partialUpdate, { returnChanges: true })\n      .then(res => res.changes.new_val);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise<void> {\n    return this.table().filter(criteria).update(partialUpdate).run();\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.table().get(key).delete().run();\n  }\n\n  cursor(query, sort: ?Object) {\n    // : Promise<RethinkCursor<ModelType>> {\n    if (sort) throw new Error('sort is not supported');\n    throw new Error('Not Supported yet, please use query().run({ cursor: true })');\n  }\n\n  findAll(): Promise<void> {\n    throw new Error('Not supported, please use query().run()');\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.table().get(key).run();\n  }\n\n  findOne(query): Promise<?ResultType> {\n    return query.run({ cursor: true }).then(cursor => cursor.next().catch(err => null));\n  }\n\n  findValue(field: string, query): Promise<any> {\n    return query\n      .getField(field)\n      .run({ cursor: true })\n      .then(cursor => cursor.next().catch(err => null));\n  }\n}\n"]}