{"version":3,"sources":["../../src/react-redux/FindAndSubscribe.js"],"names":["Component","PropTypes","FindAndSubscribeComponent","props","query","action","dispatch","context","store","_subscribe","fetchAndSubscribe","err","result","alert","stop","children","contextTypes","any"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;IAaqBC,yB;;;;;;;;;;;wCAOC;AAAA,mBACQ,KAAKC,KADb;AAAA,UACVC,KADU,UACVA,KADU;AAAA,UACHC,MADG,UACHA,MADG;;AAElB,UAAMC,WAAW,KAAKH,KAAL,CAAWG,QAAX,IAAuB,KAAKC,OAAL,CAAaC,KAAb,CAAmBF,QAA3D;AACA,WAAKG,UAAL,GAAkBL,MAAMM,iBAAN,CAAwB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACzD,YAAID,GAAJ,EAAS;AACP;AACAE,uCAA2BF,GAA3B;AACA;AACD;;AAEDL,iBAASD,OAAOO,MAAP,EAAe,IAAf,CAAT;AACD,OARiB,CAAlB;AASD;;;2CAEsB;AACrB,UAAI,KAAKH,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBK,IAAhB;AACA,eAAO,KAAKL,UAAZ;AACD;AACF;;;6BAEuB;AACtB,aAAO,KAAKN,KAAL,CAAWY,QAAlB;AACD;;;;EA9BoDf,S,UAG9CgB,Y,GAAe;AACpBR,SAAOP,UAAUgB;AADG,C;SAHHf,yB","file":"FindAndSubscribe.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport type { ReactNodeType, ReduxDispatchType } from 'alp-react-redux/types';\nimport type AbstractQuery from '../store/AbstractQuery';\n\ntype ActionType = (result: any) => any;\n\ntype PropsType = {\n  dispatch: ?ReduxDispatchType,\n  action: ActionType,\n  query: AbstractQuery,\n  children: ReactNodeType,\n};\n\nexport default class FindAndSubscribeComponent extends Component {\n  props: PropsType;\n\n  static contextTypes = {\n    store: PropTypes.any,\n  };\n\n  componentDidMount() {\n    const { query, action } = this.props;\n    const dispatch = this.props.dispatch || this.context.store.dispatch;\n    this._subscribe = query.fetchAndSubscribe((err, result) => {\n      if (err) {\n        // eslint-disable-next-line no-alert\n        alert(`Unexpected error: ${err}`);\n        return;\n      }\n\n      dispatch(action(result, true));\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._subscribe) {\n      this._subscribe.stop();\n      delete this._subscribe;\n    }\n  }\n\n  render(): ReactNodeType {\n    return this.props.children;\n  }\n}\n"]}