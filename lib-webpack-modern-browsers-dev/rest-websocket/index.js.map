{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":["Logger","encode","decode","logger","ObjectBufferType","type","data","init","io","restService","on","socket","openWatchers","Set","forEach","watcher","stop","restName","buffer","args","callback","Error","restResource","get","info","options","createCursor","user","then","cursor","toArray","results","catch","err","error","message","result","key","eventName","otherArgs","startsWith","query","queries","emit","add","warn"],"mappings":"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","file":"index.js","sourcesContent":["/* global PRODUCTION */\nimport Logger from 'nightingale-logger/src';\nimport { encode, decode } from '../msgpack';\n\nconst logger = new Logger('liwi:rest-websocket');\n\ntype ObjectBufferType = {\n  type: 'Buffer',\n  data: Array<number>,\n}\n\nexport default function init(io, restService) {\n  io.on('connection', (socket) => {\n    let openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on('rest', (\n      { type, restName, buffer }: { type: string, restName: string, buffer: ?ObjectBufferType },\n      args: ?Array<any>|Function,\n      callback: ?Function,\n    ) => {\n      if (buffer) {\n        if (!PRODUCTION && callback) {\n          throw new Error('Cannot have args and buffer.');\n        }\n\n        callback = args;\n        args = decode(buffer);\n      }\n\n      if (!PRODUCTION && !callback) {\n        throw new Error('`callback` missing.');\n      }\n\n      const restResource = restService.get(restName);\n\n      logger.info('rest', { type, restName, args });\n      switch (type) {\n        case 'cursor toArray': {\n          const [options] = args;\n          return restService.createCursor(restResource, socket.user, options)\n            .then(cursor => cursor.toArray())\n            .then(results => callback(null, encode(results)))\n            .catch((err) => {\n              logger.error(type, err);\n              callback(err.message);\n            });\n        }\n\n\n        case 'insertOne':\n        case 'updateOne':\n        case 'updateSeveral':\n        case 'partialUpdateByKey':\n        case 'partialUpdateOne':\n        case 'partialUpdateMany':\n        case 'deleteByKey':\n        case 'deleteOne':\n        case 'findOne':\n          try {\n            if (!PRODUCTION && !restResource[type]) {\n              throw new Error(`rest: ${restName}.${type} is not available`);\n            }\n\n            return restResource[type](socket.user, ...args)\n              .then(result => callback(null, encode(result)))\n              .catch((err) => {\n                logger.error(type, { err });\n                callback(err.message || err);\n              });\n          } catch (err) {\n            logger.error(type, { err });\n            callback(err.message || err);\n          }\n          break;\n\n        case 'fetch':\n        case 'subscribe':\n        case 'fetchAndSubscribe':\n          try {\n            const [key, eventName, otherArgs = []] = args;\n\n            if (!key.startsWith('query')) {\n              throw new Error('Invalid query key');\n            }\n\n            const query = restResource.queries[key]; // todo pass connected user\n            if (!query) {\n              throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n            }\n\n            if (type === 'fetch') {\n              return query[type](result => callback(null, result && encode(result)), ...otherArgs)\n                .catch((err) => {\n                  logger.error(type, { err });\n                  callback(err.message || err);\n                });\n            } else {\n              const watcher = query[type]((err, result) => {\n                if (err) {\n                  logger.error(type, { err });\n                }\n                socket.emit(eventName, err, encode(result));\n              });\n              watcher.then(() => callback(), err => {\n                logger.error(type, { err });\n                callback(err.message || err);\n              });\n\n              openWatchers.add(watcher);\n            }\n          } catch (err) {\n            logger.error(type, { err });\n            callback(err.message || err);\n          }\n          break;\n\n        default:\n          try {\n            logger.warn('Unknown command', { type });\n            callback(`rest: unknown command \"${type}\"`);\n          } catch (err) {\n            logger.error(type, { err });\n            callback(err.message || err);\n          }\n      }\n    });\n  });\n}\n"]}