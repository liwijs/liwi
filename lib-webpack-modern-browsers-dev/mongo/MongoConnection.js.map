{"version":3,"sources":["../../src/mongo/MongoConnection.js"],"names":["Logger","MongoClient","AbstractConnection","logger","MongoConnection","constructor","config","Map","has","set","Error","connectionString","get","connect","info","connectPromise","then","connection","on","warn","connectionFailed","getConnection","Promise","reject","resolve","_connection","err","_connecting","catch","console","error","message","process","nextTick","exit","close"],"mappings":"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","file":"MongoConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi.mongo.MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection: Db|null;\n  _connecting: Promise|null;\n  connectionFailed: boolean;\n\n  constructor(config: Map) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}`\n       + `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = null;\n        this.getConnection = () => Promise.resolve(this._connection);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n          // throw err;\n        process.nextTick(() => {\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.close().then(() => {\n        this._connection = null;\n      });\n    } else if (this._connecting) {\n      return this._connecting.then(() => this.close());\n    }\n  }\n}\n"]}