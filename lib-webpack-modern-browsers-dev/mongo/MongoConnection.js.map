{"version":3,"sources":["../../src/mongo/MongoConnection.js"],"names":[],"mappings":"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","file":"MongoConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi.mongo.MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n    _connection: Db|null;\n    _connecting: Promise|null;\n    connectionFailed: boolean;\n\n    constructor(config: Map) {\n        super();\n\n        if (!config.has('host')) {\n            config.set('host', 'localhost');\n        }\n        if (!config.has('port')) {\n            config.set('port', '27017');\n        }\n        if (!config.has('database')) {\n            throw new Error('Missing config database');\n        }\n\n        const connectionString = `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}`\n                               + `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n        this.connect(connectionString);\n    }\n\n    connect(connectionString) {\n        logger.info('connecting', { connectionString });\n\n        const connectPromise = MongoClient.connect(connectionString)\n            .then(connection => {\n                logger.info('connected', { connectionString });\n                connection.on('close', () => {\n                    logger.warn('close', { connectionString });\n                    this.connectionFailed = true;\n                    this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n                });\n                connection.on('timeout', () => {\n                    logger.warn('timeout', { connectionString });\n                    this.connectionFailed = true;\n                    this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n                });\n                connection.on('reconnect', () => {\n                    logger.warn('reconnect', { connectionString });\n                    this.connectionFailed = false;\n                    this.getConnection = () => Promise.resolve(this._connection);\n                });\n                connection.on('error', err => {\n                    logger.warn('error', { connectionString, err });\n                });\n\n                this._connection = connection;\n                this._connecting = null;\n                this.getConnection = () => Promise.resolve(this._connection);\n                return connection;\n            })\n            .catch(err => {\n                logger.info('not connected', { connectionString });\n                console.error(err.message || err);\n                // throw err;\n                process.nextTick(() => {\n                    process.exit(1);\n                });\n\n                throw err;\n            });\n\n        this.getConnection = () => Promise.resolve(connectPromise);\n        this._connecting = this.getConnection();\n    }\n\n    getConnection(): Promise<Db> {\n        throw new Error('call connect()');\n    }\n\n    close() {\n        this.getConnection = () => Promise.reject(new Error('Connection closed'));\n        if (this._connection) {\n            return this._connection.close();\n        } else if (this._connecting) {\n            return this._connecting.then(() => this.close());\n        }\n    }\n}\n"]}