{"version":3,"sources":["../../src/mongo/MongoConnection.js"],"names":[],"mappings":"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","file":"MongoConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi.mongo.MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection: Db|null;\n  _connecting: Promise|null;\n  connectionFailed: boolean;\n\n  constructor(config: Map) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}`\n       + `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n            .then(connection => {\n              logger.info('connected', { connectionString });\n              connection.on('close', () => {\n                logger.warn('close', { connectionString });\n                this.connectionFailed = true;\n                this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n              });\n              connection.on('timeout', () => {\n                logger.warn('timeout', { connectionString });\n                this.connectionFailed = true;\n                this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n              });\n              connection.on('reconnect', () => {\n                logger.warn('reconnect', { connectionString });\n                this.connectionFailed = false;\n                this.getConnection = () => Promise.resolve(this._connection);\n              });\n              connection.on('error', err => {\n                logger.warn('error', { connectionString, err });\n              });\n\n              this._connection = connection;\n              this._connecting = null;\n              this.getConnection = () => Promise.resolve(this._connection);\n              return connection;\n            })\n            .catch(err => {\n              logger.info('not connected', { connectionString });\n              console.error(err.message || err);\n                // throw err;\n              process.nextTick(() => {\n                process.exit(1);\n              });\n\n              throw err;\n            });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.close();\n    } else if (this._connecting) {\n      return this._connecting.then(() => this.close());\n    }\n  }\n}\n"]}