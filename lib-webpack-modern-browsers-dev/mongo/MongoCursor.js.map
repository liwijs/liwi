{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,oBAAnB;AACA,OAAO,UAAP,MAAuB,cAAvB;AACA,OAAO,cAAP,MAA2B,yBAA3B;;AAEA,eAAe,MAAM,WAAN,SAA0B,cAA1B,CAAqD;AAClE,cAAY,KAAZ,EAA8B,MAA9B,EAA6C;AAAA,UAAjC,KAAiC,YAA3B,UAA2B;AAAA,uHAAjC,KAAiC;AAAA;;AAAA,UAAf,MAAe,YAAR,MAAQ;AAAA,oHAAf,MAAe;AAAA;;AAC3C,UAAM,KAAN;AACA,SAAK,OAAL,GAAe,MAAf;AACD;;AAED,UAAQ,KAAR,EAA2B;AAAA,iBAAnB,KAAmB;AAAA,mHAAnB,KAAmB;AAAA;;AACzB,SAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACD;;AAED,SAAoB;AAAA;AAAA,4BAAb,OAAa;AAAA;AAAA;;AAAA;AAAA;;AAAA,iBACX,KAAK,OAAL,CAAa,IAAb,GACE,IADF,CAEK,SAAS;AACP,WAAK,OAAL,GAAe,KAAf;AACA,WAAK,GAAL,GAAW,SAAS,MAAM,GAA1B;AACA,aAAO,KAAK,GAAZ;AACD,KANN,CADW;AASnB;;AAED,QAAM,QAAN,EAA+B;AAAA;AAAA,4BAAR,OAAQ;AAAA;AAAA;;AAAA;AAAA;;AAAA,iBAAzB,QAAyB;AAAA,sHAAzB,QAAyB;AAAA;;AAC7B,SAAK,OAAL,CAAa,KAAb,CAAmB,QAAnB;AAD6B,iBAEtB,QAAQ,OAAR,CAAgB,IAAhB,CAFsB;AAG9B;;AAED,UAAkC;AAAA,QAA5B,UAA4B,yDAAP,KAAO;;AAAA,iBAA5B,UAA4B;AAAA,sHAA5B,UAA4B;AAAA;;AAChC,WAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,UAAnB,CAAP;AACD;;AAED,WAAS;AACP,WAAO,QAAQ,OAAR,CAAgB,KAAK,OAArB,CAAP;AACD;;AAED,UAAQ;AACN,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,OAAL,CAAa,KAAb;AACA,WAAK,OAAL,GAAe,KAAK,MAAL,GAAc,KAAK,OAAL,GAAe,SAA5C;AACD;;AAED,WAAO,QAAQ,OAAR,EAAP;AACD;;AAED,YAAyB;AAAA;AAAA,4BAAf,OAAe;AAAA;AAAA;;AAAA;AAAA;;AAAA,iBAChB,KAAK,OAAL,CAAa,OAAb,EADgB;AAExB;AA7CiE","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n  constructor(store:MongoStore, cursor:Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count:number):void {\n    this._cursor.skip(count);\n  }\n\n  next():Promise<any> {\n    return this._cursor.next()\n            .then(\n                value => {\n                  this._result = value;\n                  this.key = value && value._id;\n                  return this.key;\n                },\n            );\n  }\n\n  limit(newLimit:number):Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit:boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = this._store = this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray():Promise<Array> {\n    return this._cursor.toArray();\n  }\n}\n"]}