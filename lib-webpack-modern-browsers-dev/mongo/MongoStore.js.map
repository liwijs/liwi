{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["ObjectID","Db","MongoConnection","AbstractStore","MongoCursor","MongoStore","constructor","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","Promise","reject","err","connectionFailed","resolve","create","insertOne","object","_id","toString","created","Date","result","ops","ok","n","updateOne","replaceOne","updated","upsertOne","$set","upsert","replaceSeveral","objects","all","map","_partialUpdate","partialUpdate","Object","keys","some","key","partialUpdateByKey","partialUpdateOne","findByKey","partialUpdateMany","criteria","updateMany","deleteByKey","removeOne","cursor","sort","find","findOne","limit","next"],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n  _collection: Collection|Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection()\n      .then((db: Db) => this._collection = db.collection(collectionName))\n      .catch(err => this._collection = Promise.reject(err));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object._id) {\n      object._id = (new ObjectID()).toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => (\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true })\n      ))\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate)\n      .then(res => this.findByKey(object._id));\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.collection\n      .then(collection => collection.removeOne({ _id: key }))\n      .then(() => null);\n  }\n\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}