{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":["Logger","AbstractStore","WebsocketCursor","encode","decode","Query","logger","WebsocketStore","websocket","restName","keyPath","Error","key","debug","type","args","connection","isDisconnected","emit","json","then","result","on","off","object","objects","partialUpdate","criteria","sort","Promise","resolve","findOne","id"],"mappings":"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","file":"WebsocketStore.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\nimport { encode, decode } from '../extended-json';\nimport Query from './Query';\n\nconst logger = new Logger('liwi:websocket-client');\n\ntype WebsocketConnectionType = {\n  emit: Function,\n  isConnected: Function,\n};\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnectionType> {\n  keyPath = 'id';\n\n  constructor(websocket: WebsocketConnectionType, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    logger.debug('createQuery', { key });\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    logger.debug('emit', { type, args });\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection\n      .emit('rest', {\n        type,\n        restName: this.restName,\n        json: encode(args),\n      })\n      .then(result => result && decode(result));\n  }\n\n  emitSubscribe(type, ...args) {\n    const emit = () => this.emit(type, ...args);\n    return emit().then(result => {\n      this.connection.on('reconnect', emit);\n      return () => this.connection.off('reconnect', emit);\n    });\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise<void> {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise<void> {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}