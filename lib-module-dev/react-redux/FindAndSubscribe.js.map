{"version":3,"sources":["../../src/react-redux/FindAndSubscribe.js"],"names":["React","Component","ReactNodeType","ReactComponentType","AbstractQuery","applyChange","FindAndSubscribeComponent","state","fetched","result","query","props","_subscribe","fetchAndSubscribe","err","change","alert","newResult","setState","stop","createElement","component","name","loadingComponent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAcC,+BAAd,EAA6BC,yCAA7B,QAAuD,uBAAvD;AACA,OAAYC,cAAZ,MAA+B,wBAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;;;;;;;;;;AAEA,oCAAiB,SACf,mBAAM,UAAN,CADe,EAEf,oBAAO,oBAAP,CAFe,EAGf,wBAAW,yBAAX,CAHe,EAIf,+BAAkB,WAAC,yBAAD,CAAlB,CAJe,CAAjB;IAOqBC,yB;;;;;;;;;;4NAGnBC,K,GAAQ;AACNC,eAAS,KADH;AAENC;AAFM,K;;;;;wCAKY;AAAA;;AAAA,UACVC,KADU,GACA,KAAKC,KADL,CACVD,KADU;AAElB,WAAKE,UAAL,GAAkBF,MAAMG,iBAAN,CAAwB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACzD,YAAID,GAAJ,EAGE,YADAE,6BAA2BF,GAA3B,CACA;;AAGF,YAAMG,YAAYZ,YAAY,OAAKE,KAAL,CAAWE,MAAvB,EAA+BM,MAA/B,CAAlB;;AAEK,eAAKR,KAAL,CAAWC,OATyC,GAW9CS,cAAc,OAAKV,KAAL,CAAWE,MAXqB,IAYvD,OAAKS,QAAL,CAAc,EAAET,QAAQQ,SAAV,EAAd,CAZuD,GAUvD,OAAKC,QAAL,CAAc,EAAEV,SAAS,IAAX,EAAiBC,QAAQQ,SAAzB,EAAd,CAVuD;AAc1D,OAdiB,CAFA;AAiBnB;;;2CAEsB;AACjB,WAAKL,UADY,KAEnB,KAAKA,UAAL,CAAgBO,IAAhB,EAFmB,EAGnB,OAAO,KAAKP,UAHO;AAKtB;;;6BAEuB;AAAA,iCAAd,oBAAc;;AAAA,aACjB,KAAKL,KAAL,CAAWC,OADM,sBAKfR,MAAMoB,aAAN,CAAoB,KAAKT,KAAL,CAAWU,SAA/B,sBAA6C,KAAKV,KAAL,CAAWW,IAAxD,EAA+D,KAAKf,KAAL,CAAWE,MAA1E,EALe,uBAEb,KAAKE,KAAL,CAAWY,gBAAX,GAA8BvB,MAAMoB,aAAN,CAAoB,KAAKT,KAAL,CAAWY,gBAA/B,CAA9B,GAAiF,IAFpE;AAMvB;;EAxCoDtB,S,kCAChD,S;SADcK,yB","file":"FindAndSubscribe.js","sourcesContent":["import React, { Component } from 'react';\nimport type { ReactNodeType, ReactComponentType } from 'alp-react-redux/types';\nimport type AbstractQuery from '../store/AbstractQuery';\nimport applyChange from './applyChange';\n\ntype PropsType = {\n  name: string,\n  query: AbstractQuery,\n  component: ReactComponentType,\n  loadingComponent: ?ReactComponentType,\n};\n\nexport default class FindAndSubscribeComponent extends Component {\n  props: PropsType;\n\n  state = {\n    fetched: false,\n    result: [],\n  };\n\n  componentDidMount() {\n    const { query } = this.props;\n    this._subscribe = query.fetchAndSubscribe((err, change) => {\n      if (err) {\n        // eslint-disable-next-line no-alert\n        alert(`Unexpected error: ${err}`);\n        return;\n      }\n\n      const newResult = applyChange(this.state.result, change);\n\n      if (!this.state.fetched) {\n        this.setState({ fetched: true, result: newResult });\n      } else if (newResult !== this.state.result) {\n        this.setState({ result: newResult });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._subscribe) {\n      this._subscribe.stop();\n      delete this._subscribe;\n    }\n  }\n\n  render(): ReactNodeType {\n    if (!this.state.fetched) {\n      return this.props.loadingComponent ? React.createElement(this.props.loadingComponent) : null;\n    }\n\n    return React.createElement(this.props.component, { [this.props.name]: this.state.result });\n  }\n}\n"]}