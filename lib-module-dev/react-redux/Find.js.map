{"version":3,"sources":["../../src/react-redux/Find.js"],"names":["React","Component","ReactNodeType","ReactComponentType","AbstractQuery","FindComponent","state","fetched","result","undefined","query","props","_find","fetch","setState","loadingComponent","createElement","component","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAcC,+BAAd,EAA6BC,yCAA7B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;;;;;;;;AAEA,oCAAiB,SACf,mBAAM,UAAN,CADe,EAEf,oBAAO,oBAAP,CAFe,EAGf,wBAAW,yBAAX,CAHe,EAIf,+BAAkB,WAAC,yBAAD,CAAlB,CAJe,CAAjB;IAOqBC,a,sBACd,S;;;;;;;;;;;;;;yPAELC,K,GAAQ;AACNC,eAAS,KADH;AAENC,cAAQC;AAFF,K;;;;;wCAKY;AAAA;;AAAA,UACVC,KADU,GACA,KAAKC,KADL,CACVD,KADU;;AAElB,WAAKE,KAAL,GAAaF,MAAMG,KAAN,CAAY,UAACL,MAAD,EAAiB;AAAA,0BAAV,OAAU;;AAAA;;AACxC,YAAI,CAAC,OAAKI,KAAV,EAAiB;AACjB,eAAKE,QAAL,CAAc;AACZP,mBAAS,IADG;AAEZC;AAFY,SAAd;AAIA,eAAO,OAAKI,KAAZ;AACD,OAPY,CAAb;AAQD;;;2CAEsB;AACrB,UAAI,KAAKA,KAAT,EAAgB;AACd;AACA,eAAO,KAAKA,KAAZ;AACD;AACF;;;6BAEuB;AAAA,iCAAd,oBAAc;;AACtB,UAAI,CAAC,KAAKN,KAAL,CAAWC,OAAhB,EAAyB;AACvB,kCAAO,KAAKI,KAAL,CAAWI,gBAAX,GAA8Bf,MAAMgB,aAAN,CAAoB,KAAKL,KAAL,CAAWI,gBAA/B,CAA9B,GAAiF,IAAxF;AACD;;AAED,gCAAOf,MAAMgB,aAAN,CAAoB,KAAKL,KAAL,CAAWM,SAA/B,sBAA6C,KAAKN,KAAL,CAAWO,IAAxD,EAA+D,KAAKZ,KAAL,CAAWE,MAA1E,EAAP;AACD;;;;EAjCwCP,S,mCACpC,S;;;;SADcI,a","file":"Find.js","sourcesContent":["import React, { Component } from 'react';\nimport type { ReactNodeType, ReactComponentType } from 'alp-react-redux/src/types';\nimport AbstractQuery from '../store/AbstractQuery';\n\ntype PropsType = {\n  name: string,\n  query: AbstractQuery,\n  component: ReactComponentType,\n  loadingComponent: ?ReactComponentType,\n};\n\nexport default class FindComponent extends Component {\n  props: PropsType;\n\n  state = {\n    fetched: false,\n    result: undefined,\n  };\n\n  componentDidMount() {\n    const { query } = this.props;\n    this._find = query.fetch((result: any) => {\n      if (!this._find) return;\n      this.setState({\n        fetched: true,\n        result,\n      });\n      delete this._find;\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._find) {\n      // this._find.cancel();\n      delete this._find;\n    }\n  }\n\n  render(): ReactNodeType {\n    if (!this.state.fetched) {\n      return this.props.loadingComponent ? React.createElement(this.props.loadingComponent) : null;\n    }\n\n    return React.createElement(this.props.component, { [this.props.name]: this.state.result });\n  }\n}\n"]}