{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["ObjectID","Collection","Db","MongoConnection","AbstractStore","MongoCursor","InsertType","UpdateType","ResultType","MongoStore","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","Promise","reject","err","resolve","object","_id","toString","created","Date","insertOne","result","ops","ok","n","replaceOne","updated","updateOne","$set","upsert","objects","all","map","partialUpdate","Object","keys","some","key","_partialUpdate","partialUpdateByKey","findByKey","criteria","updateMany","removeOne","sort","find","cursor","findOne","limit","next","connectionFailed"],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\nexport default class MongoStore extends AbstractStore<MongoConnection> {\n  _collection: Collection | Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection\n      .getConnection()\n      .then((db: Db) => (this._collection = db.collection(collectionName)))\n      .catch(err => (this._collection = Promise.reject(err)));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection =>\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true }),\n      )\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection.then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate).then(res =>\n      this.findByKey(object._id),\n    );\n  }\n\n  partialUpdateMany(criteria, partialUpdate: UpdateType): Promise<void> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection.then(collection => collection.removeOne({ _id: key })).then(() => null);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ResultType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<?ResultType> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}