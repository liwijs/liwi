{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":["Cursor","MongoStore","AbstractCursor","ResultType","MongoCursor","store","cursor","_cursor","count","skip","next","then","value","_result","key","_id","newLimit","limit","Promise","resolve","applyLimit","close","undefined","_store","toArray"],"mappings":";;;;;;;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAAcC,yBAAd,QAAgC,UAAhC;;;;;;;IAEqBC,W;;;AACnB,uBAAYC,KAAZ,EAA+BC,MAA/B,EAA+C;AAAA;;AAAA,qBAA9B,iBAA8B;;AAAA,sBAAV,aAAU;;AAAA;AAAA;;AAAA,0HACvCD,KADuC;;AAAA,gCADO,iBACP;;AAE7C,UAAKE,OAAL,GAAeD,MAAf;AAF6C;AAG9C;;;;4BAEOE,K,EAAqB;AAAA,uBAAhB,UAAgB;;AAAA,eAAL,QAAK;AAAA;;AAC3B,WAAKD,OAAL,CAAaE,IAAb,CAAkBD,KAAlB;AACD;;;2BAEoB;AAAA;;AAAA,kCAAL,OAAK;;AACnB,aAAO,KAAKD,OAAL,CAAaG,IAAb,GACJC,IADI,CACC,UAACC,KAAD,EAAW;AACf,eAAKC,OAAL,GAAeD,KAAf;AACA,eAAKE,GAAL,GAAWF,SAASA,MAAMG,GAA1B;AACA,eAAO,OAAKD,GAAZ;AACD,OALI,CAAP;AAAA;AAAA;AAMD;;;0BAEKE,Q,EAA2B;AAAA,0BAAnB,UAAmB;;AAAA,kCAAR,gBAAQ;;AAAA;;AAC/B,WAAKT,OAAL,CAAaU,KAAb,CAAmBD,QAAnB;AACA,iCAAOE,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;;4BAEkC;AAAA,UAA7BC,UAA6B,uEAAP,KAAO;;AAAA,4BAAnB,WAAmB;;AAAA;;AACjC,aAAO,KAAKb,OAAL,CAAaC,KAAb,CAAmBY,UAAnB,CAAP;AACD;;;6BAEQ;AACP,aAAOF,QAAQC,OAAR,CAAgB,KAAKN,OAArB,CAAP;AACD;;;4BAEO;AACN,UAAI,KAAKN,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAac,KAAb;AACA,aAAKd,OAAL,GAAee,SAAf;AACA,aAAKC,MAAL,GAAcD,SAAd;AACA,aAAKT,OAAL,GAAeS,SAAf;AACD;;AAED,aAAOJ,QAAQC,OAAR,EAAP;AACD;;;8BAEqC;AAAA,kCAAnB,QAAM,iBAAN,CAAmB;;AACpC,aAAO,KAAKZ,OAAL,CAAaiB,OAAb,EAAP;AAAA;AAAA;AACD;;;;EA7CsCtB,c;;SAApBE,W","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\nimport type { ResultType } from '../types';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n  constructor(store: MongoStore, cursor: Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this._cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this._cursor.next()\n      .then((value) => {\n        this._result = value;\n        this.key = value && value._id;\n        return this.key;\n      });\n  }\n\n  limit(newLimit: number): Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = undefined;\n      this._store = undefined;\n      this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<ResultType>> {\n    return this._cursor.toArray();\n  }\n}\n"]}