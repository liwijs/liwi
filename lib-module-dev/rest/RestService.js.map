{"version":3,"sources":["../../src/rest/RestService.js"],"names":["RestCursor","RestService","restResources","key","restResource","set","get","Error","connectedUser","criteria","sort","limit","store","cursor"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;;;;IAEqBC,W;AACnB,uBAAYC,aAAZ,EAA6C;AAAA;;AAAA,6BAApB,aAAM,UAAN,EAAc,OAAd,CAAoB;;AAAA;;AAC3C,SAAKA,aAAL,GAAqBA,aAArB;AACD;;;;oCAEeC,G,EAAaC,Y,EAAc;AAAA,qBAAxB,UAAwB;;AAAA;;AACzC,WAAKF,aAAL,CAAmBG,GAAnB,CAAuBF,GAAvB,EAA4BC,YAA5B;AACD;;;wBAEGD,G,EAAa;AAAA,sBAAV,UAAU;;AAAA;;AACf,UAAMC,eAAe,KAAKF,aAAL,CAAmBI,GAAnB,CAAuBH,GAAvB,CAArB;AACA,UAAI,CAACC,YAAL,EAAmB,MAAM,IAAIG,KAAJ,8BAAqCJ,GAArC,OAAN;AACnB,aAAOC,YAAP;AACD;;;;4EAGCA,Y,EACAI,a;;;;;;;qCAAa,WAAG,UAAH,C;;;mCACY,SAAI,uBAAU,WAAC,UAAD,CAAV,CAAJ,EAAuB,mBAAM,WAAC,UAAD,CAAN,CAAvB,EAAsC,oBAAO,WAAC,UAAD,CAAP,CAAtC,C,eAAvBC,Q,oBAAAA,Q,EAAUC,I,oBAAAA,I,EAAMC,K,oBAAAA,K;;AAElB;AACAF,2BAAWL,aAAaK,QAAb,CAAsBD,aAAtB,EAAqCC,cAArC,CAAX;AACAC,uBAAON,aAAaM,IAAb,CAAkBF,aAAlB,EAAiCE,IAAjC,CAAP;;uBACqBN,aAAaQ,KAAb,CAAmBC,MAAnB,CAA0BJ,QAA1B,EAAoCC,IAApC,C;;;AAAfG,sB;;AACNF,wBAAQP,aAAaO,KAAb,CAAmBA,KAAnB,CAAR;AACA,oBAAIA,KAAJ,EAAWE,OAAOF,KAAP,CAAaH,aAAb,EAA4BG,KAA5B;oEACJ,IAAIX,UAAJ,CAAeI,YAAf,EAA6BI,aAA7B,EAA4CK,MAA5C,C;;;;;;;;;;;;;;;;;;;SA1BUZ,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map<string, any>) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n    restResource,\n    connectedUser: ?Object,\n    { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n  ): Promise {\n    // TODO: restResource.query(connectedUser, criteria || {}, sort).cursor()\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}