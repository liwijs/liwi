{"version":3,"sources":["../../src/rethinkdb/RethinkStore.js"],"names":["RethinkConnection","AbstractStore","Query","InsertType","UpdateType","ResultType","RethinkStore","connection","tableName","keyPath","_tableName","r","_connection","table","query","criteria","sort","filter","Object","keys","forEach","key","orderBy","desc","tableCreate","then","object","created","Date","insert","inserted","generatedKeys","generated_keys","Error","id","replaceOne","updated","get","replace","conflict","run","objects","Promise","all","map","partialUpdate","update","returnChanges","res","changes","new_val","delete","cursor","next","catch","field","getField"],"mappings":"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","file":"RethinkStore.js","sourcesContent":["import RethinkConnection from './RethinkConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport Query from './Query';\n// import RethinkCursor from './RethinkCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\nexport default class RethinkStore extends AbstractStore<RethinkConnection> {\n  tableName: string;\n  keyPath = 'id';\n\n  constructor(connection: RethinkConnection, tableName: string) {\n    super(connection);\n    this._tableName = tableName;\n    this.r = this.connection._connection;\n  }\n\n  table() {\n    return this.r.table(this._tableName);\n  }\n\n  createQuery(query) {\n    return new Query(this, query);\n  }\n\n  query() {\n    return this.table();\n  }\n\n  _query(criteria: ?Object, sort: ?Object) {\n    const query = this.table();\n\n    if (criteria) {\n      query.filter(criteria);\n    }\n\n    if (sort) {\n      Object.keys(sort).forEach(key => {\n        if (sort[key] === -1) {\n          query.orderBy(this.r.desc(key));\n        } else {\n          query.orderBy(key);\n        }\n      });\n    }\n\n    return query;\n  }\n\n  create(): Promise<void> {\n    return this.r.tableCreate(this._tableName).then(() => null);\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object.created) object.created = new Date();\n\n    return this.table()\n      .insert(object)\n      .then(({ inserted, generated_keys: generatedKeys }) => {\n        if (inserted !== 1) throw new Error('Could not insert');\n        if (object.id == null) {\n          // eslint-disable-next-line prefer-destructuring\n          object.id = generatedKeys[0];\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    return this.table()\n      .get(object.id)\n      .replace(object)\n      .then(() => object);\n  }\n\n  upsertOne(object: UpdateType): Promise<ResultType> {\n    if (!object.updated) object.updated = new Date();\n\n    return this.table()\n      .insert(object, { conflict: 'replace' })\n      .run()\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.replaceOne(object)));\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise<void> {\n    return this.table()\n      .get(key)\n      .update(partialUpdate)\n      .run();\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    return this.table()\n      .get(object.id)\n      .update(partialUpdate, { returnChanges: true })\n      .then(res => res.changes[0].new_val);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise<void> {\n    return this.table()\n      .filter(criteria)\n      .update(partialUpdate)\n      .run();\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.table()\n      .get(key)\n      .delete()\n      .run();\n  }\n\n  cursor(query, sort: ?Object) {\n    // : Promise<RethinkCursor<ModelType>> {\n    if (sort) throw new Error('sort is not supported');\n    throw new Error('Not Supported yet, please use query().run({ cursor: true })');\n  }\n\n  findAll(): Promise<void> {\n    throw new Error('Not supported, please use query().run()');\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.table()\n      .get(key)\n      .run();\n  }\n\n  findOne(query): Promise<?ResultType> {\n    return query.run({ cursor: true }).then(cursor => cursor.next().catch(err => null));\n  }\n\n  findValue(field: string, query): Promise<any> {\n    return query\n      .getField(field)\n      .run({ cursor: true })\n      .then(cursor => cursor.next().catch(err => null));\n  }\n}\n"]}