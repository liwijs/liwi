{"version":3,"sources":["../../src/rethinkdb/Query.js"],"names":["AbstractQuery","RethinkStore","Query","callback","queryCallback","store","query","r","run","then","_includeInitial","args","_feed","promise","changes","includeInitial","includeStates","includeTypes","includeOffsets","feed","length","_promise","each","stop","closeFeed","cancel","cb","errCb","close"],"mappings":";;;;;;;;AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,wDAA2B,SACzB,qBAAQ,YAAR,CADyB,EAEzB,mBAAM,YAAN,CAFyB,CAA3B;;IAKqBC,K;;;;;;;;;;;;;;gCAA4B,mB;;;;;;0BACzCC,Q,EAAmC;AAAA,0BAA3B,WAAG,YAAH,CAA2B;;AAAA,iCAAL,OAAK;;AAAA;;AACvC,aAAO,KAAKC,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuC,KAAKD,KAAL,CAAWE,CAAlD,EAAqDC,GAArD,GAA2DC,IAA3D,CAAgEN,QAAhE,CAAP;AAAA;AAAA;AACD;;;+BAEUA,Q,EAAoF;AAAA;;AAAA,UAAhEO,eAAgE,uEAA9C,KAA8C;;AAAA,UAAvCC,IAAuC;;AAAA,2BAA5E,YAA4E;;AAAA,sBAAnC,QAAQ,OAAR,CAAmC;;AAAA,kCAApB,mBAAoB;;AAAA;AAAA;;AAC7F,UAAIC,cAAJ;AACA,UAAIC,UACF,KAAKT,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuC,KAAKD,KAAL,CAAWE,CAAlD,EAAqDO,OAArD,CAA6D;AAC3DC,wBAAgBL,eAD2C;AAE3DM,uBAAe,IAF4C;AAG3DC,sBAAc,IAH6C;AAI3DC,wBAAgB;AAJ2C,OAA7D,EAMCT,IAND,CAMM,UAACU,IAAD,EAAU;AACd,YAAIR,KAAKS,MAAL,KAAgB,CAApB,EAAuB;AACrBR,kBAAQO,IAAR;AACA,iBAAO,OAAKE,QAAZ;AACD;;AAEDF,aAAKG,IAAL,CAAUnB,QAAV;AACA,eAAOgB,IAAP;AACD,OAdD,CADF;;AAiBA,UAAIR,KAAKS,MAAL,KAAgB,CAApB,EAAuB,KAAKC,QAAL,GAAgBR,OAAhB;;AAEvB,UAAMU,OAAO,SAAPA,IAAO,GAAM;AACjB,eAAKC,SAAL,CAAeZ,KAAf,EAAsBC,OAAtB;AACD,OAFD;;AAIA,iCAAO;AACLU,kBADK;AAELE,gBAAQF,IAFH;AAGLd,cAAM,cAACiB,EAAD,EAAKC,KAAL;AAAA,iBAAed,QAAQJ,IAAR,CAAaiB,EAAb,EAAiBC,KAAjB,CAAf;AAAA;AAHD,OAAP;AAKD;;;8BAESR,I,EAAMN,O,EAAS;AACvB,UAAIM,IAAJ,EAAU;AACRA,aAAKS,KAAL;AACD,OAFD,MAEO,IAAIf,OAAJ,EAAa;AAClBA,gBAAQJ,IAAR,CAAa;AAAA,iBAAQU,KAAKS,KAAL,EAAR;AAAA,SAAb;AACD;AACF;;;;EA3CgC5B,a;;SAAdE,K","file":"Query.js","sourcesContent":["import AbstractQuery from '../store/AbstractQuery';\nimport RethinkStore from './RethinkStore';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nexport default class Query extends AbstractQuery<RethinkStore> {\n  fetch(callback: ?Function): Promise<any> {\n    return this.queryCallback(this.store.query(), this.store.r).run().then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    let _feed;\n    let promise =\n      this.queryCallback(this.store.query(), this.store.r).changes({\n        includeInitial: _includeInitial,\n        includeStates: true,\n        includeTypes: true,\n        includeOffsets: true,\n      })\n      .then((feed) => {\n        if (args.length === 0) {\n          _feed = feed;\n          delete this._promise;\n        }\n\n        feed.each(callback);\n        return feed;\n      });\n\n    if (args.length === 0) this._promise = promise;\n\n    const stop = () => {\n      this.closeFeed(_feed, promise);\n    };\n\n    return {\n      stop,\n      cancel: stop,\n      then: (cb, errCb) => promise.then(cb, errCb),\n    };\n  }\n\n  closeFeed(feed, promise) {\n    if (feed) {\n      feed.close();\n    } else if (promise) {\n      promise.then(feed => feed.close());\n    }\n  }\n}\n"]}