{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["ObjectID","Collection","Db","MongoConnection","AbstractStore","MongoCursor","MongoStore","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","Promise","reject","err","resolve","object","_id","toString","created","Date","insertOne","result","ops","ok","n","replaceOne","updated","updateOne","$set","upsert","objects","all","map","partialUpdate","Object","keys","some","key","_partialUpdate","partialUpdateByKey","findByKey","criteria","updateMany","removeOne","sort","find","cursor","findOne","limit","next","connectionFailed"],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n  _collection: Collection|Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection()\n      .then((db: Db) => this._collection = db.collection(collectionName))\n      .catch(err => this._collection = Promise.reject(err));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object._id) {\n      object._id = (new ObjectID()).toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => (\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true })\n      ))\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate)\n      .then(res => this.findByKey(object._id));\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.collection\n      .then(collection => collection.removeOne({ _id: key }))\n      .then(() => null);\n  }\n\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}