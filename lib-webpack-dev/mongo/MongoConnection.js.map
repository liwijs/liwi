{"version":3,"sources":["../../src/mongo/MongoConnection.js"],"names":["Logger","MongoClient","AbstractConnection","logger","MongoConnection","config","Map","has","set","Error","connectionString","get","connect","info","connectPromise","then","connection","on","warn","connectionFailed","getConnection","Promise","reject","resolve","_connection","err","_connecting","catch","console","error","message","process","nextTick","exit","close"],"mappings":"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","file":"MongoConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi.mongo.MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection: Db|null;\n  _connecting: Promise|null;\n  connectionFailed: boolean;\n\n  constructor(config: Map) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}`\n       + `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then((connection) => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection);\n        });\n        connection.on('error', (err) => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = null;\n        this.getConnection = () => Promise.resolve(this._connection);\n        return connection;\n      })\n      .catch((err) => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n          // throw err;\n        process.nextTick(() => {\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.close().then(() => {\n        this._connection = null;\n      });\n    } else if (this._connecting) {\n      return this._connecting.then(() => this.close());\n    }\n  }\n}\n"]}