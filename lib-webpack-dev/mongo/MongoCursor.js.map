{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,MAAP,MAAmB,oBAAnB;AACA,OAAO,UAAP,MAAuB,cAAvB;AACA,OAAO,cAAP,MAA2B,yBAA3B;;IAEqB,W;;;AACjB,yBAAY,KAAZ,EAA8B,MAA9B,EAA6C;AAAA;;AAAA,cAAjC,KAAiC,YAA3B,UAA2B;AAAA,6HAAjC,KAAiC;AAAA;;AAAA,cAAf,MAAe,YAAR,MAAQ;AAAA,0HAAf,MAAe;AAAA;;AAAA,mGACnC,KADmC;;AAEzC,cAAK,OAAL,GAAe,MAAf;AAFyC;AAG5C;;;;gCAEO,K,EAAmB;AAAA,yBAAnB,KAAmB;AAAA,6HAAnB,KAAmB;AAAA;;AACvB,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACH;;;+BAEmB;AAAA;;AAAA;AAAA,sCAAb,OAAa;AAAA;AAAA;;AAAA;AAAA;;AAAA,yBACT,KAAK,OAAL,CAAa,IAAb,GACF,IADE,CAEC,iBAAS;AACL,uBAAK,OAAL,GAAe,KAAf;AACA,uBAAK,GAAL,GAAW,SAAS,MAAM,GAA1B;AACA,uBAAO,OAAK,GAAZ;AACH,aANF,CADS;AASnB;;;8BAEK,Q,EAAyB;AAAA;AAAA,sCAAR,OAAQ;AAAA;AAAA;;AAAA;AAAA;;AAAA,yBAAzB,QAAyB;AAAA,gIAAzB,QAAyB;AAAA;;AAC3B,iBAAK,OAAL,CAAa,KAAb,CAAmB,QAAnB;AAD2B,yBAEpB,QAAQ,OAAR,CAAgB,IAAhB,CAFoB;AAG9B;;;gCAEiC;AAAA,gBAA5B,UAA4B,yDAAP,KAAO;;AAAA,yBAA5B,UAA4B;AAAA,gIAA5B,UAA4B;AAAA;;AAC9B,mBAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,UAAnB,CAAP;AACH;;;iCAEQ;AACL,mBAAO,QAAQ,OAAR,CAAgB,KAAK,OAArB,CAAP;AACH;;;gCAEO;AACJ,gBAAI,KAAK,OAAT,EAAkB;AACd,qBAAK,OAAL,CAAa,KAAb;AACA,qBAAK,OAAL,GAAe,KAAK,MAAL,GAAc,KAAK,OAAL,GAAe,SAA5C;AACH;;AAED,mBAAO,QAAQ,OAAR,EAAP;AACH;;;kCAEwB;AAAA;AAAA,sCAAf,OAAe;AAAA;AAAA;;AAAA;AAAA;;AAAA,yBACd,KAAK,OAAL,CAAa,OAAb,EADc;AAExB;;;;EA7CoC,c;;eAApB,W","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n    constructor(store:MongoStore, cursor:Cursor) {\n        super(store);\n        this._cursor = cursor;\n    }\n\n    advance(count:number):void {\n        this._cursor.skip(count);\n    }\n\n    next():Promise<any> {\n        return this._cursor.next()\n            .then(\n                value => {\n                    this._result = value;\n                    this.key = value && value._id;\n                    return this.key;\n                }\n            );\n    }\n\n    limit(newLimit:number):Promise {\n        this._cursor.limit(newLimit);\n        return Promise.resolve(this);\n    }\n\n    count(applyLimit:boolean = false) {\n        return this._cursor.count(applyLimit);\n    }\n\n    result() {\n        return Promise.resolve(this._result);\n    }\n\n    close() {\n        if (this._cursor) {\n            this._cursor.close();\n            this._cursor = this._store = this._result = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    toArray():Promise<Array> {\n        return this._cursor.toArray();\n    }\n}\n"]}