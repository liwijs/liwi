{"version":3,"sources":["../../src/rethinkdb/RethinkStore.js"],"names":["RethinkConnection","AbstractStore","Query","RethinkStore","connection","tableName","keyPath","_tableName","r","_connection","table","query","criteria","sort","filter","Object","keys","forEach","key","orderBy","desc","tableCreate","object","created","Date","insert","then","inserted","generatedKeys","generated_keys","Error","id","replaceOne","updated","get","replace","conflict","run","objects","Promise","all","map","partialUpdate","update","returnChanges","res","changes","new_val","delete","_query","cursor","next","catch"],"mappings":"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","file":"RethinkStore.js","sourcesContent":["import RethinkConnection from './RethinkConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport Query from './Query';\n// import RethinkCursor from './RethinkCursor';\n\nexport default class RethinkStore<ModelType> extends AbstractStore<RethinkConnection> {\n  tableName: string;\n  keyPath = 'id';\n\n  constructor(connection: RethinkConnection, tableName: string) {\n    super(connection);\n    this._tableName = tableName;\n    this.r = this.connection._connection;\n  }\n\n  table() {\n    return this.r.table(this._tableName);\n  }\n\n  createQuery(query) {\n    return new Query(this, query);\n  }\n\n  query() {\n    return this.table();\n  }\n\n  _query(criteria: ?Object, sort: ?Object) {\n    const query = this.table();\n\n    if (criteria) {\n      query.filter(criteria);\n    }\n\n    if (sort) {\n      Object.keys(sort).forEach((key) => {\n        if (sort[key] === -1) {\n          query.orderBy(this.r.desc(key));\n        } else {\n          query.orderBy(key);\n        }\n      });\n    }\n\n    return query;\n  }\n\n  create(): Promise {\n    return this.r.tableCreate(this._tableName);\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.table().insert(object)\n      .then(({ inserted, generated_keys: generatedKeys }) => {\n        if (inserted !== 1) throw new Error('Could not insert');\n        object.id = generatedKeys[0];\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.table().get(object.id).replace(object)\n      .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.table().insert(object, { conflict: 'replace' }).run()\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.replaceOne(object)));\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.table().get(key).update(partialUpdate).run();\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.table().get(object.id).update(partialUpdate, { returnChanges: true })\n      .then(res => res.changes.new_val);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.table().filter(criteria).update(partialUpdate).run();\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.table().get(key).delete().run();\n  }\n\n  cursor(criteria: ?Object, sort: ?Object) { // : Promise<RethinkCursor<ModelType>> {\n    throw new Error('Not Supported yet, please use query().run({ cursor: true })');\n  }\n\n  findAll(criteria: ?Object, sort: ?Object): Promise {\n    const query = this._query(criteria, sort);\n    return query.run();\n  }\n\n  findByKey(key: any) {\n    return this.table().get(key).run();\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    const query = this._query(criteria, sort);\n    return query.run({ cursor: true }).then(cursor => cursor.next().catch(err => null));\n  }\n}\n"]}