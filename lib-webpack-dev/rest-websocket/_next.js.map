{"version":3,"sources":["../../src/rest-websocket/_next.js"],"names":[],"mappings":"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","file":"_next.js","sourcesContent":["import Logger from 'nightingale-logger';\n\nconst MAX_OPENED_CURSORS = 5;\nconst logger = new Logger('liwi.rest-websocket');\n\nexport default function init(io, restService) {\n  io.on('connection', socket => {\n    let openCursors = new Map();\n    let timeouts = new Map();\n    let activeListeners = new Map();\n\n    const closeCursor = (id) => {\n      clearTimeout(timeouts[id]);\n      timeouts.delete(id);\n      openCursors[id].close();\n      openCursors.delete(id);\n    };\n\n    socket.on('disconnect', () => {\n      openCursors.forEach(cursor => cursor.close());\n      timeouts.forEach(timeout => clearTimeout(timeout));\n      activeListeners.forEach(listener => listener.close());\n\n      openCursors = timeouts = activeListeners = null;\n    });\n\n    let nextIdCursor = 1;\n\n    socket.on('rest', (\n      { type, restName }: { type: string, restName: string },\n      args: Array,\n      callback: Function,\n    ) => {\n      logger.info('rest', { type, restName, args });\n      switch (type) {\n        case 'createCursor': {\n          if (openCursors.size > MAX_OPENED_CURSORS) return callback('too many cursors');\n\n          const id = nextIdCursor++;\n          const [options] = args;\n          const cursor = restService.createCursor(restName, options);\n          if (!cursor) return callback('failed to create cursor');\n\n          timeouts.set(id, setTimeout(() => {\n            logger.warn('socket closed by timeout', { id, restName });\n            closeCursor(id);\n          }));\n\n          return callback(null, id);\n        }\n\n        case 'cursor toArray': {\n          const [options] = args;\n          return restService.createCursor(restName, options)\n                        .then(cursor => cursor.toArray())\n                        .then(results => callback(null, results))\n                        .catch(err => callback(err.message));\n        }\n\n        case 'cursor': {\n          const [{ type: typeCursorAction, id: idCursor }, cursorArgs] = args;\n\n          const cursor = openCursors.get(idCursor);\n          if (!cursor) return callback(`failed to find cursor \"${idCursor}\"`);\n          switch (typeCursorAction) {\n            case 'close':\n              closeCursor(idCursor);\n              return callback();\n\n            case 'advance':\n            case 'next':\n            case 'count':\n              return cursor[type](...cursorArgs)\n                                .then(result => callback(null, result))\n                                .catch(err => callback(err.message || err));\n                            /* cursor.next().then((key) => {\n                                if (!key) return callback(null);\n                                return cursor.result();\n                            }).then(result => {\n                                    response(null, restService.transform(data));\n                                });\n                            }, () => {\n                                response(null);\n                            }); */\n\n            default:\n              callback(`Unknown command: \"${type}\"`);\n          }\n\n          break;\n        }\n\n        case 'insertOne':\n        case 'updateOne':\n        case 'updateSeveral':\n        case 'partialUpdateByKey':\n        case 'partialUpdateOne':\n        case 'partialUpdateMany':\n        case 'deleteByKey':\n        case 'deleteOne':\n        case 'findOne':\n          return restService[type](restName, ...args)\n                        .then(result => callback(null, result))\n                        .catch(err => callback(err.message || err));\n\n        default:\n          callback(`Unknown command: \"${type}\"`);\n      }\n    });\n  });\n}\n"]}