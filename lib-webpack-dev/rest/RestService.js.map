{"version":3,"sources":["../../src/rest/RestService.js"],"names":["RestCursor","RestService","restResources","Map","key","restResource","set","get","Error","restName","connectedUser","criteria","sort","limit","store","cursor"],"mappings":";;;;;;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;;IAEqBC,W;AACnB,uBAAYC,aAAZ,EAAgC;AAAA,YAApBA,aAAoB,EAALC,GAAK;;AAAA;;AAC9B,SAAKD,aAAL,GAAqBA,aAArB;AACD;;;;oCAEeE,G,EAAaC,Y,EAAc;AAAA,cAA3BD,GAA2B;;AACzC,WAAKF,aAAL,CAAmBI,GAAnB,CAAuBF,GAAvB,EAA4BC,YAA5B;AACD;;;wBAEGD,G,EAAa;AAAA,cAAbA,GAAa;;AACf,UAAMC,eAAe,KAAKH,aAAL,CAAmBK,GAAnB,CAAuBH,GAAvB,CAArB;AACA,UAAI,CAACC,YAAL,EAAmB,MAAM,IAAIG,KAAJ,8BAAqCJ,GAArC,OAAN;AACnB,aAAOC,YAAP;AACD;;;;4EAGKI,Q,EACAC,a;YACEC,Q,SAAAA,Q;YAAUC,I,SAAAA,I;YAAMC,K,SAAAA,K;;;;;;wBAFlBJ,Q;;wBACAC,a;;;AACEC,0B,EAAAA,Q;AAAUC,sB,EAAAA,I;AAAMC,uB,EAAAA;;AAAWF,0B;AAAmBC,sB;AAAeC,uB;;;AAE7DR,4B,GAAe,KAAKE,GAAL,CAASE,QAAT,C;;AACrBE,2BAAWN,aAAaM,QAAb,CAAsBD,aAAtB,EAAqCC,YAAY,EAAjD,CAAX;AACAC,uBAAOP,aAAaO,IAAb,CAAkBF,aAAlB,EAAiCE,IAAjC,CAAP;;uBACqBP,aAAaS,KAAb,CAAmBC,MAAnB,CAA0BJ,QAA1B,EAAoCC,IAApC,C;;;AAAfG,sB;;AACNF,wBAAQR,aAAaQ,KAAb,CAAmBA,KAAnB,CAAR;AACA,oBAAIA,KAAJ,EAAWE,OAAOF,KAAP,CAAaH,aAAb,EAA4BG,KAA5B;iDACJ,IAAIb,UAAJ,CAAeK,YAAf,EAA6BK,aAA7B,EAA4CK,MAA5C,C;;;;;;;;;;;;;;;;;;;;;eA1BUd,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n        restName: string,\n        connectedUser: ?Object,\n        { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n    ): Promise {\n    const restResource = this.get(restName);\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}