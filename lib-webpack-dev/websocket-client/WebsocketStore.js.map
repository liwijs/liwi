{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":[],"mappings":"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","file":"WebsocketStore.js","sourcesContent":["import AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\n\ntype WebsocketConnection = {\n    emit: Function,\n    isConnected: Function,\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n  keyPath = '_id';\n\n  constructor(websocket: WebsocketConnection, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  emit(type, ...args) {\n    if (!this.connection.isConnected()) {\n      throw new Error('Websocket is not connected');\n    }\n    return this.connection.emit('rest', { type, restName: this.restName }, args);\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}