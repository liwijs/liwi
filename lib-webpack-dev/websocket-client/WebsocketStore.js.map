{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":["Logger","AbstractStore","WebsocketCursor","encode","decode","Query","logger","WebsocketConnection","emit","isConnected","WebsocketStore","websocket","restName","keyPath","Error","key","debug","type","args","connection","isDisconnected","buffer","map","arg","undefined","toString","then","result","on","off","object","objects","partialUpdate","criteria","sort","Promise","resolve","findOne","id"],"mappings":"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","file":"WebsocketStore.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\nimport { encode, decode } from '../msgpack';\nimport Query from './Query';\n\nconst logger = new Logger('liwi:websocket-client');\n\ntype WebsocketConnection = {\n    emit: Function,\n    isConnected: Function,\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n  keyPath = 'id';\n\n  constructor(websocket: WebsocketConnection, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    logger.debug('createQuery', { key });\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    logger.debug('emit', { type, args });\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection.emit('rest', {\n      type,\n      restName: this.restName,\n      buffer: args && encode(args.map(arg => (arg === undefined ? null : arg))).toString(),\n    }).then(result => result && decode(result));\n  }\n\n  emitSubscribe(type, ...args) {\n    const emit = () => this.emit(type, ...args);\n    return emit().then(result => {\n      this.connection.on('reconnect', emit);\n      return () => this.connection.off('reconnect', emit);\n    });\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}