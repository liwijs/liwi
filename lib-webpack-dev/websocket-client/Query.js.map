{"version":3,"sources":["../../src/websocket-client/Query.js"],"names":["Logger","AbstractQuery","WebsocketStore","decode","SubscribeReturnType","cancel","stop","logger","Query","store","key","callback","emit","then","_includeInitial","args","eventName","restName","listener","err","result","decodedResult","debug","connection","on","_stopEmitSubscribe","promise","emitSubscribe","stopEmitSubscribe","info","catch","off","Promise","resolve","cb"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,kBAAvB;;IAEKC,mB;AACHC,Q;AACAC,M;;;AAGF,IAAMC,SAAS,IAAIP,MAAJ,CAAW,6BAAX,CAAf;;IAEqBQ,K;;;AACnB,iBAAYC,KAAZ,EAAmCC,GAAnC,EAAgD;AAAA,YAApCD,KAAoC,EAA7BP,cAA6B;;AAAA,YAAbQ,GAAa;;AAAA;;AAAA,8GACxCD,KADwC;;AAE9C,UAAKC,GAAL,GAAWA,GAAX;AAF8C;AAG/C;;;;0BAEKC,Q,EAA8B;AAAA,cAA9BA,QAA8B;;AAAA;AAClC,eAAO,KAAKF,KAAL,CAAWG,IAAX,CAAgB,OAAhB,EAAyB,KAAKF,GAA9B,EAAmCG,IAAnC,CAAwCF,QAAxC,CAAP;AADkC;AAEnC;;;+BAEUA,Q,EAAoF;AAAA,UAAhEG,eAAgE,uEAA9C,KAA8C;;AAAA,UAAvCC,IAAuC;;AAAA,cAApFJ,QAAoF;;AAAA,cAAvCI,IAAuC;;AAAA;AAAA;;AAC7F,YAAMC,2BAAyB,KAAKP,KAAL,CAAWQ,QAApC,SAAgD,KAAKP,GAA3D;AACA,YAAMQ,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,MAAN,EAAiB;AAChC,cAAMC,gBAAgBD,UAAUjB,OAAOiB,MAAP,CAAhC;AACiBb,iBAAOe,KAAP,CAAaN,SAAb,EAAwB,EAAEI,cAAF,EAAUC,4BAAV,EAAxB;AACjBV,mBAASQ,GAAT,EAAcE,aAAd;AACD,SAJD;AAKA,aAAKZ,KAAL,CAAWc,UAAX,CAAsBC,EAAtB,CAAyBR,SAAzB,EAAoCE,QAApC;;AAEA,YAAIO,2BAAJ;AACA,YAAIC,UAAU,KAAKjB,KAAL,CAAWkB,aAAX,CACZb,kBAAkB,mBAAlB,GAAwC,WAD5B,EAEZ,KAAKJ,GAFO,EAGZM,SAHY,EAIZD,IAJY,EAKZF,IALY,CAKP,6BAAqB;AAC1BY,+BAAqBG,iBAArB;AACArB,iBAAOsB,IAAP,CAAY,YAAZ;AACD,SARa,EAQXC,KARW,CAQL,eAAO;AACd,iBAAKrB,KAAL,CAAWc,UAAX,CAAsBQ,GAAtB,CAA0Bf,SAA1B,EAAqCE,QAArC;AACA,gBAAMC,GAAN;AACD,SAXa,CAAd;;AAaA,YAAMb,OAAO,SAAPA,IAAO,GAAM;AACjB,cAAI,CAACoB,OAAL,EAAc;AACdD;AACAC,kBAAQb,IAAR,CAAa,YAAM;AACjBa,sBAAU,IAAV;AACA,mBAAKjB,KAAL,CAAWc,UAAX,CAAsBQ,GAAtB,CAA0Bf,SAA1B,EAAqCE,QAArC;AACD,WAHD;AAID,SAPD;;AASA,eAAO;AACLb,kBAAQC,IADH;AAELA,oBAFK;AAGLO,gBAAM;AAAA,mBAAMmB,QAAQC,OAAR,CAAgBP,OAAhB,EAAyBb,IAAzB,CAA8BqB,EAA9B,CAAN;AAAA;AAHD,SAAP;AAhC6F,gCAApB9B,mBAAoB;AAqC9F;;;;EA/CgCH,a;;eAAdO,K","file":"Query.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport AbstractQuery from '../store/AbstractQuery';\nimport WebsocketStore from './WebsocketStore';\nimport { decode } from '../extended-json';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nconst logger = new Logger('liwi:websocket-client:query');\n\nexport default class Query extends AbstractQuery<WebsocketStore> {\n  constructor(store: WebsocketStore, key: string) {\n    super(store);\n    this.key = key;\n  }\n\n  fetch(callback: ?Function): Promise {\n    return this.store.emit('fetch', this.key).then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    const eventName = `subscribe:${this.store.restName}.${this.key}`;\n    const listener = (err, result) => {\n      const decodedResult = result && decode(result);\n      if (!PRODUCTION) logger.debug(eventName, { result, decodedResult });\n      callback(err, decodedResult);\n    };\n    this.store.connection.on(eventName, listener);\n\n    let _stopEmitSubscribe;\n    let promise = this.store.emitSubscribe(\n      _includeInitial ? 'fetchAndSubscribe' : 'subscribe',\n      this.key,\n      eventName,\n      args,\n    ).then(stopEmitSubscribe => {\n      _stopEmitSubscribe = stopEmitSubscribe;\n      logger.info('subscribed');\n    }).catch(err => {\n      this.store.connection.off(eventName, listener);\n      throw err;\n    });\n\n    const stop = () => {\n      if (!promise) return;\n      _stopEmitSubscribe();\n      promise.then(() => {\n        promise = null;\n        this.store.connection.off(eventName, listener);\n      });\n    };\n\n    return {\n      cancel: stop,\n      stop,\n      then: cb => Promise.resolve(promise).then(cb),\n    };\n  }\n}\n"]}