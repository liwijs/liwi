{"version":3,"sources":["../../../src/mongo/MongoConnection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGqB,e;;;;;;;;;;AAIjB,6BAAY,MAAZ,EAAyB;AAAA;;AAAA;;AAGrB,YAAI,CAAC,OAAO,GAAP,CAAW,MAAX,CAAL,EAAyB;AACrB,mBAAO,GAAP,CAAW,MAAX,EAAmB,WAAnB;AACH;AACD,YAAI,CAAC,OAAO,GAAP,CAAW,MAAX,CAAL,EAAyB;AACrB,mBAAO,GAAP,CAAW,MAAX,EAAmB,OAAnB;AACH;AACD,YAAI,CAAC,OAAO,GAAP,CAAW,UAAX,CAAL,EAA6B;AACzB,kBAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAED,YAAM,mBAAmB,gBAAa,OAAO,GAAP,CAAW,MAAX,IAAwB,OAAO,GAAP,CAAW,MAAX,CAAxB,SAA8C,OAAO,GAAP,CAAW,UAAX,CAA9C,SAA0E,EAAvF,KACG,OAAO,GAAP,CAAW,MAAX,CADH,SACyB,OAAO,GAAP,CAAW,MAAX,CADzB,SAC+C,OAAO,GAAP,CAAW,UAAX,CAD/C,CAAzB;;AAIA,YAAM,iBAAiB,qBAAY,OAAZ,CAAoB,gBAApB,EAClB,IADkB,CACb,sBAAc;AAChB,kBAAK,WAAL,GAAmB,UAAnB;AACA,kBAAK,WAAL,GAAmB,IAAnB;AACA,kBAAK,aAAL,GAAqB,YAAM;AACvB,uBAAO,QAAQ,OAAR,CAAgB,MAAK,WAArB,CAAP;AACH,aAFD;AAGA,mBAAO,UAAP;AACH,SARkB,EASlB,KATkB,CASZ,eAAO;AACV,kBAAK,aAAL,GAAqB;AAAA,uBAAM,QAAQ,MAAR,CAAe,GAAf,CAAN;AAAA,aAArB;AACA,kBAAM,GAAN;AACH,SAZkB,CAAvB;;AAcA,cAAK,aAAL,GAAqB;AAAA,mBAAM,QAAQ,OAAR,CAAgB,cAAhB,CAAN;AAAA,SAArB;AACA,cAAK,WAAL,GAAmB,MAAK,aAAL,EAAnB;AAhCqB;AAiCxB;;;;;;0CAE4B;AACzB,kBAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACH;;;;;kCAEO;AAAA;;AACJ,gBAAI,KAAK,WAAT,EAAsB;AAClB,uBAAO,KAAK,WAAL,CAAiB,KAAjB,EAAP;AACH,aAFD,MAEO,IAAI,KAAK,WAAT,EAAsB;AACzB,uBAAO,KAAK,WAAL,CAAiB,IAAjB,CAAsB;AAAA,2BAAM,OAAK,KAAL,EAAN;AAAA,iBAAtB,CAAP;AACH;AACJ;;;;;;kBAjDgB,e","file":"MongoConnection.js","sourcesContent":["import AbstractConnection from '../store/AbstractConnection';\nimport { MongoClient } from 'mongodb';\nimport type Db from 'mongodb/lib/db';\n\nexport default class MongoConnection extends AbstractConnection {\n    _connection: Db|null;\n    _connecting: Promise|null;\n\n    constructor(config: Map) {\n        super();\n\n        if (!config.has('host')) {\n            config.set('host', 'localhost');\n        }\n        if (!config.has('port')) {\n            config.set('port', '27017');\n        }\n        if (!config.has('database')) {\n            throw new Error('Missing config database');\n        }\n\n        const connectionString = `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}`\n                               + `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n\n        const connectPromise = MongoClient.connect(connectionString)\n            .then(connection => {\n                this._connection = connection;\n                this._connecting = null;\n                this.getConnection = () => {\n                    return Promise.resolve(this._connection);\n                };\n                return connection;\n            })\n            .catch(err => {\n                this.getConnection = () => Promise.reject(err);\n                throw err;\n            });\n\n        this.getConnection = () => Promise.resolve(connectPromise);\n        this._connecting = this.getConnection();\n    }\n\n    getConnection(): Promise<Db> {\n        throw new Error('call connect()');\n    }\n\n    close() {\n        if (this._connection) {\n            return this._connection.close();\n        } else if (this._connecting) {\n            return this._connecting.then(() => this.close());\n        }\n    }\n}\n"]}