{"version":3,"sources":["../../../src/mongo/MongoCursor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqB,W;;;;;;;;;;;;AACjB,yBAAY,KAAZ,EAA8B,MAA9B,EAA6C,QAA7C,EAA8D;AAAA;;AAAA,mGACpD,KADoD;;AAE1D,cAAK,OAAL,GAAe,MAAf;AACA,cAAK,SAAL,GAAiB,QAAjB;AAH0D;AAI7D;;;;;;;kCAEO,K,EAAmB;AACvB,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACH;;;;;iCAEmB;AAAA;;AAChB,mBAAO,KAAK,OAAL,CAAa,IAAb,GACF,IADE,CAEC,iBAAS;AACL,uBAAK,OAAL,GAAe,KAAf;AACA,uBAAK,GAAL,GAAW,SAAS,MAAM,GAA1B;AACA,uBAAO,OAAK,GAAZ;AACH,aANF,CAAP;AAQH;;;;;;gCAEK,Q,EAAyB;AAC3B,iBAAK,OAAL,CAAa,KAAb,CAAmB,QAAnB;AACA,mBAAO,QAAQ,OAAR,EAAP;AACH;;;;;;kCAEiC;AAAA,gBAA5B,UAA4B,yDAAP,KAAO;;AAC9B,mBAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,UAAnB,CAAP;AACH;;;;;mCAEQ;AACL,mBAAO,QAAQ,OAAR,CAAgB,KAAK,OAArB,CAAP;AACH;;;;;kCAEO;AACJ,gBAAI,KAAK,OAAT,EAAkB;AACd,qBAAK,OAAL,CAAa,KAAb;AACA,qBAAK,OAAL,GAAe,KAAK,MAAL,GAAc,KAAK,OAAL,GAAe,SAA5C;AACH;;AAED,mBAAO,QAAQ,OAAR,EAAP;AACH;;;;;oCAEwB;AACrB,mBAAO,KAAK,OAAL,CAAa,OAAb,EAAP;AACH;;;;;;kBA9CgB,W","file":"MongoCursor.js","sourcesContent":["import type MongoStore from './MongoStore';\nimport type Cursor from 'mongodb/lib/cursor';\nimport AbstractCursor from '../store/AbstractCursor';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n    constructor(store:MongoStore, cursor:Cursor, criteria:Object) {\n        super(store);\n        this._cursor = cursor;\n        this._criteria = criteria;\n    }\n\n    advance(count:number):void {\n        this._cursor.skip(count);\n    }\n\n    next():Promise<any> {\n        return this._cursor.next()\n            .then(\n                value => {\n                    this._result = value;\n                    this.key = value && value._id;\n                    return this.key;\n                }\n            );\n    }\n\n    limit(newLimit:number):Promise {\n        this._cursor.limit(newLimit);\n        return Promise.resolve();\n    }\n\n    count(applyLimit:boolean = false) {\n        return this._cursor.count(applyLimit);\n    }\n\n    result() {\n        return Promise.resolve(this._result);\n    }\n\n    close() {\n        if (this._cursor) {\n            this._cursor.close();\n            this._cursor = this._store = this._result = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    toArray():Promise<Array> {\n        return this._cursor.toArray();\n    }\n}\n"]}