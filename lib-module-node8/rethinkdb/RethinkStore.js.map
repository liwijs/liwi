{"version":3,"sources":["../../src/rethinkdb/RethinkStore.js"],"names":["AbstractStore","Query","RethinkStore","constructor","connection","tableName","keyPath","_tableName","r","_connection","table","createQuery","query","_query","criteria","sort","filter","Object","keys","forEach","key","orderBy","desc","create","tableCreate","then","insertOne","object","created","Date","insert","inserted","generated_keys","generatedKeys","Error","id","updateOne","replaceOne","updated","get","replace","upsertOne","conflict","run","replaceSeveral","objects","Promise","all","map","partialUpdateByKey","partialUpdate","update","partialUpdateOne","returnChanges","res","changes","new_val","partialUpdateMany","deleteByKey","delete","cursor","findAll","findByKey","findOne","next","catch","findValue","field","getField"],"mappings":"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","file":"RethinkStore.js","sourcesContent":["import RethinkConnection from './RethinkConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport Query from './Query';\n// import RethinkCursor from './RethinkCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\nexport default class RethinkStore extends AbstractStore<RethinkConnection> {\n  tableName: string;\n  keyPath = 'id';\n\n  constructor(connection: RethinkConnection, tableName: string) {\n    super(connection);\n    this._tableName = tableName;\n    this.r = this.connection._connection;\n  }\n\n  table() {\n    return this.r.table(this._tableName);\n  }\n\n  createQuery(query) {\n    return new Query(this, query);\n  }\n\n  query() {\n    return this.table();\n  }\n\n  _query(criteria: ?Object, sort: ?Object) {\n    const query = this.table();\n\n    if (criteria) {\n      query.filter(criteria);\n    }\n\n    if (sort) {\n      Object.keys(sort).forEach(key => {\n        if (sort[key] === -1) {\n          query.orderBy(this.r.desc(key));\n        } else {\n          query.orderBy(key);\n        }\n      });\n    }\n\n    return query;\n  }\n\n  create(): Promise<void> {\n    return this.r.tableCreate(this._tableName).then(() => null);\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object.created) object.created = new Date();\n\n    return this.table()\n      .insert(object)\n      .then(({ inserted, generated_keys: generatedKeys }) => {\n        if (inserted !== 1) throw new Error('Could not insert');\n        if (object.id == null) {\n          // eslint-disable-next-line prefer-destructuring\n          object.id = generatedKeys[0];\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.created) object.created = new Date();\n    if (!object.updated) object.updated = new Date();\n\n    return this.table()\n      .get(object.id)\n      .replace(object)\n      .then(() => object);\n  }\n\n  upsertOne(object: UpdateType): Promise<ResultType> {\n    if (!object.updated) object.updated = new Date();\n\n    return this.table()\n      .insert(object, { conflict: 'replace' })\n      .run()\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.replaceOne(object)));\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise<void> {\n    return this.table()\n      .get(key)\n      .update(partialUpdate)\n      .run();\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    return this.table()\n      .get(object.id)\n      .update(partialUpdate, { returnChanges: true })\n      .then(res => res.changes[0].new_val);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise<void> {\n    return this.table()\n      .filter(criteria)\n      .update(partialUpdate)\n      .run();\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.table()\n      .get(key)\n      .delete()\n      .run();\n  }\n\n  cursor(query, sort: ?Object) {\n    // : Promise<RethinkCursor<ModelType>> {\n    if (sort) throw new Error('sort is not supported');\n    throw new Error('Not Supported yet, please use query().run({ cursor: true })');\n  }\n\n  findAll(): Promise<void> {\n    throw new Error('Not supported, please use query().run()');\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.table()\n      .get(key)\n      .run();\n  }\n\n  findOne(query): Promise<?ResultType> {\n    return query.run({ cursor: true }).then(cursor => cursor.next().catch(err => null));\n  }\n\n  findValue(field: string, query): Promise<any> {\n    return query\n      .getField(field)\n      .run({ cursor: true })\n      .then(cursor => cursor.next().catch(err => null));\n  }\n}\n"]}