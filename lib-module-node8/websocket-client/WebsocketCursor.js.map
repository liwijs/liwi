{"version":3,"sources":["../../src/websocket-client/WebsocketCursor.js"],"names":["AbstractCursor","WebsocketCursor","constructor","store","options","_options","limit","newLimit","_idCursor","Error","Promise","resolve","_create","connection","emit","then","idCursor","type","args","id","advance","count","next","result","_result","key","_store","keyPath","applyLimit","close","closedPromise","toArray"],"mappings":";AACA,OAAOA,cAAP,MAA2B,yBAA3B;IAGqBC,e,GAAN,cAA8BD,cAA9B,CAA6D;;AAK1EE,cAAYC,KAAZ,EAAmCC,OAAnC,EAA4C;AAC1C,UAAMD,KAAN,CAD0C,EAE1C,KAAKE,QAAL,GAAgBD,OAF0B;AAG3C;;AAED;;AAEAE,QAAMC,QAAN,EAAuC;AACrC,QAAI,KAAKC,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;;AAEpB,WADA,KAAKJ,QAAL,CAAcC,KAAd,GAAsBC,QACtB,EAAOG,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED;;AAEAC,YAAU;AACR,QAAI,KAAKJ,SAAT,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACpB,WAAO,KAAKN,KAAL,CAAWU,UAAX,CAAsBC,IAAtB,CAA2B,cAA3B,EAA2C,KAAKT,QAAhD,EAA0DU,IAA1D,CAA+DC,YAAY;AAC3EA,cAD2E,KAEhF,KAAKR,SAAL,GAAiBQ,QAF+D;AAGjF,KAHM,CAAP;AAID;;AAEDF,OAAKG,IAAL,EAAW,GAAGC,IAAd,EAAkC;AAAA,WAC3B,KAAKV,SADsB,GAKzB,KAAKL,KAAL,CAAWW,IAAX,CAAgB,QAAhB,EAA0B,EAAEG,IAAF,EAAQE,IAAI,KAAKX,SAAjB,EAA1B,EAAwDU,IAAxD,CALyB,GAEvB,KAAKN,OAAL,GAAeG,IAAf,CAAoB,MAAM,KAAKD,IAAL,CAAUG,IAAV,EAAgB,GAAGC,IAAnB,CAA1B,CAFuB;AAMjC;;AAEDE,UAAQC,KAAR,EAAuB;AAErB,WADA,KAAKP,IAAL,CAAU,SAAV,EAAqBO,KAArB,CACA,EAAO,IAAP;AACD;;AAEDC,SAAsB;AACpB,WAAO,KAAKR,IAAL,CAAU,MAAV,EAAkBC,IAAlB,CAAuBQ,WAC5B,KAAKC,OAAL,GAAeD,MADa,EAE5B,KAAKE,GAAL,GAAWF,UAAUA,OAAO,KAAKG,MAAL,CAAYC,OAAnB,CAFO,EAGrB,KAAKF,GAHgB,CAAvB,CAAP;AAKD;;AAEDF,WAA+B;AAC7B,WAAOb,QAAQC,OAAR,CAAgB,KAAKa,OAArB,CAAP;AACD;;AAEDH,QAAMO,aAAsB,KAA5B,EAAmC;AACjC,WAAO,KAAKd,IAAL,CAAU,OAAV,EAAmBc,UAAnB,CAAP;AACD;;AAEDC,UAAuB;AACrB,QAAI,CAAC,KAAKH,MAAV,EAAkB,OAAOhB,QAAQC,OAAR,EAAP;;AAElB,UAAMmB,gBAAgB,KAAKtB,SAAL,GAAiB,KAAKM,IAAL,CAAU,OAAV,CAAjB,GAAsCJ,QAAQC,OAAR,EAA5D;;AAKA,WAJA,KAAKH,SAAL,GAAiB,IAIjB,EAHA,KAAKH,QAAL,GAAgB,IAGhB,EAFA,KAAKqB,MAAL,SAEA,EADA,KAAKF,OAAL,SACA,EAAOM,aAAP;AACD;;AAEDC,YAA6C;AAC3C,WAAO,KAAK5B,KAAL,CAAWW,IAAX,CAAgB,gBAAhB,EAAkC,KAAKT,QAAvC,EAAiDU,IAAjD,CAAsDQ,WAC3D,KAAKM,KAAL,EAD2D,EAEpDN,MAFoD,CAAtD,CAAP;AAID;AAzEyE,C;SAAvDtB,e","file":"WebsocketCursor.js","sourcesContent":["import WebsocketStore from './WebsocketStore';\nimport AbstractCursor from '../store/AbstractCursor';\nimport type { ResultType } from '../types';\n\nexport default class WebsocketCursor extends AbstractCursor<WebsocketStore> {\n  _idCursor: ?number;\n  _options: ?Object;\n  _result: ?Object;\n\n  constructor(store: WebsocketStore, options) {\n    super(store);\n    this._options = options;\n  }\n\n  /* options */\n\n  limit(newLimit: number): Promise<this> {\n    if (this._idCursor) throw new Error('Cursor already created');\n    this._options.limit = newLimit;\n    return Promise.resolve(this);\n  }\n\n  /* results */\n\n  _create() {\n    if (this._idCursor) throw new Error('Cursor already created');\n    return this.store.connection.emit('createCursor', this._options).then(idCursor => {\n      if (!idCursor) return;\n      this._idCursor = idCursor;\n    });\n  }\n\n  emit(type, ...args): Promise<any> {\n    if (!this._idCursor) {\n      return this._create().then(() => this.emit(type, ...args));\n    }\n\n    return this.store.emit('cursor', { type, id: this._idCursor }, args);\n  }\n\n  advance(count: number) {\n    this.emit('advance', count);\n    return this;\n  }\n\n  next(): Promise<?any> {\n    return this.emit('next').then(result => {\n      this._result = result;\n      this.key = result && result[this._store.keyPath];\n      return this.key;\n    });\n  }\n\n  result(): Promise<?ResultType> {\n    return Promise.resolve(this._result);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this.emit('count', applyLimit);\n  }\n\n  close(): Promise<void> {\n    if (!this._store) return Promise.resolve();\n\n    const closedPromise = this._idCursor ? this.emit('close') : Promise.resolve();\n    this._idCursor = null;\n    this._options = null;\n    this._store = undefined;\n    this._result = undefined;\n    return closedPromise;\n  }\n\n  toArray(): Promise<Array<Array<ResultType>>> {\n    return this.store.emit('cursor toArray', this._options).then(result => {\n      this.close();\n      return result;\n    });\n  }\n}\n"]}