{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["ObjectID","AbstractStore","MongoCursor","MongoStore","constructor","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","err","Promise","reject","connectionFailed","resolve","create","insertOne","object","_id","toString","created","Date","result","ops","ok","n","updateOne","replaceOne","updated","upsertOne","$set","upsert","replaceSeveral","objects","all","map","_partialUpdate","partialUpdate","Object","keys","some","key","partialUpdateByKey","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","criteria","updateMany","deleteByKey","removeOne","cursor","sort","find","findOne","limit","next"],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\ntype MongoUpdateCommandResultType = {\n  result: {| n: number, nModified: number, ok: number |},\n  connection: any,\n  modifiedCount: number,\n  upsertedId: null,\n  upsertedCount: number,\n  matchedCount: number,\n};\n\nexport default class MongoStore extends AbstractStore<MongoConnection> {\n  _collection: Collection | Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection\n      .getConnection()\n      .then((db: Db) => (this._collection = db.collection(collectionName)))\n      .catch(err => (this._collection = Promise.reject(err)));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection =>\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true }),\n      )\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  async partialUpdateByKey(key: any, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    const collection = await this.collection;\n    const commandResult: MongoUpdateCommandResultType = await collection.updateOne(\n      { _id: key },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    return this.findByKey(key);\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate).then(res =>\n      this.findByKey(object._id),\n    );\n  }\n\n  partialUpdateMany(criteria, partialUpdate: UpdateType): Promise<void> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection.then(collection => collection.removeOne({ _id: key })).then(() => null);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ResultType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<?ResultType> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}