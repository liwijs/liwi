{"version":3,"sources":["../../src/rest/RestService.js"],"names":["RestCursor","RestService","constructor","restResources","addRestResource","key","restResource","set","get","Error","createCursor","connectedUser","criteria","sort","limit","cursor","store"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;;IAEqBC,W,GAAN,MAAkB;AAC/BC,cAAYC,aAAZ,EAA6C;AAC3C,SAAKA,aAAL,GAAqBA,aADsB;AAE5C;;AAEDC,kBAAgBC,GAAhB,EAA6BC,YAA7B,EAA2C;AACzC,SAAKH,aAAL,CAAmBI,GAAnB,CAAuBF,GAAvB,EAA4BC,YAA5B,CADyC;AAE1C;;AAEDE,MAAIH,GAAJ,EAAiB;AACf,UAAMC,eAAe,KAAKH,aAAL,CAAmBK,GAAnB,CAAuBH,GAAvB,CAArB;AACA,QAAI,CAACC,YAAL,EAAmB,MAAM,IAAIG,KAAJ,CAAW,2BAA0BJ,GAAI,GAAzC,CAAN;AACnB,WAAOC,YAAP;AACD;;AAED,QAAMI,YAAN,CACEJ,YADF,EAEEK,aAFF,EAGE,EAAEC,QAAF,EAAYC,IAAZ,EAAkBC,KAAlB,EAHF,EAIW;AAETF,eAAWN,aAAaM,QAAb,CAAsBD,aAAtB,EAAqCC,cAArC,CAFF,EAGTC,OAAOP,aAAaO,IAAb,CAAkBF,aAAlB,EAAiCE,IAAjC,CAHE;;AAIT,UAAME,SAAS,MAAMT,aAAaU,KAAb,CAAmBD,MAAnB,CAA0BH,QAA1B,EAAoCC,IAApC,CAArB;;AAGA,WAFAC,QAAQR,aAAaQ,KAAb,CAAmBA,KAAnB,CAER,EADIA,KACJ,IADWC,OAAOD,KAAP,CAAaH,aAAb,EAA4BG,KAA5B,CACX,EAAO,IAAId,UAAJ,CAAeM,YAAf,EAA6BK,aAA7B,EAA4CI,MAA5C,CAAP;AACD;AA3B8B,C;SAAZd,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map<string, any>) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n    restResource,\n    connectedUser: ?Object,\n    { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n  ): Promise {\n    // TODO: restResource.query(connectedUser, criteria || {}, sort).cursor()\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}