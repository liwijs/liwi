{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":[],"mappings":"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","file":"MongoStore.js","sourcesContent":["import type Collection from 'mongodb/lib/collection';\nimport type Db from 'mongodb/lib/db';\nimport type MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\nimport { ObjectID } from 'mongodb';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n    _collection: Collection|Promise<Collection>;\n\n    constructor(connection: MongoConnection, collectionName: string) {\n        super(connection);\n\n        if (!collectionName) {\n            throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n        }\n\n        this._collection = connection.getConnection()\n            .then((db: Db) => this._collection = db.collection(collectionName));\n    }\n\n    get collection(): Promise<Collection> {\n        if (this.connection.connectionFailed) {\n            return Promise.reject(new Error('MongoDB connection failed'));\n        }\n\n        return Promise.resolve(this._collection);\n    }\n\n    insertOne(object: ModelType): Promise<ModelType> {\n        if (!object._id) {\n            object._id = (new ObjectID()).toString();\n        }\n        if (!object.created) {\n            object.created = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.insertOne(object))\n            .then(({ result, connection, ops }) => {\n                if (!result.ok || result.n !== 1) {\n                    throw new Error('Fail to insert');\n                }\n            })\n            .then(() => object);\n    }\n\n    updateOne(object: ModelType): Promise<ModelType> {\n        if (!object.updated) {\n            object.updated = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.updateOne({ _id: object._id }, object))\n            .then(() => object);\n    }\n\n    updateSeveral(objects: Array<ModelType>): Promise<ModelType> {\n        return Promise.all(objects.map(object => this.updateOne(object)));\n    }\n\n    _partialUpdate(partialUpdate: Object) {\n        // https://docs.mongodb.com/manual/reference/operator/update/\n        // if has a mongo operator\n        if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n            return partialUpdate;\n        } else {\n            return { $set: partialUpdate };\n        }\n    }\n\n    partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.collection\n            .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n    }\n\n    partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.partialUpdateByKey(object._id, partialUpdate)\n            .then(res => this.findByKey(object._id));\n    }\n\n    partialUpdateMany(criteria, partialUpdate: Object): Promise {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.collection\n            .then(collection => collection.updateMany(criteria, partialUpdate))\n            .then(res => null); // TODO return updated object\n    }\n\n    deleteByKey(key: any): Promise {\n        return this.collection\n            .then(collection => collection.removeOne({ _id: key }))\n            .then(() => null);\n    }\n\n    deleteOne(object: ModelType): Promise {\n        return this.deleteByKey(object._id);\n    }\n\n\n    cursor(criteria: Object, sort: ?Object): MongoCursor<ModelType> {\n        return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => new MongoCursor(this, cursor));\n    }\n\n    findByKey(key: any) {\n        return this.findOne({ _id: key });\n    }\n\n    findOne(criteria: Object): Promise<any> {\n        return this.collection\n            .then(collection => collection.find(criteria).limit(1).next());\n    }\n}\n"]}