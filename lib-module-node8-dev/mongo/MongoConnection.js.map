{"version":3,"sources":["../../src/mongo/MongoConnection.js"],"names":["Logger","MongoClient","Db","AbstractConnection","logger","MongoConnection","constructor","config","has","set","Error","connectionString","get","connect","info","connectPromise","then","connection","on","warn","connectionFailed","getConnection","Promise","reject","resolve","_connection","err","_connecting","catch","console","error","message","process","nextTick","exit","close"],"mappings":"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","file":"MongoConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { MongoClient } from 'mongodb';\nimport Db from 'mongodb/lib/db';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi:mongo:MongoConnection');\n\nexport default class MongoConnection extends AbstractConnection {\n  _connection: Db | null;\n  _connecting: Promise<void> | null;\n  connectionFailed: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '27017');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    const connectionString =\n      `mongodb://${config.has('user') ? `${config.get('user')}:${config.get('password')}@` : ''}` +\n      `${config.get('host')}:${config.get('port')}/${config.get('database')}`;\n\n    this.connect(connectionString);\n  }\n\n  connect(connectionString) {\n    logger.info('connecting', { connectionString });\n\n    const connectPromise = MongoClient.connect(connectionString)\n      .then(connection => {\n        logger.info('connected', { connectionString });\n        connection.on('close', () => {\n          logger.warn('close', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection closed'));\n        });\n        connection.on('timeout', () => {\n          logger.warn('timeout', { connectionString });\n          this.connectionFailed = true;\n          this.getConnection = () => Promise.reject(new Error('MongoDB connection timeout'));\n        });\n        connection.on('reconnect', () => {\n          logger.warn('reconnect', { connectionString });\n          this.connectionFailed = false;\n          this.getConnection = () => Promise.resolve(this._connection);\n        });\n        connection.on('error', err => {\n          logger.warn('error', { connectionString, err });\n        });\n\n        this._connection = connection;\n        this._connecting = null;\n        this.getConnection = () => Promise.resolve(this._connection);\n        return connection;\n      })\n      .catch(err => {\n        logger.info('not connected', { connectionString });\n        console.error(err.message || err);\n        // throw err;\n        process.nextTick(() => {\n          process.exit(1);\n        });\n\n        throw err;\n      });\n\n    this.getConnection = () => Promise.resolve(connectPromise);\n    this._connecting = this.getConnection();\n  }\n\n  getConnection(): Promise<Db> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.close().then(() => {\n        this._connection = null;\n      });\n    } else if (this._connecting) {\n      return this._connecting.then(() => this.close());\n    }\n  }\n}\n"]}