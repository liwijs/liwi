{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["ObjectID","Collection","Db","MongoConnection","AbstractStore","MongoCursor","InsertType","UpdateType","ResultType","MongoStore","constructor","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","err","Promise","reject","connectionFailed","resolve","create","insertOne","object","_id","toString","created","Date","result","ops","ok","n","updateOne","replaceOne","updated","upsertOne","$set","upsert","replaceSeveral","objects","all","map","_partialUpdate","partialUpdate","Object","keys","some","key","partialUpdateByKey","partialUpdateOne","findByKey","partialUpdateMany","criteria","updateMany","deleteByKey","removeOne","cursor","sort","find","findOne","limit","next"],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\nexport default class MongoStore extends AbstractStore<MongoConnection> {\n  _collection: Collection | Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection\n      .getConnection()\n      .then((db: Db) => (this._collection = db.collection(collectionName)))\n      .catch(err => (this._collection = Promise.reject(err)));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection =>\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true }),\n      )\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection.then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate).then(res =>\n      this.findByKey(object._id),\n    );\n  }\n\n  partialUpdateMany(criteria, partialUpdate: UpdateType): Promise<void> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection.then(collection => collection.removeOne({ _id: key })).then(() => null);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ResultType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<?ResultType> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}