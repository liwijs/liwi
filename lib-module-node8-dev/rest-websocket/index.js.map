{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":["Logger","encode","decode","logger","init","io","restService","on","socket","openWatchers","Set","forEach","watcher","stop","args","callback","type","restName","json","Error","Array","isArray","debug","restResource","get","info","options","createCursor","user","then","cursor","toArray","results","catch","err","error","message","result","key","eventName","otherArgs","startsWith","query","queries","emit","add","warn"],"mappings":"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","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport { encode, decode } from '../extended-json';\n\nconst logger = new Logger('liwi:rest-websocket');\n\nexport default function init(io, restService) {\n  io.on('connection', socket => {\n    let openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on(\n      'rest',\n      (\n        { type, restName, json }: { type: string, restName: string, json: ?string },\n        args: ?Array<any> | Function,\n        callback: ?Function,\n      ) => {\n        try {\n          if (json) {\n            if (!PRODUCTION && callback) {\n              throw new Error('Cannot have args and json.');\n            }\n\n            callback = args;\n            args = decode(json);\n            if (!Array.isArray(args)) {\n              logger.debug('args', { args });\n\n              if (callback) {\n                throw new Error('Invalid args');\n              }\n            }\n          }\n\n          if (!callback) {\n            logger[!PRODUCTION ? 'warn' : 'error']('callback missing');\n            return;\n          }\n\n          const restResource = restService.get(restName);\n\n          logger.info('rest', { type, restName, args });\n          switch (type) {\n            case 'cursor toArray': {\n              const [options] = args;\n              return restService\n                .createCursor(restResource, socket.user, options)\n                .then(cursor => cursor.toArray())\n                .then(results => callback(null, encode(results)))\n                .catch(err => {\n                  logger.error(type, err);\n                  callback(err.message);\n                });\n            }\n\n            case 'insertOne':\n            case 'updateOne':\n            case 'updateSeveral':\n            case 'partialUpdateByKey':\n            case 'partialUpdateOne':\n            case 'partialUpdateMany':\n            case 'deleteByKey':\n            case 'deleteOne':\n            case 'findOne':\n              try {\n                if (!PRODUCTION && !restResource[type]) {\n                  throw new Error(`rest: ${restName}.${type} is not available`);\n                }\n\n                // eslint-disable-next-line prettier/prettier\n                return restResource[type](socket.user, ...args)\n                  .then(result => callback(null, encode(result)))\n                  .catch(err => {\n                    logger.error(type, { err });\n                    callback(err.message || err);\n                  });\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            case 'fetch':\n            case 'subscribe':\n            case 'fetchAndSubscribe':\n              try {\n                const [key, eventName, otherArgs = []] = args;\n\n                if (!key.startsWith('query')) {\n                  throw new Error('Invalid query key');\n                }\n\n                const query = restResource.queries[key]; // todo pass connected user\n                if (!query) {\n                  throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n                }\n\n                if (type === 'fetch') {\n                  // eslint-disable-next-line prettier/prettier\n                  return query[type](result => callback(null, result && encode(result)), ...otherArgs)\n                    .catch(err => {\n                      logger.error(type, { err });\n                      callback(err.message || err);\n                    });\n                } else {\n                  const watcher = query[type]((err, result) => {\n                    if (err) {\n                      logger.error(type, { err });\n                    }\n\n                    socket.emit(eventName, err, result && encode(result));\n                  });\n                  watcher.then(\n                    () => callback(),\n                    err => {\n                      logger.error(type, { err });\n                      callback(err.message || err);\n                    },\n                  );\n\n                  openWatchers.add(watcher);\n                }\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n              break;\n\n            default:\n              try {\n                logger.warn('Unknown command', { type });\n                callback(`rest: unknown command \"${type}\"`);\n              } catch (err) {\n                logger.error(type, { err });\n                callback(err.message || err);\n              }\n          }\n        } catch (err) {\n          logger.warn('rest error', { err });\n          callback(err.message || err);\n        }\n      },\n    );\n  });\n}\n"]}