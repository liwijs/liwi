{"version":3,"sources":["../../src/extended-json/parse.js"],"names":["regexpStringDate","internalReviver","key","value","matchDate","exec","Date","UTC","text","reviver","JSON","parse"],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,8DAAzB;;AAEA,MAAMC,kBAAkB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAMC,YAAYJ,iBAAiBK,IAAjB,CAAsBF,KAAtB,CAAlB;AACA,QAAIC,SAAJ,EACE,OAAO,IAAIE,IAAJ,CACLA,KAAKC,GAAL,CACE,CAACH,UAAU,CAAV,CADH,EAEE,CAACA,UAAU,CAAV,CAAD,GAAgB,CAFlB,EAGE,CAACA,UAAU,CAAV,CAHH,EAIE,CAACA,UAAU,CAAV,CAJH,EAKE,CAACA,UAAU,CAAV,CALH,EAME,CAACA,UAAU,CAAV,CANH,CADK,CAAP;AAWH;;AAED,SAAOD,KAAP;AACD,CA3BD;;AA6BA;;;;;AAKA,eAAe,eAASK,IAAT,EAAeC,OAAf,EAAwB;AACrC,SAAOC,KAAKC,KAAL,CACLH,IADK,EAELC,WAAW,IAAX,GAAkBR,eAAlB,GAAoC,CAACC,GAAD,EAAMC,KAAN,KAAgBM,QAAQP,GAAR,EAAaD,gBAAgBE,KAAhB,CAAb,CAF/C,CAAP;AAID","file":"parse.js","sourcesContent":["/* eslint-disable max-len */\n\nconst regexpStringDate = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/;\n\nconst internalReviver = (key, value) => {\n  // if (Array.isArray(value) && value.length === 3 && value[0] === 'extended-json') {\n  //   switch (value[1]) {\n  //     case 'date':\n  //       return new Date(value[2]);\n  //     default:\n  //       throw new Error(`Invalid type: \"${value[1]}\"`);\n  //   }\n  // }\n\n  if (typeof value === 'string') {\n    const matchDate = regexpStringDate.exec(value);\n    if (matchDate) {\n      return new Date(\n        Date.UTC(\n          +matchDate[1],\n          +matchDate[2] - 1,\n          +matchDate[3],\n          +matchDate[4],\n          +matchDate[5],\n          +matchDate[6],\n        ),\n      );\n    }\n  }\n\n  return value;\n};\n\n/**\n * @param  {string}   text      The string to parse as JSON\n * @param  {function} [reviver] If a function, prescribes how the value originally produced by parsing is transformed, before being returned\n * @return {*}\n */\nexport default function(text, reviver) {\n  return JSON.parse(\n    text,\n    reviver == null ? internalReviver : (key, value) => reviver(key, internalReviver(value)),\n  );\n}\n"]}