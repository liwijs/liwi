{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":["init","logger","io","restService","on","socket","openWatchers","Set","forEach","watcher","stop","args","callback","type","restName","json","Error","Array","isArray","debug","restResource","get","info","options","createCursor","user","then","cursor","toArray","results","catch","err","error","message","result","key","eventName","otherArgs","startsWith","query","queries","emit","add","warn"],"mappings":"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","file":"index.js","sourcesContent":["/* global PRODUCTION */\nimport Logger from 'nightingale-logger/src';\nimport { encode, decode } from '../extended-json';\n\nconst logger = new Logger('liwi:rest-websocket');\n\nexport default function init(io, restService) {\n  io.on('connection', (socket) => {\n    let openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on('rest', (\n      { type, restName, json }: { type: string, restName: string, json: ?string },\n      args: ?Array<any> | Function,\n      callback: ?Function,\n    ) => {\n      try {\n        if (json) {\n          if (!PRODUCTION && callback) {\n            throw new Error('Cannot have args and json.');\n          }\n\n          callback = args;\n          args = decode(json);\n          if (!Array.isArray(args)) {\n            logger.debug('args', { args });\n\n            if (callback) {\n              throw new Error('Invalid args');\n            }\n          }\n        }\n\n        if (!callback) {\n          logger[!PRODUCTION ? 'warn' : 'error']('callback missing');\n          return;\n        }\n\n        const restResource = restService.get(restName);\n\n        logger.info('rest', { type, restName, args });\n        switch (type) {\n          case 'cursor toArray': {\n            const [options] = args;\n            return restService.createCursor(restResource, socket.user, options)\n              .then(cursor => cursor.toArray())\n              .then(results => callback(null, encode(results)))\n              .catch((err) => {\n                logger.error(type, err);\n                callback(err.message);\n              });\n          }\n\n          case 'insertOne':\n          case 'updateOne':\n          case 'updateSeveral':\n          case 'partialUpdateByKey':\n          case 'partialUpdateOne':\n          case 'partialUpdateMany':\n          case 'deleteByKey':\n          case 'deleteOne':\n          case 'findOne':\n            try {\n              if (!PRODUCTION && !restResource[type]) {\n                throw new Error(`rest: ${restName}.${type} is not available`);\n              }\n\n              return restResource[type](socket.user, ...args)\n                .then(result => callback(null, encode(result)))\n                .catch((err) => {\n                  logger.error(type, { err });\n                  callback(err.message || err);\n                });\n            } catch (err) {\n              logger.error(type, { err });\n              callback(err.message || err);\n            }\n            break;\n\n          case 'fetch':\n          case 'subscribe':\n          case 'fetchAndSubscribe':\n            try {\n              const [key, eventName, otherArgs = []] = args;\n\n              if (!key.startsWith('query')) {\n                throw new Error('Invalid query key');\n              }\n\n              const query = restResource.queries[key]; // todo pass connected user\n              if (!query) {\n                throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n              }\n\n              if (type === 'fetch') {\n                return query[type](result => callback(null, result && encode(result)), ...otherArgs)\n                  .catch((err) => {\n                    logger.error(type, { err });\n                    callback(err.message || err);\n                  });\n              } else {\n                const watcher = query[type]((err, result) => {\n                  if (err) {\n                    logger.error(type, { err });\n                  }\n\n                  socket.emit(eventName, err, result && encode(result));\n                });\n                watcher.then(() => callback(), err => {\n                  logger.error(type, { err });\n                  callback(err.message || err);\n                });\n\n                openWatchers.add(watcher);\n              }\n            } catch (err) {\n              logger.error(type, { err });\n              callback(err.message || err);\n            }\n            break;\n\n          default:\n            try {\n              logger.warn('Unknown command', { type });\n              callback(`rest: unknown command \"${type}\"`);\n            } catch (err) {\n              logger.error(type, { err });\n              callback(err.message || err);\n            }\n        }\n      } catch (err) {\n        logger.warn('rest error', { err });\n        callback(err.message || err);\n      }\n    });\n  });\n}\n"]}