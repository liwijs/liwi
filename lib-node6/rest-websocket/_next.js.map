{"version":3,"sources":["../../src/rest-websocket/_next.js"],"names":[],"mappings":"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","file":"_next.js","sourcesContent":["import Logger from 'nightingale-logger';\n\nconst MAX_OPENED_CURSORS = 5;\nconst logger = new Logger('liwi.rest-websocket');\n\nexport default function init(io, restService) {\n    io.on('connection', socket => {\n        let openCursors = new Map();\n        let timeouts = new Map();\n        let activeListeners = new Map();\n\n        const closeCursor = (id) => {\n            clearTimeout(timeouts[id]);\n            timeouts.delete(id);\n            openCursors[id].close();\n            openCursors.delete(id);\n        };\n\n        socket.on('disconnect', () => {\n            openCursors.forEach(cursor => cursor.close());\n            timeouts.forEach(timeout => clearTimeout(timeout));\n            activeListeners.forEach(listener => listener.close());\n\n            openCursors = timeouts = activeListeners = null;\n        });\n\n        let nextIdCursor = 1;\n\n        socket.on('rest', ({ type, restName }: { type: string, restName: string }, args: Array, callback: Function) => {\n            logger.info('rest', { type, restName, args });\n            switch (type) {\n                case 'createCursor': {\n                    if (openCursors.size > MAX_OPENED_CURSORS) return callback('too many cursors');\n\n                    const id = nextIdCursor++;\n                    const [options] = args;\n                    const cursor = restService.createCursor(restName, options);\n                    if (!cursor) return callback('failed to create cursor');\n\n                    timeouts.set(id, setTimeout(() => {\n                        logger.warn('socket closed by timeout', { id, restName });\n                        closeCursor(id);\n                    }));\n\n                    return callback(null, id);\n                }\n\n                case 'cursor toArray': {\n                    const [options] = args;\n                    return restService.createCursor(restName, options)\n                        .then(cursor => cursor.toArray())\n                        .then(results => callback(null, results))\n                        .catch(err => callback(err.message));\n                }\n\n                case 'cursor': {\n                    const [{ type: typeCursorAction, id: idCursor }, cursorArgs] = args;\n\n                    const cursor = openCursors.get(idCursor);\n                    if (!cursor) return callback(`failed to find cursor \"${idCursor}\"`);\n                    switch (typeCursorAction) {\n                        case 'close':\n                            closeCursor(idCursor);\n                            return callback();\n\n                        case 'advance':\n                        case 'next':\n                        case 'count':\n                            return cursor[type](...cursorArgs)\n                                .then(result => callback(null, result))\n                                .catch(err => callback(err.message || err));\n                            /* cursor.next().then((key) => {\n                                if (!key) return callback(null);\n                                return cursor.result();\n                            }).then(result => {\n                                    response(null, restService.transform(data));\n                                });\n                            }, () => {\n                                response(null);\n                            }); */\n\n                        default:\n                            callback(`Unknown command: \"${type}\"`);\n                    }\n\n                    break;\n                }\n\n                case 'insertOne':\n                case 'updateOne':\n                case 'updateSeveral':\n                case 'partialUpdateByKey':\n                case 'partialUpdateOne':\n                case 'partialUpdateMany':\n                case 'deleteByKey':\n                case 'deleteOne':\n                case 'findOne':\n                    return restService[type](restName, ...args)\n                        .then(result => callback(null, result))\n                        .catch(err => callback(err.message || err));\n\n                default:\n                    callback(`Unknown command: \"${type}\"`);\n            }\n        });\n    });\n}\n"]}