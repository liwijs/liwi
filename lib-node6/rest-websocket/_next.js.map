{"version":3,"sources":["../../src/rest-websocket/_next.js"],"names":["init","MAX_OPENED_CURSORS","logger","io","restService","on","socket","openCursors","Map","timeouts","activeListeners","closeCursor","id","clearTimeout","delete","close","forEach","cursor","timeout","listener","nextIdCursor","type","restName","args","callback","info","size","options","createCursor","set","setTimeout","warn","then","toArray","results","catch","err","message","typeCursorAction","idCursor","cursorArgs","get","result"],"mappings":"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","file":"_next.js","sourcesContent":["import Logger from 'nightingale-logger';\n\nconst MAX_OPENED_CURSORS = 5;\nconst logger = new Logger('liwi:rest-websocket');\n\nexport default function init(io, restService) {\n  io.on('connection', socket => {\n    let openCursors = new Map();\n    let timeouts = new Map();\n    let activeListeners = new Map();\n\n    const closeCursor = id => {\n      clearTimeout(timeouts[id]);\n      timeouts.delete(id);\n      openCursors[id].close();\n      openCursors.delete(id);\n    };\n\n    socket.on('disconnect', () => {\n      openCursors.forEach(cursor => cursor.close());\n      timeouts.forEach(timeout => clearTimeout(timeout));\n      activeListeners.forEach(listener => listener.close());\n\n      openCursors = null;\n      timeouts = null;\n      activeListeners = null;\n    });\n\n    let nextIdCursor = 1;\n\n    socket.on(\n      'rest',\n      (\n        { type, restName }: { type: string, restName: string },\n        args: Array<any>,\n        callback: Function,\n      ) => {\n        logger.info('rest', { type, restName, args });\n        switch (type) {\n          case 'createCursor': {\n            if (openCursors.size > MAX_OPENED_CURSORS) return callback('too many cursors');\n\n            const id = nextIdCursor++;\n            const [options] = args;\n            const cursor = restService.createCursor(restName, options);\n            if (!cursor) return callback('failed to create cursor');\n\n            timeouts.set(\n              id,\n              setTimeout(() => {\n                logger.warn('socket closed by timeout', { id, restName });\n                closeCursor(id);\n              }),\n            );\n\n            return callback(null, id);\n          }\n\n          case 'cursor toArray': {\n            const [options] = args;\n            return restService\n              .createCursor(restName, options)\n              .then(cursor => cursor.toArray())\n              .then(results => callback(null, results))\n              .catch(err => callback(err.message));\n          }\n\n          case 'cursor': {\n            const [{ type: typeCursorAction, id: idCursor }, cursorArgs] = args;\n\n            const cursor = openCursors.get(idCursor);\n            if (!cursor) return callback(`failed to find cursor \"${idCursor}\"`);\n            switch (typeCursorAction) {\n              case 'close':\n                closeCursor(idCursor);\n                return callback();\n\n              case 'advance':\n              case 'next':\n              case 'count':\n                // eslint-disable-next-line prettier/prettier\n                return cursor[type](...cursorArgs)\n                  .then(result => callback(null, result))\n                  .catch(err => callback(err.message || err));\n              /* cursor.next().then((key) => {\n                                if (!key) return callback(null);\n                                return cursor.result();\n                            }).then(result => {\n                                    response(null, restService.transform(data));\n                                });\n                            }, () => {\n                                response(null);\n                            }); */\n\n              default:\n                callback(`Unknown command: \"${type}\"`);\n            }\n\n            break;\n          }\n\n          case 'insertOne':\n          case 'updateOne':\n          case 'updateSeveral':\n          case 'partialUpdateByKey':\n          case 'partialUpdateOne':\n          case 'partialUpdateMany':\n          case 'deleteByKey':\n          case 'deleteOne':\n          case 'findOne':\n            // eslint-disable-next-line prettier/prettier\n            return restService[type](restName, ...args)\n              .then(result => callback(null, result))\n              .catch(err => callback(err.message || err));\n\n          default:\n            callback(`Unknown command: \"${type}\"`);\n        }\n      },\n    );\n  });\n}\n"]}