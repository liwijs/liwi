{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":["init","logger","io","restService","on","socket","openWatchers","Set","forEach","watcher","stop","type","restName","buffer","args","callback","restResource","get","info","options","createCursor","user","then","cursor","toArray","results","catch","err","error","message","result","key","eventName","otherArgs","startsWith","Error","query","emit","add","warn"],"mappings":"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","file":"index.js","sourcesContent":["/* global PRODUCTION */\nimport Logger from 'nightingale-logger/src';\nimport { encode, decode } from '../msgpack';\n\nconst logger = new Logger('liwi:rest-websocket');\n\ntype ObjectBufferType = {\n  type: 'Buffer',\n  data: Array<number>,\n}\n\nexport default function init(io, restService) {\n  io.on('connection', (socket) => {\n    let openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on('rest', (\n      { type, restName, buffer }: { type: string, restName: string, buffer: ?ObjectBufferType },\n      args: ?Array<any>|Function,\n      callback: ?Function,\n    ) => {\n      if (buffer) {\n        if (!PRODUCTION && callback) {\n          throw new Error('Cannot have args and buffer.');\n        }\n\n        callback = args;\n        args = decode(buffer);\n      }\n\n      if (!PRODUCTION && !callback) {\n        throw new Error('`callback` missing.');\n      }\n\n      const restResource = restService.get(restName);\n\n      logger.info('rest', { type, restName, args });\n      switch (type) {\n        case 'cursor toArray': {\n          const [options] = args;\n          return restService.createCursor(restResource, socket.user, options)\n            .then(cursor => cursor.toArray())\n            .then(results => callback(null, encode(results)))\n            .catch((err) => {\n              logger.error(type, err);\n              callback(err.message);\n            });\n        }\n\n\n        case 'insertOne':\n        case 'updateOne':\n        case 'updateSeveral':\n        case 'partialUpdateByKey':\n        case 'partialUpdateOne':\n        case 'partialUpdateMany':\n        case 'deleteByKey':\n        case 'deleteOne':\n        case 'findOne':\n          try {\n            if (!PRODUCTION && !restResource[type]) {\n              throw new Error(`rest: ${restName}.${type} is not available`);\n            }\n\n            return restResource[type](socket.user, ...args)\n              .then(result => callback(null, encode(result)))\n              .catch((err) => {\n                logger.error(type, { err });\n                callback(err.message || err);\n              });\n          } catch (err) {\n            logger.error(type, { err });\n            callback(err.message || err);\n          }\n          break;\n\n        case 'fetch':\n        case 'subscribe':\n        case 'fetchAndSubscribe':\n          try {\n            const [key, eventName, otherArgs = []] = args;\n\n            if (!key.startsWith('query')) {\n              throw new Error('Invalid query key');\n            }\n\n            const query = restResource(socket.user, key);\n            if (!query) {\n              throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n            }\n\n            if (type === 'fetch') {\n              return query[type](result => callback(null, encode(result)), ...otherArgs)\n                .catch((err) => {\n                  logger.error(type, { err });\n                  callback(err.message || err);\n                });\n            } else {\n              const watcher = query[type]((err, result) => {\n                if (err) {\n                  logger.error(type, { err });\n                }\n                socket.emit(eventName, err, encode(result));\n              });\n              watcher.then(() => callback(), err => {\n                logger.error(type, { err });\n                callback(err.message || err);\n              });\n\n              openWatchers.add(watcher);\n            }\n          } catch (err) {\n            logger.error(type, { err });\n            callback(err.message || err);\n          }\n          break;\n\n        default:\n          try {\n            logger.warn('Unknown command', { type });\n            callback(`rest: unknown command \"${type}\"`);\n          } catch (err) {\n            logger.error(type, { err });\n            callback(err.message || err);\n          }\n      }\n    });\n  });\n}\n"]}