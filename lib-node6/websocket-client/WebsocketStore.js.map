{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":["WebsocketStore","constructor","websocket","restName","keyPath","Error","createQuery","key","emit","type","connection","isDisconnected","args","buffer","then","result","insertOne","object","updateOne","updateSeveral","objects","partialUpdateByKey","partialUpdate","partialUpdateOne","partialUpdateMany","criteria","deleteByKey","deleteOne","cursor","sort","Promise","resolve","findByKey","findOne","_id"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAOe,MAAMA,cAAN,iCAA2E;;AAGxFC,cAAYC,SAAZ,EAA4CC,QAA5C,EAA8D;AAC5D,UAAMD,SAAN;;AAD4D,SAF9DE,OAE8D,GAFpD,KAEoD;AAG5D,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,KAAJ,CAAW,uBAAqBF,QAAS,IAAzC,CAAN;AACD;;AAED,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEDG,cAAYC,GAAZ,EAAyB;AACvB,WAAO,oBAAU,IAAV,EAAgBA,GAAhB,CAAP;AACD;;AAEDC,OAAKC,IAAL,EAAoB;AAClB,QAAI,KAAKC,UAAL,CAAgBC,cAAhB,EAAJ,EAAsC;AACpC,YAAM,IAAIN,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAHiB,sCAANO,IAAM;AAANA,UAAM;AAAA;;AAKlB,WAAO,KAAKF,UAAL,CAAgBF,IAAhB,CAAqB,MAArB,EAA6B;AAClCC,UADkC;AAElCN,gBAAU,KAAKA,QAFmB;AAGlCU,cAAQD,QAAQ,qBAAOA,IAAP;AAHkB,KAA7B,EAIJE,IAJI,CAICC,UAAU,qBAAOA,MAAP,CAJX,CAAP;AAKD;;AAEDC,YAAUC,MAAV,EAAiD;AAC/C,WAAO,KAAKT,IAAL,CAAU,WAAV,EAAuBS,MAAvB,CAAP;AACD;;AAEDC,YAAUD,MAAV,EAAiD;AAC/C,WAAO,KAAKT,IAAL,CAAU,WAAV,EAAuBS,MAAvB,CAAP;AACD;;AAEDE,gBAAcC,OAAd,EAAoE;AAClE,WAAO,KAAKZ,IAAL,CAAU,eAAV,EAA2BY,OAA3B,CAAP;AACD;;AAEDC,qBAAmBd,GAAnB,EAA6Be,aAA7B,EAA6D;AAC3D,WAAO,KAAKd,IAAL,CAAU,oBAAV,EAAgCD,GAAhC,EAAqCe,aAArC,CAAP;AACD;;AAEDC,mBAAiBN,MAAjB,EAAoCK,aAApC,EAA+E;AAC7E,WAAO,KAAKd,IAAL,CAAU,kBAAV,EAA8BS,MAA9B,EAAsCK,aAAtC,CAAP;AACD;;AAEDE,oBAAkBC,QAAlB,EAA4BH,aAA5B,EAA4D;AAC1D,WAAO,KAAKd,IAAL,CAAU,mBAAV,EAA+BiB,QAA/B,EAAyCH,aAAzC,CAAP;AACD;;AAEDI,cAAYnB,GAAZ,EAA+B;AAC7B,WAAO,KAAKC,IAAL,CAAU,aAAV,EAAyBD,GAAzB,CAAP;AACD;;AAEDoB,YAAUV,MAAV,EAAsC;AACpC,WAAO,KAAKT,IAAL,CAAU,WAAV,EAAuBS,MAAvB,CAAP;AACD;;AAEDW,SAAOH,QAAP,EAA0BI,IAA1B,EAA8E;AAC5E,WAAOC,QAAQC,OAAR,CAAgB,8BAAoB,IAApB,EAA0B,EAAEN,QAAF,EAAYI,IAAZ,EAA1B,CAAhB,CAAP;AACD;;AAEDG,YAAUzB,GAAV,EAAoB;AAClB,WAAO,KAAK0B,OAAL,CAAa,EAAEC,KAAK3B,GAAP,EAAb,CAAP;AACD;;AAED0B,UAAQR,QAAR,EAA0BI,IAA1B,EAA0D;AACxD,WAAO,KAAKrB,IAAL,CAAU,SAAV,EAAqBiB,QAArB,EAA+BI,IAA/B,CAAP;AACD;AAvEuF;kBAArE7B,c","file":"WebsocketStore.js","sourcesContent":["import AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\nimport { encode, decode } from '../msgpack';\nimport Query from './Query';\n\ntype WebsocketConnection = {\n    emit: Function,\n    isConnected: Function,\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n  keyPath = '_id';\n\n  constructor(websocket: WebsocketConnection, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection.emit('rest', {\n      type,\n      restName: this.restName,\n      buffer: args && encode(args),\n    }).then(result => decode(result));\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}