{"version":3,"sources":["../../src/react-redux/FindAndSubscribe.js"],"names":["FindAndSubscribeComponent","componentDidMount","query","action","props","dispatch","context","store","_subscribe","fetchAndSubscribe","err","result","alert","componentWillUnmount","stop","render","children","contextTypes","any"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;IAaqBA,yB,qBAAN,+BAAkD;;AAO/DC,sBAAoB;AAClB,UAAM,EAAEC,KAAF,EAASC,MAAT,KAAoB,KAAKC,KAA/B;AACA,UAAMC,WAAW,KAAKD,KAAL,CAAWC,QAAX,IAAuB,KAAKC,OAAL,CAAaC,KAAb,CAAmBF,QAA3D;AACA,SAAKG,UAAL,GAAkBN,MAAMO,iBAAN,CAAwB,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACzD,UAAID,GAAJ,EAAS;AACP;AACAE,cAAO,qBAAoBF,GAAI,EAA/B;AACA;AACD;;AAEDL,eAASF,OAAOQ,MAAP,EAAe,IAAf,CAAT;AACD,KARiB,CAAlB;AASD;;AAEDE,yBAAuB;AACrB,QAAI,KAAKL,UAAT,EAAqB;AACnB,WAAKA,UAAL,CAAgBM,IAAhB;AACA,aAAO,KAAKN,UAAZ;AACD;AACF;;AAEDO,WAAwB;AACtB,WAAO,KAAKX,KAAL,CAAWY,QAAlB;AACD;AA9B8D,C,SAGxDC,Y,GAAe;AACpBV,SAAO,oBAAUW;AADG,C;kBAHHlB,yB","file":"FindAndSubscribe.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport type { ReactNodeType, ReduxDispatchType } from 'alp-react-redux/types';\nimport type AbstractQuery from '../store/AbstractQuery';\n\ntype ActionType = (result: any) => any;\n\ntype PropsType = {\n  dispatch: ?ReduxDispatchType,\n  action: ActionType,\n  query: AbstractQuery,\n  children: ReactNodeType,\n};\n\nexport default class FindAndSubscribeComponent extends Component {\n  props: PropsType;\n\n  static contextTypes = {\n    store: PropTypes.any,\n  };\n\n  componentDidMount() {\n    const { query, action } = this.props;\n    const dispatch = this.props.dispatch || this.context.store.dispatch;\n    this._subscribe = query.fetchAndSubscribe((err, result) => {\n      if (err) {\n        // eslint-disable-next-line no-alert\n        alert(`Unexpected error: ${err}`);\n        return;\n      }\n\n      dispatch(action(result, true));\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._subscribe) {\n      this._subscribe.stop();\n      delete this._subscribe;\n    }\n  }\n\n  render(): ReactNodeType {\n    return this.props.children;\n  }\n}\n"]}