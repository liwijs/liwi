{"version":3,"sources":["../../src/rest/RestService.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAEe,MAAM,WAAN,CAAkB;AAC/B,cAAY,aAAZ,EAAgC;AAC9B,SAAK,aAAL,GAAqB,aAArB;AACD;;AAED,kBAAgB,GAAhB,EAA6B,YAA7B,EAA2C;AACzC,SAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,EAA4B,YAA5B;AACD;;AAED,MAAI,GAAJ,EAAiB;AACf,UAAM,eAAe,KAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,CAArB;AACA,QAAI,CAAC,YAAL,EAAmB,MAAM,IAAI,KAAJ,CAAW,4BAA0B,GAAI,IAAzC,CAAN;AACnB,WAAO,YAAP;AACD;;AAEK,cAAN,CACM,QADN,EAEM,aAFN,QAIa;AAAA;;AAAA,QADL,QACK,QADL,QACK;AAAA,QADK,IACL,QADK,IACL;AAAA,QADW,KACX,QADW,KACX;AAAA;AACX,YAAM,eAAe,MAAK,GAAL,CAAS,QAAT,CAArB;AACA,iBAAW,aAAa,QAAb,CAAsB,aAAtB,EAAqC,YAAY,EAAjD,CAAX;AACA,aAAO,aAAa,IAAb,CAAkB,aAAlB,EAAiC,IAAjC,CAAP;AACA,YAAM,SAAS,MAAM,aAAa,KAAb,CAAmB,MAAnB,CAA0B,QAA1B,EAAoC,IAApC,CAArB;AACA,cAAQ,aAAa,KAAb,CAAmB,KAAnB,CAAR;AACA,UAAI,KAAJ,EAAW,OAAO,KAAP,CAAa,aAAb,EAA4B,KAA5B;AACX,aAAO,yBAAe,YAAf,EAA6B,aAA7B,EAA4C,MAA5C,CAAP;AAPW;AAQZ;AA3B8B;kBAAZ,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n        restName: string,\n        connectedUser: ?Object,\n        { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n    ): Promise {\n    const restResource = this.get(restName);\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}