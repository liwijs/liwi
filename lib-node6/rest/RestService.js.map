{"version":3,"sources":["../../src/rest/RestService.js"],"names":["RestService","constructor","restResources","addRestResource","key","restResource","set","get","Error","createCursor","restName","connectedUser","criteria","sort","limit","cursor","store"],"mappings":";;;;;;AAAA;;;;;;;;AAEe,MAAMA,WAAN,CAAkB;AAC/BC,cAAYC,aAAZ,EAAgC;AAC9B,SAAKA,aAAL,GAAqBA,aAArB;AACD;;AAEDC,kBAAgBC,GAAhB,EAA6BC,YAA7B,EAA2C;AACzC,SAAKH,aAAL,CAAmBI,GAAnB,CAAuBF,GAAvB,EAA4BC,YAA5B;AACD;;AAEDE,MAAIH,GAAJ,EAAiB;AACf,UAAMC,eAAe,KAAKH,aAAL,CAAmBK,GAAnB,CAAuBH,GAAvB,CAArB;AACA,QAAI,CAACC,YAAL,EAAmB,MAAM,IAAIG,KAAJ,CAAW,4BAA0BJ,GAAI,IAAzC,CAAN;AACnB,WAAOC,YAAP;AACD;;AAEKI,cAAN,CACMC,QADN,EAEMC,aAFN,QAIa;AAAA;;AAAA,QADLC,QACK,QADLA,QACK;AAAA,QADKC,IACL,QADKA,IACL;AAAA,QADWC,KACX,QADWA,KACX;AAAA;AACX,YAAMT,eAAe,MAAKE,GAAL,CAASG,QAAT,CAArB;AACAE,iBAAWP,aAAaO,QAAb,CAAsBD,aAAtB,EAAqCC,YAAY,EAAjD,CAAX;AACAC,aAAOR,aAAaQ,IAAb,CAAkBF,aAAlB,EAAiCE,IAAjC,CAAP;AACA,YAAME,SAAS,MAAMV,aAAaW,KAAb,CAAmBD,MAAnB,CAA0BH,QAA1B,EAAoCC,IAApC,CAArB;AACAC,cAAQT,aAAaS,KAAb,CAAmBA,KAAnB,CAAR;AACA,UAAIA,KAAJ,EAAWC,OAAOD,KAAP,CAAaH,aAAb,EAA4BG,KAA5B;AACX,aAAO,yBAAeT,YAAf,EAA6BM,aAA7B,EAA4CI,MAA5C,CAAP;AAPW;AAQZ;AA3B8B;kBAAZf,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n        restName: string,\n        connectedUser: ?Object,\n        { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n    ): Promise {\n    const restResource = this.get(restName);\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}