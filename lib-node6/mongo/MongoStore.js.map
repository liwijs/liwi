{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["MongoStore","constructor","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","err","Promise","reject","connectionFailed","resolve","create","insertOne","object","_id","toString","created","Date","result","ops","ok","n","updateOne","replaceOne","updated","upsertOne","$set","upsert","replaceSeveral","objects","all","map","_partialUpdate","partialUpdate","Object","keys","some","key","partialUpdateByKey","partialUpdateOne","res","findByKey","partialUpdateMany","criteria","updateMany","deleteByKey","removeOne","cursor","sort","find","findOne","limit","next"],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n  _collection: Collection|Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection()\n      .then((db: Db) => this._collection = db.collection(collectionName))\n      .catch(err => this._collection = Promise.reject(err));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object._id) {\n      object._id = (new ObjectID()).toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => (\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true })\n      ))\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate)\n      .then(res => this.findByKey(object._id));\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.collection\n      .then(collection => collection.removeOne({ _id: key }))\n      .then(() => null);\n  }\n\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}