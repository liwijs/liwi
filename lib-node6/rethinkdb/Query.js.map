{"version":3,"sources":["../../src/rethinkdb/Query.js"],"names":["Query","fetch","callback","queryCallback","store","query","run","then","_subscribe","_includeInitial","args","_feed","promise","changes","includeInitial","includeStates","includeTypes","includeOffsets","feed","length","_promise","each","stop","closeFeed","cancel","cb","errCb","close"],"mappings":";;;;;;AAAA;;;;;;AAQe,MAAMA,KAAN,iCAAgD;AAC7DC,QAAMC,QAAN,EAAoC;AAClC,WAAO,KAAKC,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuCC,GAAvC,GAA6CC,IAA7C,CAAkDL,QAAlD,CAAP;AACD;;AAEDM,aAAWN,QAAX,EAA+BO,kBAAkB,KAAjD,EAAwDC,IAAxD,EAA+F;AAC7F,QAAIC,KAAJ;AACA,QAAIC,UACF,KAAKT,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuCQ,OAAvC,CAA+C;AAC7CC,sBAAgBL,eAD6B;AAE7CM,qBAAe,IAF8B;AAG7CC,oBAAc,IAH+B;AAI7CC,sBAAgB;AAJ6B,KAA/C,EAMCV,IAND,CAMMW,QAAQ;AACZ,UAAIR,KAAKS,MAAL,KAAgB,CAApB,EAAuB;AACrBR,gBAAQO,IAAR;AACA,eAAO,KAAKE,QAAZ;AACD;;AAEDF,WAAKG,IAAL,CAAUnB,QAAV;AACA,aAAOgB,IAAP;AACD,KAdD,CADF;;AAiBA,QAAIR,KAAKS,MAAL,KAAgB,CAApB,EAAuB,KAAKC,QAAL,GAAgBR,OAAhB;;AAEvB,UAAMU,OAAO,MAAM;AACjB,WAAKC,SAAL,CAAeZ,KAAf,EAAsBC,OAAtB;AACD,KAFD;;AAIA,WAAO;AACLU,UADK;AAELE,cAAQF,IAFH;AAGLf,YAAM,CAACkB,EAAD,EAAKC,KAAL,KAAed,QAAQL,IAAR,CAAakB,EAAb,EAAiBC,KAAjB;AAHhB,KAAP;AAKD;;AAEDH,YAAUL,IAAV,EAAgBN,OAAhB,EAAyB;AACvB,QAAIM,IAAJ,EAAU;AACRA,WAAKS,KAAL;AACD,KAFD,MAEO,IAAIf,OAAJ,EAAa;AAClBA,cAAQL,IAAR,CAAaW,QAAQA,KAAKS,KAAL,EAArB;AACD;AACF;AA3C4D;kBAA1C3B,K","file":"Query.js","sourcesContent":["import AbstractQuery from '../store/AbstractQuery';\nimport RethinkStore from './RethinkStore';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nexport default class Query extends AbstractQuery<RethinkStore> {\n  fetch(callback: ?Function): Promise {\n    return this.queryCallback(this.store.query()).run().then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    let _feed;\n    let promise =\n      this.queryCallback(this.store.query()).changes({\n        includeInitial: _includeInitial,\n        includeStates: true,\n        includeTypes: true,\n        includeOffsets: true,\n      })\n      .then(feed => {\n        if (args.length === 0) {\n          _feed = feed;\n          delete this._promise;\n        }\n\n        feed.each(callback);\n        return feed;\n      });\n\n    if (args.length === 0) this._promise = promise;\n\n    const stop = () => {\n      this.closeFeed(_feed, promise);\n    };\n\n    return {\n      stop,\n      cancel: stop,\n      then: (cb, errCb) => promise.then(cb, errCb),\n    };\n  }\n\n  closeFeed(feed, promise) {\n    if (feed) {\n      feed.close();\n    } else if (promise) {\n      promise.then(feed => feed.close());\n    }\n  }\n}\n"]}