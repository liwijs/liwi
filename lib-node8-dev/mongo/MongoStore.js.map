{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":["MongoStore","constructor","connection","collectionName","keyPath","Error","_collection","getConnection","then","db","collection","catch","err","Promise","reject","connectionFailed","resolve","create","insertOne","object","_id","toString","created","Date","result","ops","ok","n","updateOne","replaceOne","updated","upsertOne","$set","upsert","replaceSeveral","objects","all","map","_partialUpdate","partialUpdate","Object","keys","some","key","partialUpdateByKey","commandResult","console","error","findByKey","partialUpdateOne","partialUpdateMany","criteria","updateMany","undefined","deleteByKey","removeOne","cursor","sort","find","findOne","limit","next"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,gGAAoC,6BAClC,yCAAQ,kCAAG,oCAAG,8BAAH,CAAH,EAAc,4CAAW,8BAAX,CAAd,EAAiC,qCAAI,8BAAJ,CAAjC,CAAR,CADkC,EAElC,6CAAY,2BAAZ,CAFkC,EAGlC,gDAAe,8BAAf,CAHkC,EAIlC,6CAAY,4BAAZ,CAJkC,EAKlC,gDAAe,8BAAf,CALkC,EAMlC,+CAAc,8BAAd,CANkC,CAApC;;IASqBA,U,GAAN,sCAAwD;;AAIrEC,cAAYC,UAAZ,EAAyCC,cAAzC,EAAiE;AAAA,0BAA3C,oDAA2C;;AAAA,8BAAV,8BAAU;;AAAA;;AAAA;;AAC/D,UAAMD,UAAN;;AAD+D,SAFjEE,OAEiE,GAFvD,KAEuD;;AAAA,mDAJb,oDAIa;;AAG/D,QAAI,CAACD,cAAL,EAAqB;AACnB,YAAM,IAAIE,KAAJ,CAAW,4BAA2BF,cAAe,GAArD,CAAN;AACD;;AAED,SAAKG,WAAL,GAAmBJ,WAChBK,aADgB,GAEhBC,IAFgB,CAEVC,EAAD;AAAA,oBAAG,uCAAH;;AAAA;;AAAA,aAAa,KAAKH,WAAL,GAAmBG,GAAGC,UAAH,CAAcP,cAAd,CAAhC;AAAA,KAFW,EAGhBQ,KAHgB,CAGVC,OAAQ,KAAKN,WAAL,GAAmBO,QAAQC,MAAR,CAAeF,GAAf,CAHjB,CAAnB;AAID;;AAED,MAAIF,UAAJ,GAAsC;AAAA,sDAAZ,+CAAY;;AACpC,QAAI,KAAKR,UAAL,CAAgBa,gBAApB,EAAsC;AACpC,aAAOF,QAAQC,MAAR,CAAe,IAAIT,KAAJ,CAAU,2BAAV,CAAf,CAAP;AACD;;AAED,WAAOQ,QAAQG,OAAR,CAAgB,KAAKV,WAArB,CAAP;AACD;;AAEDW,WAAkB;AAAA,sDAAR,oCAAQ;;AAChB,+BAAOJ,QAAQG,OAAR,EAAP;AACD;;AAEDE,YAAUC,MAAV,EAAmD;AAAA,sBAAnC,qCAAmC;;AAAA,sDAAZ,qCAAY;;AAAA;;AACjD,QAAI,CAACA,OAAOC,GAAZ,EAAiB;AACfD,aAAOC,GAAP,GAAa,wBAAeC,QAAf,EAAb;AACD;AACD,QAAI,CAACF,OAAOG,OAAZ,EAAqB;AACnBH,aAAOG,OAAP,GAAiB,IAAIC,IAAJ,EAAjB;AACD;;AAED,WAAO,KAAKb,UAAL,CACJF,IADI,CACCE,cAAcA,WAAWQ,SAAX,CAAqBC,MAArB,CADf,EAEJX,IAFI,CAEC,CAAC,EAAEgB,MAAF,EAAUtB,UAAV,EAAsBuB,GAAtB,EAAD,KAAiC;AACrC,UAAI,CAACD,OAAOE,EAAR,IAAcF,OAAOG,CAAP,KAAa,CAA/B,EAAkC;AAChC,cAAM,IAAItB,KAAJ,CAAU,gBAAV,CAAN;AACD;AACF,KANI,EAOJG,IAPI,CAOC,MAAMW,MAPP,CAAP;AAQD;;AAEDS,YAAUT,MAAV,EAAkB;AAChB,WAAO,KAAKU,UAAL,CAAgBV,MAAhB,CAAP;AACD;;AAEDU,aAAWV,MAAX,EAAoD;AAAA,uBAAnC,qCAAmC;;AAAA,sDAAZ,qCAAY;;AAAA;;AAClD,QAAI,CAACA,OAAOW,OAAZ,EAAqB;AACnBX,aAAOW,OAAP,GAAiB,IAAIP,IAAJ,EAAjB;AACD;;AAED,WAAO,KAAKb,UAAL,CACJF,IADI,CACCE,cAAcA,WAAWkB,SAAX,CAAqB,EAAER,KAAKD,OAAOC,GAAd,EAArB,EAA0CD,MAA1C,CADf,EAEJX,IAFI,CAEC,MAAMW,MAFP,CAAP;AAGD;;AAEDY,YAAUZ,MAAV,EAAmD;AAAA,uBAAnC,qCAAmC;;AAAA,sDAAZ,qCAAY;;AAAA;;AACjD,QAAI,CAACA,OAAOW,OAAZ,EAAqB;AACnBX,aAAOW,OAAP,GAAiB,IAAIP,IAAJ,EAAjB;AACD;;AAED,WAAO,KAAKb,UAAL,CACJF,IADI,CACCE,cACJA,WAAWkB,SAAX,CAAqB,EAAER,KAAKD,OAAOC,GAAd,EAArB,EAA0C,EAAEY,MAAMb,MAAR,EAA1C,EAA4D,EAAEc,QAAQ,IAAV,EAA5D,CAFG,EAIJzB,IAJI,CAIC,MAAMW,MAJP,CAAP;AAKD;;AAEDe,iBAAeC,OAAf,EAAuE;AAAA,uBAAjD,4BAAQ,qCAAR,CAAiD;;AAAA,sDAAnB,4BAAM,qCAAN,CAAmB;;AAAA;;AACrE,WAAOtB,QAAQuB,GAAR,CAAYD,QAAQE,GAAR,CAAYlB,UAAU,KAAKS,SAAL,CAAeT,MAAf,CAAtB,CAAZ,CAAP;AACD;;AAEDmB,iBAAeC,aAAf,EAAsC;AAAA,6BAAV,8BAAU;;AAAA;;AACpC;AACA;AACA,QAAIC,OAAOC,IAAP,CAAYF,aAAZ,EAA2BG,IAA3B,CAAgCC,OAAOA,IAAI,CAAJ,MAAW,GAAlD,CAAJ,EAA4D;AAC1D,aAAOJ,aAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAEP,MAAMO,aAAR,EAAP;AACD;AACF;;AAED,QAAMK,kBAAN,CAAyBD,GAAzB,EAAmCJ,aAAnC,EAAmF;AAAA,mBAAvD,2BAAuD;;AAAA,8BAAnC,qCAAmC;;AAAA,iFAAZ,qCAAY,EAApB,qCAAQ,qCAAR,CAAoB;;AAAA;;AAAA;;AACjFA,+CAAgB,KAAKD,cAAL,CAAoBC,aAApB,CAAhB;AACA,UAAM7B,aAAa,MAAM,KAAKA,UAA9B;AACA,0BAAmB,4BAAnB,SAAoD,MAAMA,WAAWkB,SAAX,CACxD,EAAER,KAAKuB,GAAP,EADwD,EAExDJ,aAFwD,CAA1D;AAIA,QAAI,CAACM,cAAcrB,MAAd,CAAqBE,EAA1B,EAA8B;AAC5BoB,cAAQC,KAAR,CAAcF,aAAd;AACA,YAAM,IAAIxC,KAAJ,CAAU,eAAV,CAAN;AACD;AACD,8BAAO,KAAK2C,SAAL,CAAeL,GAAf,CAAP;AACD;;AAEDM,mBAAiB9B,MAAjB,EAAqCoB,aAArC,EAAqF;AAAA,uBAA9D,qCAA8D;;AAAA,8BAAnC,qCAAmC;;AAAA,sDAAZ,qCAAY;;AAAA;;AAAA;;AACnFA,+CAAgB,KAAKD,cAAL,CAAoBC,aAApB,CAAhB;AACA,WAAO,KAAKK,kBAAL,CAAwBzB,OAAOC,GAA/B,EAAoCmB,aAApC,CAAP;AACD;;AAEDW,oBAAkBC,QAAlB,EAA4BZ,aAA5B,EAAsE;AAAA,8BAA7B,qCAA6B;;AAAA,sDAAN,4BAAM;;AAAA;;AACpEA,+CAAgB,KAAKD,cAAL,CAAoBC,aAApB,CAAhB;AACA,WAAO,KAAK7B,UAAL,CACJF,IADI,CACCE,cAAcA,WAAW0C,UAAX,CAAsBD,QAAtB,EAAgCZ,aAAhC,CADf,EAEJ/B,IAFI,CAEC,MAAO6C,SAFR,CAAP,2CAFoE,CAIzC;AAC5B;;AAEDC,cAAYX,GAAZ,EAAqC;AAAA,oBAAtB,2BAAsB;;AAAA,uDAAN,4BAAM;;AAAA;;AACnC,WAAO,KAAKjC,UAAL,CACJF,IADI,CACCE,cAAcA,WAAW6C,SAAX,CAAqB,EAAEnC,KAAKuB,GAAP,EAArB,CADf,EAEJnC,IAFI,CAEC,MAAM6C,SAFP,CAAP;AAGD;;AAEDG,SAAOL,QAAP,EAA0BM,IAA1B,EAA2E;AAAA,wBAA5D,+BAAG,8BAAH,CAA4D;;AAAA,oBAA7C,+BAAG,8BAAH,CAA6C;;AAAA,uDAAzB,iDAAY,qCAAZ,CAAyB;;AAAA;;AAAA;;AACzE,WAAO,KAAK/C,UAAL,CACJF,IADI,CACCE,cAAcA,WAAWgD,IAAX,CAAgBP,QAAhB,CADf,EAEJ3C,IAFI,CAECiD,SAASD,UAAUA,OAAOC,IAAP,CAAYA,IAAZ,CAAnB,CAFD,EAGJjD,IAHI,CAGCgD,UAAU,0BAAgB,IAAhB,EAAsBA,MAAtB,CAHX,CAAP;AAID;;AAEDR,YAAUL,GAAV,EAA0C;AAAA,oBAA7B,2BAA6B;;AAAA,uDAAb,+BAAC,qCAAD,CAAa;;AAAA;;AACxC,WAAO,KAAKgB,OAAL,CAAa,EAAEvC,KAAKuB,GAAP,EAAb,CAAP;AACD;;AAEDgB,UAAQR,QAAR,EAA0BM,IAA1B,EAA+D;AAAA,yBAA/C,8BAA+C;;AAAA,qBAAjC,+BAAG,8BAAH,CAAiC;;AAAA,uDAAb,+BAAC,qCAAD,CAAa;;AAAA;;AAAA;;AAC7D,WAAO,KAAK/C,UAAL,CACJF,IADI,CACCE,cAAcA,WAAWgD,IAAX,CAAgBP,QAAhB,CADf,EAEJ3C,IAFI,CAECiD,SAASD,UAAUA,OAAOC,IAAP,CAAYA,IAAZ,CAAnB,CAFD,EAGJjD,IAHI,CAGCgD,UAAUA,OAAOI,KAAP,CAAa,CAAb,EAAgBC,IAAhB,EAHX,CAAP;AAID;AAvIoE,C;kBAAlD7D,U","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\nimport type { InsertType, UpdateType, ResultType } from '../types';\n\ntype MongoUpdateCommandResultType = {\n  result: {| n: number, nModified: number, ok: number |},\n  connection: any,\n  modifiedCount: number,\n  upsertedId: null,\n  upsertedCount: number,\n  matchedCount: number,\n};\n\nexport default class MongoStore extends AbstractStore<MongoConnection> {\n  _collection: Collection | Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection\n      .getConnection()\n      .then((db: Db) => (this._collection = db.collection(collectionName)))\n      .catch(err => (this._collection = Promise.reject(err)));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  create(): Promise {\n    return Promise.resolve();\n  }\n\n  insertOne(object: InsertType): Promise<ResultType> {\n    if (!object._id) {\n      object._id = new ObjectID().toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.insertOne(object))\n      .then(({ result, connection, ops }) => {\n        if (!result.ok || result.n !== 1) {\n          throw new Error('Fail to insert');\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection => collection.updateOne({ _id: object._id }, object))\n      .then(() => object);\n  }\n\n  upsertOne(object: InsertType): Promise<ResultType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n      .then(collection =>\n        collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true }),\n      )\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<InsertType>): Promise<Array<ResultType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n    // https://docs.mongodb.com/manual/reference/operator/update/\n    // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  async partialUpdateByKey(key: any, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    const collection = await this.collection;\n    const commandResult: MongoUpdateCommandResultType = await collection.updateOne(\n      { _id: key },\n      partialUpdate,\n    );\n    if (!commandResult.result.ok) {\n      console.error(commandResult);\n      throw new Error('Update failed');\n    }\n    return this.findByKey(key);\n  }\n\n  partialUpdateOne(object: ResultType, partialUpdate: UpdateType): Promise<ResultType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: UpdateType): Promise<void> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n      .then(collection => collection.updateMany(criteria, partialUpdate))\n      .then(res => undefined); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.collection\n      .then(collection => collection.removeOne({ _id: key }))\n      .then(() => undefined);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ResultType>> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any): Promise<?ResultType> {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<?ResultType> {\n    return this.collection\n      .then(collection => collection.find(criteria))\n      .then(sort && (cursor => cursor.sort(sort)))\n      .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}