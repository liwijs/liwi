{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":["logger","WebsocketStore","constructor","websocket","restName","keyPath","Error","createQuery","key","debug","emit","type","args","connection","isDisconnected","json","then","result","emitSubscribe","on","off","insertOne","object","updateOne","updateSeveral","objects","partialUpdateByKey","partialUpdate","partialUpdateOne","partialUpdateMany","criteria","deleteByKey","deleteOne","cursor","sort","Promise","resolve","findByKey","findOne","id"],"mappings":"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","file":"WebsocketStore.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\nimport { encode, decode } from '../extended-json';\nimport Query from './Query';\n\nconst logger = new Logger('liwi:websocket-client');\n\ntype WebsocketConnectionType = {\n  emit: Function,\n  isConnected: Function,\n};\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnectionType> {\n  keyPath = 'id';\n\n  constructor(websocket: WebsocketConnectionType, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    logger.debug('createQuery', { key });\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    logger.debug('emit', { type, args });\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection\n      .emit('rest', {\n        type,\n        restName: this.restName,\n        json: encode(args),\n      })\n      .then(result => result && decode(result));\n  }\n\n  emitSubscribe(type, ...args) {\n    const emit = () => this.emit(type, ...args);\n    return emit().then(result => {\n      this.connection.on('reconnect', emit);\n      return () => this.connection.off('reconnect', emit);\n    });\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise<void> {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise<void> {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise<void> {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}