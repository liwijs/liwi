{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":[],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n  _collection: Collection|Promise<Collection>;\n  keyPath = '_id';\n\n  constructor(connection: MongoConnection, collectionName: string) {\n    super(connection);\n\n    if (!collectionName) {\n      throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n    }\n\n    this._collection = connection.getConnection()\n            .then((db: Db) => this._collection = db.collection(collectionName));\n  }\n\n  get collection(): Promise<Collection> {\n    if (this.connection.connectionFailed) {\n      return Promise.reject(new Error('MongoDB connection failed'));\n    }\n\n    return Promise.resolve(this._collection);\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object._id) {\n      object._id = (new ObjectID()).toString();\n    }\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.collection\n            .then(collection => collection.insertOne(object))\n            .then(({ result, connection, ops }) => {\n              if (!result.ok || result.n !== 1) {\n                throw new Error('Fail to insert');\n              }\n            })\n            .then(() => object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n            .then(collection => collection.updateOne({ _id: object._id }, object))\n            .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.collection\n            .then(collection => (\n              collection.updateOne({ _id: object._id }, { $set: object }, { upsert: true })\n            ))\n            .then(() => object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.updateOne(object)));\n  }\n\n  _partialUpdate(partialUpdate: Object) {\n        // https://docs.mongodb.com/manual/reference/operator/update/\n        // if has a mongo operator\n    if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n      return partialUpdate;\n    } else {\n      return { $set: partialUpdate };\n    }\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n            .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.partialUpdateByKey(object._id, partialUpdate)\n            .then(res => this.findByKey(object._id));\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    partialUpdate = this._partialUpdate(partialUpdate);\n    return this.collection\n            .then(collection => collection.updateMany(criteria, partialUpdate))\n            .then(res => null); // TODO return updated object\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.collection\n            .then(collection => collection.removeOne({ _id: key }))\n            .then(() => null);\n  }\n\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n    return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => new MongoCursor(this, cursor));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ _id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => cursor.limit(1).next());\n  }\n}\n"]}