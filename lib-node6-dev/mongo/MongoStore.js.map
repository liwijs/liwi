{"version":3,"sources":["../../src/mongo/MongoStore.js"],"names":[],"mappings":"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","file":"MongoStore.js","sourcesContent":["import { ObjectID } from 'mongodb';\nimport Collection from 'mongodb/lib/collection';\nimport Db from 'mongodb/lib/db';\nimport MongoConnection from './MongoConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport MongoCursor from './MongoCursor';\n\nexport default class MongoStore<ModelType> extends AbstractStore<MongoConnection> {\n    _collection: Collection|Promise<Collection>;\n    keyPath = '_id';\n\n    constructor(connection: MongoConnection, collectionName: string) {\n        super(connection);\n\n        if (!collectionName) {\n            throw new Error(`Invalid collectionName: \"${collectionName}\"`);\n        }\n\n        this._collection = connection.getConnection()\n            .then((db: Db) => this._collection = db.collection(collectionName));\n    }\n\n    get collection(): Promise<Collection> {\n        if (this.connection.connectionFailed) {\n            return Promise.reject(new Error('MongoDB connection failed'));\n        }\n\n        return Promise.resolve(this._collection);\n    }\n\n    insertOne(object: ModelType): Promise<ModelType> {\n        if (!object._id) {\n            object._id = (new ObjectID()).toString();\n        }\n        if (!object.created) {\n            object.created = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.insertOne(object))\n            .then(({ result, connection, ops }) => {\n                if (!result.ok || result.n !== 1) {\n                    throw new Error('Fail to insert');\n                }\n            })\n            .then(() => object);\n    }\n\n    updateOne(object: ModelType): Promise<ModelType> {\n        if (!object.updated) {\n            object.updated = new Date();\n        }\n\n        return this.collection\n            .then(collection => collection.updateOne({ _id: object._id }, object))\n            .then(() => object);\n    }\n\n    updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n        return Promise.all(objects.map(object => this.updateOne(object)));\n    }\n\n    _partialUpdate(partialUpdate: Object) {\n        // https://docs.mongodb.com/manual/reference/operator/update/\n        // if has a mongo operator\n        if (Object.keys(partialUpdate).some(key => key[0] === '$')) {\n            return partialUpdate;\n        } else {\n            return { $set: partialUpdate };\n        }\n    }\n\n    partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.collection\n            .then(collection => collection.updateOne({ _id: key }, partialUpdate));\n    }\n\n    partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.partialUpdateByKey(object._id, partialUpdate)\n            .then(res => this.findByKey(object._id));\n    }\n\n    partialUpdateMany(criteria, partialUpdate: Object): Promise {\n        partialUpdate = this._partialUpdate(partialUpdate);\n        return this.collection\n            .then(collection => collection.updateMany(criteria, partialUpdate))\n            .then(res => null); // TODO return updated object\n    }\n\n    deleteByKey(key: any): Promise {\n        return this.collection\n            .then(collection => collection.removeOne({ _id: key }))\n            .then(() => null);\n    }\n\n\n    cursor(criteria: ?Object, sort: ?Object): Promise<MongoCursor<ModelType>> {\n        return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => new MongoCursor(this, cursor));\n    }\n\n    findByKey(key: any) {\n        return this.findOne({ _id: key });\n    }\n\n    findOne(criteria: Object, sort: ?Object): Promise<Object> {\n        return this.collection\n            .then(collection => collection.find(criteria))\n            .then(sort && (cursor => cursor.sort(sort)))\n            .then(cursor => cursor.limit(1).next());\n    }\n}\n"]}