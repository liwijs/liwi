{"version":3,"sources":["../../src/rethinkdb/RethinkStore.js"],"names":["RethinkStore","constructor","connection","tableName","keyPath","_tableName","r","_connection","table","createQuery","query","_query","criteria","sort","filter","Object","keys","forEach","key","orderBy","desc","create","tableCreate","insertOne","object","created","Date","insert","then","inserted","generated_keys","generatedKeys","Error","id","updateOne","replaceOne","updated","get","replace","upsertOne","conflict","run","replaceSeveral","objects","Promise","all","map","partialUpdateByKey","partialUpdate","update","partialUpdateOne","returnChanges","res","changes","new_val","partialUpdateMany","deleteByKey","delete","cursor","findAll","findByKey","findOne","next","catch"],"mappings":"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","file":"RethinkStore.js","sourcesContent":["import RethinkConnection from './RethinkConnection';\nimport AbstractStore from '../store/AbstractStore';\nimport Query from './Query';\n// import RethinkCursor from './RethinkCursor';\n\nexport default class RethinkStore<ModelType> extends AbstractStore<RethinkConnection> {\n  tableName: string;\n  keyPath = 'id';\n\n  constructor(connection: RethinkConnection, tableName: string) {\n    super(connection);\n    this._tableName = tableName;\n    this.r = this.connection._connection;\n  }\n\n  table() {\n    return this.r.table(this._tableName);\n  }\n\n  createQuery(query) {\n    return new Query(this, query);\n  }\n\n  query() {\n    return this.table();\n  }\n\n  _query(criteria: ?Object, sort: ?Object) {\n    const query = this.table();\n\n    if (criteria) {\n      query.filter(criteria);\n    }\n\n    if (sort) {\n      Object.keys(sort).forEach((key) => {\n        if (sort[key] === -1) {\n          query.orderBy(this.r.desc(key));\n        } else {\n          query.orderBy(key);\n        }\n      });\n    }\n\n    return query;\n  }\n\n  create(): Promise {\n    return this.r.tableCreate(this._tableName);\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    if (!object.created) {\n      object.created = new Date();\n    }\n\n    return this.table().insert(object)\n      .then(({ inserted, generated_keys: generatedKeys }) => {\n        if (inserted !== 1) throw new Error('Could not insert');\n        if (object.id == null) {\n          object.id = generatedKeys[0];\n        }\n      })\n      .then(() => object);\n  }\n\n  updateOne(object) {\n    return this.replaceOne(object);\n  }\n\n  replaceOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.table().get(object.id).replace(object)\n      .then(() => object);\n  }\n\n  upsertOne(object: ModelType): Promise<ModelType> {\n    if (!object.updated) {\n      object.updated = new Date();\n    }\n\n    return this.table().insert(object, { conflict: 'replace' }).run()\n      .then(() => object);\n  }\n\n  replaceSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return Promise.all(objects.map(object => this.replaceOne(object)));\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.table().get(key).update(partialUpdate).run();\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.table().get(object.id).update(partialUpdate, { returnChanges: true })\n      .then(res => res.changes.new_val);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.table().filter(criteria).update(partialUpdate).run();\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.table().get(key).delete().run();\n  }\n\n  cursor(criteria: ?Object, sort: ?Object) { // : Promise<RethinkCursor<ModelType>> {\n    throw new Error('Not Supported yet, please use query().run({ cursor: true })');\n  }\n\n  findAll(): Promise {\n    throw new Error('Not supported, please use query().run()');\n  }\n\n  findByKey(key: any) {\n    return this.table().get(key).run();\n  }\n\n  findOne(query): Promise<?Object> {\n    return query.run({ cursor: true }).then(cursor => cursor.next().catch(err => null));\n  }\n}\n"]}