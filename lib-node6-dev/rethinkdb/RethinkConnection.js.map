{"version":3,"sources":["../../src/rethinkdb/RethinkConnection.js"],"names":["logger","RethinkConnection","constructor","config","Map","has","set","Error","connect","host","get","port","db","options","info","_connection","buffer","max","getPoolMaster","on","healthy","getConnection","Promise","resolve","reject","warn","close","drain","then","_connecting"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,SAAS,gCAAW,8BAAX,CAAf;;AAEe,MAAMC,iBAAN,sCAAmD;;AAKhEC,cAAYC,MAAZ,EAAyB;AAAA,YAAbA,MAAa,EAALC,GAAK;;AACvB;;AAEA,QAAI,CAACD,OAAOE,GAAP,CAAW,MAAX,CAAL,EAAyB;AACvBF,aAAOG,GAAP,CAAW,MAAX,EAAmB,WAAnB;AACD;AACD,QAAI,CAACH,OAAOE,GAAP,CAAW,MAAX,CAAL,EAAyB;AACvBF,aAAOG,GAAP,CAAW,MAAX,EAAmB,OAAnB;AACD;AACD,QAAI,CAACH,OAAOE,GAAP,CAAW,UAAX,CAAL,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,SAAKC,OAAL,CAAa;AACXC,YAAMN,OAAOO,GAAP,CAAW,MAAX,CADK;AAEXC,YAAMR,OAAOO,GAAP,CAAW,MAAX,CAFK;AAGXE,UAAIT,OAAOO,GAAP,CAAW,UAAX;AAHO,KAAb;AAKD;;AAEDF,UAAQK,OAAR,EAAyB;AAAA,YAAjBA,OAAiB;;AACvBb,WAAOc,IAAP,CAAY,YAAZ,EAA0BD,OAA1B;;AAEA,SAAKE,WAAL,GAAmB,0CACdF,OADc;AAEjBG,cAAQ,EAFS;AAGjBC,WAAK;AAHY,OAAnB;;AAMA,SAAKF,WAAL,CAAiBG,aAAjB,GAAiCC,EAAjC,CAAoC,SAApC,EAAgDC,OAAD,IAAa;AAC1D,UAAIA,YAAY,IAAhB,EAAsB;AACpB,aAAKC,aAAL,GAAqB,MAAMC,QAAQC,OAAR,CAAgB,KAAKR,WAArB,CAA3B;AACAf,eAAOc,IAAP,CAAY,SAAZ;AACD,OAHD,MAGO;AACL,aAAKO,aAAL,GAAqB,MAAMC,QAAQE,MAAR,CAAe,IAAIjB,KAAJ,CAAU,wBAAV,CAAf,CAA3B;AACAP,eAAOyB,IAAP,CAAY,aAAZ;AACD;AACF,KARD;;AAUA,SAAKJ,aAAL,GAAqB,MAAMC,QAAQC,OAAR,CAAgB,KAAKR,WAArB,CAA3B;AACD;;AAEDM,kBAAyB;AAAA;AACvB,YAAM,IAAId,KAAJ,CAAU,gBAAV,CAAN;AADuB;AAExB;;AAEDmB,UAAQ;AACN,SAAKL,aAAL,GAAqB,MAAMC,QAAQE,MAAR,CAAe,IAAIjB,KAAJ,CAAU,mBAAV,CAAf,CAA3B;AACA,QAAI,KAAKQ,WAAT,EAAsB;AACpB,aAAO,KAAKA,WAAL,CAAiBG,aAAjB,GAAiCS,KAAjC,GAAyCC,IAAzC,CAA8C,MAAM;AACzD5B,eAAOc,IAAP,CAAY,mBAAZ;AACA,aAAKC,WAAL,GAAmB,IAAnB;AACD,OAHM,CAAP;AAID,KALD,MAKO,IAAI,KAAKc,WAAT,EAAsB;AAC3B,aAAO,KAAKR,aAAL,GAAqBO,IAArB,CAA0B,MAAM,KAAKF,KAAL,EAAhC,CAAP;AACD;AACF;AA7D+D;kBAA7CzB,iB","file":"RethinkConnection.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport rethinkDB from 'rethinkdbdash';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi.mongo.RethinkConnection');\n\nexport default class RethinkConnection extends AbstractConnection {\n  _connection: Object|null;\n  _connecting: boolean|null;\n  connectionFailed: boolean;\n\n  constructor(config: Map) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '28015');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    this.connect({\n      host: config.get('host'),\n      port: config.get('port'),\n      db: config.get('database'),\n    });\n  }\n\n  connect(options: Object) {\n    logger.info('connecting', options);\n\n    this._connection = rethinkDB({\n      ...options,\n      buffer: 20,\n      max: 100,\n    });\n\n    this._connection.getPoolMaster().on('healthy', (healthy) => {\n      if (healthy === true) {\n        this.getConnection = () => Promise.resolve(this._connection);\n        logger.info('healthy');\n      } else {\n        this.getConnection = () => Promise.reject(new Error('Connection not healthy'));\n        logger.warn('not healthy');\n      }\n    });\n\n    this.getConnection = () => Promise.resolve(this._connection);\n  }\n\n  getConnection(): Promise {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection.getPoolMaster().drain().then(() => {\n        logger.info('connection closed');\n        this._connection = null;\n      });\n    } else if (this._connecting) {\n      return this.getConnection().then(() => this.close());\n    }\n  }\n}\n"]}