{"version":3,"sources":["../../src/rethinkdb/Query.js"],"names":["SubscribeReturnType","cancel","stop","Query","fetch","callback","queryCallback","store","query","run","then","fetchAndSubscribe","args","subscribe","Error","_subscribe","_includeInitial","length","_subscribers","Set","add","_feed","promise","changes","includeInitial","feed","_promise","each","remove","_checkFeedClose","closeFeed","close"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;MAEKA,mB;AACHC,Q;AACAC,M;;;AAGa,MAAMC,KAAN,iCAAgD;AAC7DC,QAAMC,QAAN,EAAoC;AAAA,YAA9BA,QAA8B;;AAAA;AAClC,aAAO,KAAKC,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuCC,GAAvC,GAA6CC,IAA7C,CAAkDL,QAAlD,CAAP;AADkC;AAEnC;;AAEDM,oBAAkBN,QAAlB,EAA+C;AAAA,YAA7BA,QAA6B;;AAAA,sCAANO,IAAM;AAANA,UAAM;AAAA;;AAC7C,WAAO,KAAKC,SAAL,CAAeR,QAAf,EAAyB,IAAzB,EAA+BO,IAA/B,CAAP;AACD;;AAEDC,YAAUR,QAAV,EAAuC;AAAA,YAA7BA,QAA6B;;AACrC,UAAM,IAAIS,KAAJ,CAAU,gCAAV,CAAN;;AADqC,uCAANF,IAAM;AAANA,UAAM;AAAA;;AAErC,WAAO,KAAKC,SAAL,CAAeR,QAAf,EAAyB,KAAzB,EAAgCO,IAAhC,CAAP;AACD;;AAEDG,aAAWV,QAAX,EAA+F;AAAA,QAAhEW,eAAgE,yDAA9C,KAA8C;;AAAA,QAAvCJ,IAAuC;;AAAA,YAApFP,QAAoF;;AAAA,YAAvCO,IAAuC;;AAAA;AAC7F,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACA,UAAIF,KAAKK,MAAL,KAAgB,CAAhB,KAAsB,CAAC,KAAKC,YAAN,IAAsB,KAAKA,YAAL,CAAkBD,MAAlB,KAA6B,CAAzE,CAAJ,EAAiF;AAC/E,YAAI,CAAC,KAAKC,YAAV,EAAwB,KAAKA,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACxB,aAAKD,YAAL,CAAkBE,GAAlB,CAAsBf,QAAtB;AACD;;AAED,UAAIgB,KAAJ;AACA,UAAIC,UACF,KAAKhB,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuCe,OAAvC,CAA+C,EAAEC,gBAAgBR,eAAlB,EAA/C,EACCN,IADD,CACMe,QAAQ;AACZ,YAAIb,KAAKK,MAAL,KAAgB,CAApB,EAAuB;AACrBI,kBAAQI,IAAR;AACA,eAAKJ,KAAL,GAAaI,IAAb;AACA,iBAAO,KAAKC,QAAZ;AACD;AACDD,aAAKE,IAAL,CAAUtB,QAAV;AACD,OARD,CADF;;AAWA,UAAIO,KAAKK,MAAL,KAAgB,CAApB,EAAuB,KAAKS,QAAL,GAAgBJ,OAAhB;;AAEvB,YAAMpB,OAAO,MAAM;AACjB,YAAIU,KAAKK,MAAL,KAAgB,CAApB,EAAuB;AACrB,eAAKC,YAAL,CAAkBU,MAAlB,CAAyBvB,QAAzB;AACA,eAAKwB,eAAL;AACD,SAHD,MAGO;AACL,eAAKC,SAAL,CAAeT,KAAf,EAAsBC,OAAtB;AACD;AACF,OAPD;;AASA,aAAO,EAAEpB,IAAF,EAAQD,QAAQC,IAAhB,EAAP;AA9B6F,8BAApBF,mBAAoB;AA+B9F;;AAED6B,oBAAkB;AAChB,QAAI,CAAC,KAAKX,YAAN,IAAsB,KAAKA,YAAL,CAAkBD,MAAlB,KAA6B,CAAvD,EAA0D;AACxD,WAAKa,SAAL,CAAe,KAAKT,KAApB,EAA2B,KAAKK,QAAhC;AACD;AACF;;AAEDI,YAAUL,IAAV,EAAgBH,OAAhB,EAAyB;AACvB,QAAIG,IAAJ,EAAU;AACRA,WAAKM,KAAL;AACD,KAFD,MAEO,IAAIT,OAAJ,EAAa;AAClBA,cAAQZ,IAAR,CAAa,MAAMe,KAAKM,KAAL,EAAnB;AACD;AACF;AA3D4D;kBAA1C5B,K","file":"Query.js","sourcesContent":["import AbstractQuery from '../store/AbstractQuery';\nimport RethinkStore from './RethinkStore';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nexport default class Query extends AbstractQuery<RethinkStore> {\n  fetch(callback: ?Function): Promise {\n    return this.queryCallback(this.store.query()).run().then(callback);\n  }\n\n  fetchAndSubscribe(callback: Function, ...args) {\n    return this.subscribe(callback, true, args);\n  }\n\n  subscribe(callback: Function, ...args) {\n    throw new Error('Will be implemented next minor');\n    return this.subscribe(callback, false, args);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    throw new Error('Will be implemented next minor');\n    if (args.length === 0 && (!this._subscribers || this._subscribers.length === 0)) {\n      if (!this._subscribers) this._subscribers = new Set();\n      this._subscribers.add(callback);\n    }\n\n    let _feed;\n    let promise =\n      this.queryCallback(this.store.query()).changes({ includeInitial: _includeInitial })\n      .then(feed => {\n        if (args.length === 0) {\n          _feed = feed;\n          this._feed = feed;\n          delete this._promise;\n        }\n        feed.each(callback);\n      });\n\n    if (args.length === 0) this._promise = promise;\n\n    const stop = () => {\n      if (args.length === 0) {\n        this._subscribers.remove(callback);\n        this._checkFeedClose();\n      } else {\n        this.closeFeed(_feed, promise);\n      }\n    };\n\n    return { stop, cancel: stop };\n  }\n\n  _checkFeedClose() {\n    if (!this._subscribers || this._subscribers.length === 0) {\n      this.closeFeed(this._feed, this._promise);\n    }\n  }\n\n  closeFeed(feed, promise) {\n    if (feed) {\n      feed.close();\n    } else if (promise) {\n      promise.then(() => feed.close());\n    }\n  }\n}\n"]}