{"version":3,"sources":["../../src/react-redux/redux.js"],"names":["createSubscribeAction","subscribeReducer","actionName","change","ChangeType","type","state","old_offset","new_offset","old_val","new_val","oldOffset","newOffset","oldVal","newVal","copy","slice","splice","index","findIndex","x","id","Error","JSON","stringify","push"],"mappings":"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","file":"redux.js","sourcesContent":["import deepEqual from 'deep-equal';\n// eslint-disable-next-line\nimport { createAction as alpReactReduxCreateAction } from 'alp-react-redux';\n\nexport function createSubscribeAction(actionName: string) {\n  return alpReactReduxCreateAction(actionName, (change: Object) => ({ change }));\n}\n\ntype ChangeType = {\n  type: ?string,\n  state: ?string,\n  old_offset: ?number,\n  new_offset: ?number,\n  old_val: ?Object,\n  new_val: ?Object,\n}\n\n// https://github.com/rethinkdb/horizon/blob/next/client/src/ast.js\nexport function subscribeReducer(state: Array<Object>, { change }: { change: ChangeType }) {\n  const {\n    type,\n    old_offset: oldOffset,\n    new_offset: newOffset,\n    old_val: oldVal,\n    new_val: newVal,\n  } = change;\n\n  const copy = () => state = state.slice();\n\n  switch (type) {\n    case 'remove':\n    case 'uninitial': {\n      copy();\n      // Remove old values from the array\n      if (oldOffset != null) {\n        state.splice(oldOffset, 1);\n      } else {\n        const index = state.findIndex(x => deepEqual(x.id, oldVal.id));\n        if (index === -1) {\n          // Programming error. This should not happen\n          throw new Error(`change couldn't be applied: ${JSON.stringify(change)}`);\n        }\n        state.splice(index, 1);\n      }\n      break;\n    }\n\n    case 'initial': {\n      copy();\n\n      if (newOffset != null) {\n        state[newOffset] = newVal;\n      } else {\n        // If we don't have an offset, find the old val and\n        // replace it with the new val\n        const index = state.findIndex(x => deepEqual(x.id, newVal.id));\n        if (index === -1) {\n          state.push(newVal);\n        } else {\n          state[index] = newVal;\n        }\n      }\n      break;\n    }\n\n    case 'add': {\n      copy();\n      // Add new values to the array\n      if (newOffset != null) {\n        // If we have an offset, put it in the correct location\n        state.splice(newOffset, 0, newVal);\n      } else {\n        // otherwise for unordered results, push it on the end\n        state.push(newVal);\n      }\n      break;\n    }\n\n    case 'change': {\n      copy();\n\n      if (oldOffset === newOffset) {\n        state[newOffset] = newVal;\n        return state;\n      }\n\n      // Modify in place if a change is happening\n      if (oldOffset != null) {\n        // Remove the old document from the results\n        state.splice(oldOffset, 1);\n      }\n\n      if (newOffset != null) {\n        // Splice in the new val if we have an offset\n        state.splice(newOffset, 0, newVal);\n      } else {\n        // If we don't have an offset, find the old val and\n        // replace it with the new val\n        const index = state.findIndex(x => deepEqual(x.id, oldVal.id));\n        if (index === -1) {\n          // indicates a programming bug. The server gives us the\n          // ordering, so if we don't find the id it means something is\n          // buggy.\n          throw new Error(`change couldn't be applied: ${JSON.stringify(change)}`);\n        } else {\n          state[index] = newVal;\n        }\n      }\n      break;\n    }\n    case 'state': {\n      // This gets hit if we have not emitted yet, and should\n      // result in an empty array being output.\n      break;\n    }\n    default:\n      throw new Error(\n        `unrecognized 'type' field from server ${JSON.stringify(change)}`);\n  }\n  return state;\n}\n"]}