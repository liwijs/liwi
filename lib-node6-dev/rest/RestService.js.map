{"version":3,"sources":["../../src/rest/RestService.js"],"names":["RestService","constructor","restResources","Map","addRestResource","key","restResource","set","get","Error","createCursor","connectedUser","criteria","sort","limit","cursor","store"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAEe,MAAMA,WAAN,CAAkB;AAC/BC,cAAYC,aAAZ,EAAgC;AAAA,YAApBA,aAAoB,EAALC,GAAK;;AAC9B,SAAKD,aAAL,GAAqBA,aAArB;AACD;;AAEDE,kBAAgBC,GAAhB,EAA6BC,YAA7B,EAA2C;AAAA,YAA3BD,GAA2B;;AACzC,SAAKH,aAAL,CAAmBK,GAAnB,CAAuBF,GAAvB,EAA4BC,YAA5B;AACD;;AAEDE,MAAIH,GAAJ,EAAiB;AAAA,YAAbA,GAAa;;AACf,UAAMC,eAAe,KAAKJ,aAAL,CAAmBM,GAAnB,CAAuBH,GAAvB,CAArB;AACA,QAAI,CAACC,YAAL,EAAmB,MAAM,IAAIG,KAAJ,CAAW,4BAA0BJ,GAAI,IAAzC,CAAN;AACnB,WAAOC,YAAP;AACD;;AAEKI,cAAN,CACEJ,YADF,EAEEK,aAFF,EAGE,EAAEC,QAAF,EAAYC,IAAZ,EAAkBC,KAAlB,EAHF,EAIW;AAAA,YAFTH,aAES;;AAAA;AADPC,cACO;AADGC,UACH;AADSC;AACT;AADoBF,cACpB;AADuCC,UACvC;AADsDC,WACtD;AAAA;;AAAA;AACTF,iBAAWN,aAAaM,QAAb,CAAsBD,aAAtB,EAAqCC,cAArC,CAAX;AACAC,aAAOP,aAAaO,IAAb,CAAkBF,aAAlB,EAAiCE,IAAjC,CAAP;AACA,YAAME,SAAS,MAAMT,aAAaU,KAAb,CAAmBD,MAAnB,CAA0BH,QAA1B,EAAoCC,IAApC,CAArB;AACAC,cAAQR,aAAaQ,KAAb,CAAmBA,KAAnB,CAAR;AACA,UAAIA,KAAJ,EAAWC,OAAOD,KAAP,CAAaH,aAAb,EAA4BG,KAA5B;AACX,aAAO,yBAAeR,YAAf,EAA6BK,aAA7B,EAA4CI,MAA5C,CAAP;AANS;AAOV;AA1B8B;kBAAZf,W","file":"RestService.js","sourcesContent":["import RestCursor from './RestCursor';\n\nexport default class RestService {\n  constructor(restResources: Map) {\n    this.restResources = restResources;\n  }\n\n  addRestResource(key: string, restResource) {\n    this.restResources.set(key, restResource);\n  }\n\n  get(key: string) {\n    const restResource = this.restResources.get(key);\n    if (!restResource) throw new Error(`Invalid rest resource: \"${key}\"`);\n    return restResource;\n  }\n\n  async createCursor(\n    restResource,\n    connectedUser: ?Object,\n    { criteria, sort, limit }: { criteria: ?Object, sort: ?Object, limit: ?number },\n  ): Promise {\n    criteria = restResource.criteria(connectedUser, criteria || {});\n    sort = restResource.sort(connectedUser, sort);\n    const cursor = await restResource.store.cursor(criteria, sort);\n    limit = restResource.limit(limit);\n    if (limit) cursor.limit(connectedUser, limit);\n    return new RestCursor(restResource, connectedUser, cursor);\n  }\n}\n"]}