{"version":3,"sources":["../src/types.js"],"names":[],"mappings":";;;;;;MAAY,e,WAAA,e;aAAA,e;gCACD,c,OAAP,K,kBAEA,K,gCAEA,I,gCAEA,U,gCAEA,K,gCAEA,K,gCAEA,M,gCAEA,M,gCAEA,W,gCAEA,O;;;;0BAnBQ,e;;mBAAA,e;;;WAAA,e;;;MAsBA,c,WAAA,c;aAAA,c;6CACR,S,gCAEA,S,gCAEA,S,gCAEA,a,gCAEA,kB,gCAEA,gB,gCAEA,iB,gCAEA,W,gCAEA,M,gCAEA,S,gCAEA,O;;;;0BArBQ,c;;mBAAA,c;;;WAAA,c","file":"types.js","sourcesContent":["export type CursorInterface<ModelType> = {\n    store: StoreInterface,\n\n    close(): Promise|void,\n\n    next(): Promise<any>,\n\n    nextResult(): Promise<any>,\n\n    limit(newLimit: number): Promise,\n\n    count(applyLimit: ?boolean): Promise,\n\n    result(): Promise<ModelType>,\n\n    delete(): Promise,\n\n    forEachKeys(callback: Function): Promise,\n\n    forEach(callback: Function): Promise,\n};\n\nexport type StoreInterface<ModelType> = {\n    insertOne(object: ModelType): Promise<ModelType>,\n\n    updateOne(object: ModelType): Promise<ModelType>,\n\n    upsertOne(object: ModelType): Promise<ModelType>,\n\n    updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>>,\n\n    partialUpdateByKey(key: any, partialUpdate: Object): Promise<ModelType>,\n\n    partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType>,\n\n    partialUpdateMany(criteria: Object, partialUpdate: Object): Promise,\n\n    deleteByKey(key: any): Promise<void>,\n\n    cursor(criteria: ?Object, sort: ?Object): Promise<CursorInterface<ModelType>>,\n\n    findByKey(key: any): Promise<?ModelType>,\n\n    findOne(criteria: Object, sort: ?Object): Promise<?ModelType>,\n};\n"]}