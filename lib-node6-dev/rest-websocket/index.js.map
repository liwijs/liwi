{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":[],"mappings":";;;;;;;;kBAIwB,I;;AAJxB;;;;;;AAEA,MAAM,SAAS,gCAAW,qBAAX,CAAf;;AAEe,SAAS,IAAT,CAAc,EAAd,EAAkB,WAAlB,EAA+B;AAC1C,OAAG,EAAH,CAAM,YAAN,EAAoB,UAAU;AAC1B,eAAO,EAAP,CAAU,MAAV,EAAkB,OAAyD,IAAzD,EAAsE,QAAtE,KAA6F;AAAA,+BAApC,IAAoC;AAAA,2HAApC,IAAoC;AAAA;;AAAA,yBAAvB,QAAuB;AAAA,kIAAvB,QAAuB;AAAA;;AAAA;AAAA,gBAA1F,IAA0F,SAA1F,IAA0F;AAAA,gBAApF,QAAoF,SAApF,QAAoF;;AAAA,yBAA1F,IAA0F,wBAApF,QAAoF;AAAA,4KAA5F,EAAE,IAAF,EAAQ,QAAR,EAA4F;AAAA;;AAC3G,mBAAO,IAAP,CAAY,MAAZ,EAAoB,EAAE,IAAF,EAAQ,QAAR,EAAkB,IAAlB,EAApB;AACA,oBAAQ,IAAR;AACI,qBAAK,gBAAL;AAAuB;AAAA,mDACD,IADC;;AAAA,8BACZ,OADY;;AAEnB,+BAAO,YAAY,YAAZ,CAAyB,QAAzB,EAAmC,OAAnC,EACF,IADE,CACG;AAAA,mCAAU,OAAO,OAAP,EAAV;AAAA,yBADH,EAEF,IAFE,CAEG;AAAA,mCAAW,SAAS,IAAT,EAAe,OAAf,CAAX;AAAA,yBAFH,EAGF,KAHE,CAGI;AAAA,mCAAO,SAAS,IAAI,OAAb,CAAP;AAAA,yBAHJ,CAAP;AAIH;;AAED,qBAAK,WAAL;AACA,qBAAK,WAAL;AACA,qBAAK,eAAL;AACA,qBAAK,oBAAL;AACA,qBAAK,kBAAL;AACA,qBAAK,mBAAL;AACA,qBAAK,aAAL;AACA,qBAAK,WAAL;AACA,qBAAK,SAAL;AACI,2BAAO,YAAY,GAAZ,CAAgB,IAAhB,EAAsB,QAAtB,EAAgC,GAAG,IAAnC,EACF,IADE,CACG;AAAA,+BAAU,SAAS,IAAT,EAAe,MAAf,CAAV;AAAA,qBADH,EAEF,KAFE,CAEI;AAAA,+BAAO,SAAS,IAAI,OAAJ,IAAe,GAAxB,CAAP;AAAA,qBAFJ,CAAP;;AAIJ;AACI,6BAAU,sBAAoB,IAAK,IAAnC;AAvBR;AAyBH,SA3BD;AA4BH,KA7BD;AA8BH","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger';\n\nconst logger = new Logger('liwi.rest-websocket');\n\nexport default function init(io, restService) {\n    io.on('connection', socket => {\n        socket.on('rest', ({ type, restName }: { type: string; restName: string }, args: Array, callback: Function) => {\n            logger.info('rest', { type, restName, args });\n            switch (type) {\n                case 'cursor toArray': {\n                    const [options] = args;\n                    return restService.createCursor(restName, options)\n                        .then(cursor => cursor.toArray())\n                        .then(results => callback(null, results))\n                        .catch(err => callback(err.message));\n                }\n\n                case 'insertOne':\n                case 'updateOne':\n                case 'updateSeveral':\n                case 'partialUpdateByKey':\n                case 'partialUpdateOne':\n                case 'partialUpdateMany':\n                case 'deleteByKey':\n                case 'deleteOne':\n                case 'findOne':\n                    return restService.get(type)(restName, ...args)\n                        .then(result => callback(null, result))\n                        .catch(err => callback(err.message || err));\n\n                default:\n                    callback(`Unknown command: \"${type}\"`);\n            }\n        });\n    });\n}\n"]}