{"version":3,"sources":["../../src/rest-websocket/index.js"],"names":["init","logger","ObjectBufferType","type","data","io","restService","on","socket","openWatchers","Set","forEach","watcher","stop","restName","buffer","args","callback","Error","restResource","get","info","options","createCursor","user","then","cursor","toArray","results","catch","err","error","message","result","key","eventName","otherArgs","startsWith","query","queries","emit","add","warn"],"mappings":"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","file":"index.js","sourcesContent":["/* global PRODUCTION */\nimport Logger from 'nightingale-logger/src';\nimport { encode, decode } from '../msgpack';\n\nconst logger = new Logger('liwi:rest-websocket');\n\ntype ObjectBufferType = {\n  type: 'Buffer',\n  data: Array<number>,\n}\n\nexport default function init(io, restService) {\n  io.on('connection', (socket) => {\n    let openWatchers = new Set();\n\n    socket.on('disconnect', () => {\n      openWatchers.forEach(watcher => watcher.stop());\n    });\n\n    socket.on('rest', (\n      { type, restName, buffer }: { type: string, restName: string, buffer: ?ObjectBufferType },\n      args: ?Array<any>|Function,\n      callback: ?Function,\n    ) => {\n      try {\n        if (buffer) {\n          if (!PRODUCTION && callback) {\n            throw new Error('Cannot have args and buffer.');\n          }\n\n          callback = args;\n          args = decode(buffer);\n        }\n\n        if (!PRODUCTION && !callback) {\n          throw new Error('`callback` missing.');\n        }\n\n        const restResource = restService.get(restName);\n\n        logger.info('rest', { type, restName, args });\n        switch (type) {\n          case 'cursor toArray': {\n            const [options] = args;\n            return restService.createCursor(restResource, socket.user, options)\n              .then(cursor => cursor.toArray())\n              .then(results => callback(null, encode(results)))\n              .catch((err) => {\n                logger.error(type, err);\n                callback(err.message);\n              });\n          }\n\n\n          case 'insertOne':\n          case 'updateOne':\n          case 'updateSeveral':\n          case 'partialUpdateByKey':\n          case 'partialUpdateOne':\n          case 'partialUpdateMany':\n          case 'deleteByKey':\n          case 'deleteOne':\n          case 'findOne':\n            try {\n              if (!PRODUCTION && !restResource[type]) {\n                throw new Error(`rest: ${restName}.${type} is not available`);\n              }\n\n              return restResource[type](socket.user, ...args)\n                .then(result => callback(null, encode(result)))\n                .catch((err) => {\n                  logger.error(type, { err });\n                  callback(err.message || err);\n                });\n            } catch (err) {\n              logger.error(type, { err });\n              callback(err.message || err);\n            }\n            break;\n\n          case 'fetch':\n          case 'subscribe':\n          case 'fetchAndSubscribe':\n            try {\n              const [key, eventName, otherArgs = []] = args;\n\n              if (!key.startsWith('query')) {\n                throw new Error('Invalid query key');\n              }\n\n              const query = restResource.queries[key]; // todo pass connected user\n              if (!query) {\n                throw new Error(`rest: ${restName}.${type}.${key} is not available`);\n              }\n\n              if (type === 'fetch') {\n                return query[type](result => callback(null, result && encode(result)), ...otherArgs)\n                  .catch((err) => {\n                    logger.error(type, { err });\n                    callback(err.message || err);\n                  });\n              } else {\n                const watcher = query[type]((err, result) => {\n                  if (err) {\n                    logger.error(type, { err });\n                  }\n                  socket.emit(eventName, err, encode(result));\n                });\n                watcher.then(() => callback(), err => {\n                  logger.error(type, { err });\n                  callback(err.message || err);\n                });\n\n                openWatchers.add(watcher);\n              }\n            } catch (err) {\n              logger.error(type, { err });\n              callback(err.message || err);\n            }\n            break;\n\n          default:\n            try {\n              logger.warn('Unknown command', { type });\n              callback(`rest: unknown command \"${type}\"`);\n            } catch (err) {\n              logger.error(type, { err });\n              callback(err.message || err);\n            }\n        }\n      } catch (err) {\n        logger.warn('rest error', { err });\n        callback(err.message || err);\n      }\n    });\n  });\n}\n"]}