{"version":3,"sources":["../../src/websocket-client/WebsocketStore.js"],"names":["logger","WebsocketConnection","emit","isConnected","WebsocketStore","constructor","websocket","restName","keyPath","Error","createQuery","key","debug","type","args","connection","isDisconnected","json","then","result","emitSubscribe","on","off","insertOne","object","updateOne","updateSeveral","objects","partialUpdateByKey","partialUpdate","partialUpdateOne","partialUpdateMany","criteria","deleteByKey","deleteOne","cursor","sort","Promise","resolve","findByKey","findOne","id"],"mappings":"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","file":"WebsocketStore.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport AbstractStore from '../store/AbstractStore';\nimport WebsocketCursor from './WebsocketCursor';\nimport { encode, decode } from '../extended-json';\nimport Query from './Query';\n\nconst logger = new Logger('liwi:websocket-client');\n\ntype WebsocketConnection = {\n    emit: Function,\n    isConnected: Function,\n}\n\nexport default class WebsocketStore<ModelType> extends AbstractStore<WebsocketConnection> {\n  keyPath = 'id';\n\n  constructor(websocket: WebsocketConnection, restName: string) {\n    super(websocket);\n\n    if (!restName) {\n      throw new Error(`Invalid restName: \"${restName}\"`);\n    }\n\n    this.restName = restName;\n  }\n\n  createQuery(key: string) {\n    logger.debug('createQuery', { key });\n    return new Query(this, key);\n  }\n\n  emit(type, ...args) {\n    logger.debug('emit', { type, args });\n    if (this.connection.isDisconnected()) {\n      throw new Error('Websocket is not connected');\n    }\n\n    return this.connection.emit('rest', {\n      type,\n      restName: this.restName,\n      json: encode(args),\n    }).then(result => result && decode(result));\n  }\n\n  emitSubscribe(type, ...args) {\n    const emit = () => this.emit(type, ...args);\n    return emit().then(result => {\n      this.connection.on('reconnect', emit);\n      return () => this.connection.off('reconnect', emit);\n    });\n  }\n\n  insertOne(object: ModelType): Promise<ModelType> {\n    return this.emit('insertOne', object);\n  }\n\n  updateOne(object: ModelType): Promise<ModelType> {\n    return this.emit('updateOne', object);\n  }\n\n  updateSeveral(objects: Array<ModelType>): Promise<Array<ModelType>> {\n    return this.emit('updateSeveral', objects);\n  }\n\n  partialUpdateByKey(key: any, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateByKey', key, partialUpdate);\n  }\n\n  partialUpdateOne(object: ModelType, partialUpdate: Object): Promise<ModelType> {\n    return this.emit('partialUpdateOne', object, partialUpdate);\n  }\n\n  partialUpdateMany(criteria, partialUpdate: Object): Promise {\n    return this.emit('partialUpdateMany', criteria, partialUpdate);\n  }\n\n  deleteByKey(key: any): Promise {\n    return this.emit('deleteByKey', key);\n  }\n\n  deleteOne(object: ModelType): Promise {\n    return this.emit('deleteOne', object);\n  }\n\n  cursor(criteria: ?Object, sort: ?Object): Promise<WebsocketCursor<ModelType>> {\n    return Promise.resolve(new WebsocketCursor(this, { criteria, sort }));\n  }\n\n  findByKey(key: any) {\n    return this.findOne({ id: key });\n  }\n\n  findOne(criteria: Object, sort: ?Object): Promise<Object> {\n    return this.emit('findOne', criteria, sort);\n  }\n}\n"]}