{"version":3,"sources":["../../src/rethinkdb/RethinkConnection.js"],"names":["Logger","rethinkDB","AbstractConnection","logger","RethinkConnection","constructor","config","has","set","Error","connect","host","get","port","db","options","info","_connection","buffer","max","getPoolMaster","on","healthy","getConnection","Promise","resolve","reject","warn","close","drain","then","_connecting"],"mappings":"AAAA,OAAOA,MAAP;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;;;AAEA,MAAMC,SAAS,IAAIH,MAAJ,CAAW,kCAAX,CAAf;;IAEqBI,iB,GAAN,cAAgCF,kBAAhC,CAAmD;;AAKhEG,cAAYC,MAAZ,EAAkD;AAAA,sBAAhC,aAAM,UAAN,EAAc,oBAAS,UAAT,CAAd,CAAgC;;AAAA;;AAChD;;AAEA,QAAI,CAACA,OAAOC,GAAP,CAAW,MAAX,CAAL,EAAyB;AACvBD,aAAOE,GAAP,CAAW,MAAX,EAAmB,WAAnB;AACD;AACD,QAAI,CAACF,OAAOC,GAAP,CAAW,MAAX,CAAL,EAAyB;AACvBD,aAAOE,GAAP,CAAW,MAAX,EAAmB,OAAnB;AACD;AACD,QAAI,CAACF,OAAOC,GAAP,CAAW,UAAX,CAAL,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,SAAKC,OAAL,CAAa;AACXC,YAAML,OAAOM,GAAP,CAAW,MAAX,CADK;AAEXC,YAAMP,OAAOM,GAAP,CAAW,MAAX,CAFK;AAGXE,UAAIR,OAAOM,GAAP,CAAW,UAAX;AAHO,KAAb;AAKD;;AAEDF,UAAQK,OAAR,EAAyB;AAAA;;AAAA,uBAAV,UAAU;;AAAA;;AACvBZ,WAAOa,IAAP,CAAY,YAAZ,EAA0BD,OAA1B;;AAEA,SAAKE,WAAL,GAAmBhB,4BACdc,OADc;AAEjBG,cAAQ,EAFS;AAGjBC,WAAK;AAHY,OAAnB;;AAMA,SAAKF,WAAL,CAAiBG,aAAjB,GAAiCC,EAAjC,CAAoC,SAApC,EAA+C,mBAAW;AACxD,UAAIC,YAAY,IAAhB,EAAsB;AACpB,cAAKC,aAAL,GAAqB;AAAA,iBAAMC,QAAQC,OAAR,CAAgB,MAAKR,WAArB,CAAN;AAAA,SAArB;AACAd,eAAOa,IAAP,CAAY,SAAZ;AACD,OAHD,MAGO;AACL,cAAKO,aAAL,GAAqB;AAAA,iBAAMC,QAAQE,MAAR,CAAe,IAAIjB,KAAJ,CAAU,wBAAV,CAAf,CAAN;AAAA,SAArB;AACAN,eAAOwB,IAAP,CAAY,aAAZ;AACD;AACF,KARD;;AAUA,SAAKJ,aAAL,GAAqB;AAAA,aAAMC,QAAQC,OAAR,CAAgB,MAAKR,WAArB,CAAN;AAAA,KAArB;AACD;;AAEDM,kBAA+B;AAAA,aAAN,QAAM;;AAC7B,UAAM,IAAId,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAEDmB,UAAQ;AAAA;;AACN,SAAKL,aAAL,GAAqB;AAAA,aAAMC,QAAQE,MAAR,CAAe,IAAIjB,KAAJ,CAAU,mBAAV,CAAf,CAAN;AAAA,KAArB;AACA,QAAI,KAAKQ,WAAT,EAAsB;AACpB,aAAO,KAAKA,WAAL,CACJG,aADI,GAEJS,KAFI,GAGJC,IAHI,CAGC,YAAM;AACV3B,eAAOa,IAAP,CAAY,mBAAZ;AACA,eAAKC,WAAL,GAAmB,IAAnB;AACD,OANI,CAAP;AAOD,KARD,MAQO,IAAI,KAAKc,WAAT,EAAsB;AAC3B,aAAO,KAAKR,aAAL,GAAqBO,IAArB,CAA0B;AAAA,eAAM,OAAKF,KAAL,EAAN;AAAA,OAA1B,CAAP;AACD;AACF;AAhE+D,C;SAA7CxB,iB","file":"RethinkConnection.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport rethinkDB from 'rethinkdbdash';\nimport AbstractConnection from '../store/AbstractConnection';\n\nconst logger = new Logger('liwi:rethinkdb:RethinkConnection');\n\nexport default class RethinkConnection extends AbstractConnection {\n  _connection: any;\n  _connecting: boolean | null;\n  connectionFailed: boolean;\n\n  constructor(config: Map<string, string | number>) {\n    super();\n\n    if (!config.has('host')) {\n      config.set('host', 'localhost');\n    }\n    if (!config.has('port')) {\n      config.set('port', '28015');\n    }\n    if (!config.has('database')) {\n      throw new Error('Missing config database');\n    }\n\n    this.connect({\n      host: config.get('host'),\n      port: config.get('port'),\n      db: config.get('database'),\n    });\n  }\n\n  connect(options: Object) {\n    logger.info('connecting', options);\n\n    this._connection = rethinkDB({\n      ...options,\n      buffer: 20,\n      max: 100,\n    });\n\n    this._connection.getPoolMaster().on('healthy', healthy => {\n      if (healthy === true) {\n        this.getConnection = () => Promise.resolve(this._connection);\n        logger.info('healthy');\n      } else {\n        this.getConnection = () => Promise.reject(new Error('Connection not healthy'));\n        logger.warn('not healthy');\n      }\n    });\n\n    this.getConnection = () => Promise.resolve(this._connection);\n  }\n\n  getConnection(): Promise<void> {\n    throw new Error('call connect()');\n  }\n\n  close() {\n    this.getConnection = () => Promise.reject(new Error('Connection closed'));\n    if (this._connection) {\n      return this._connection\n        .getPoolMaster()\n        .drain()\n        .then(() => {\n          logger.info('connection closed');\n          this._connection = null;\n        });\n    } else if (this._connecting) {\n      return this.getConnection().then(() => this.close());\n    }\n  }\n}\n"]}