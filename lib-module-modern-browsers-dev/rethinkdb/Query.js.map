{"version":3,"sources":["../../src/rethinkdb/Query.js"],"names":["AbstractQuery","RethinkStore","Query","fetch","callback","queryCallback","store","query","r","run","then","_subscribe","_includeInitial","args","_feed","promise","changes","includeInitial","includeStates","includeTypes","includeOffsets","length","feed","_promise","each","stop","closeFeed","cancel","cb","errCb","close"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,0DAA2B,SACzB,qBAAQ,YAAR,CADyB,EAEzB,mBAAM,YAAN,CAFyB,CAA3B;IAKqBC,K,GAAN,cAAoBF,aAApB,CAAgD;AAAA;AAAA,+CAAd,mBAAc;AAAA;;AAC7DG,QAAMC,QAAN,EAAyC;AAAA,wBAA3B,WAAG,YAAH,CAA2B;;AAAA,iCAAL,OAAK;;AACvC,gEAAO,KAAKC,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuC,KAAKD,KAAL,CAAWE,CAAlD,EAAqDC,GAArD,GAA2DC,IAA3D,CAAgEN,QAAhE,CAAP;AAAA;AAAA;AACD;;AAEDO,aAAWP,QAAX,EAA+BQ,kBAAkB,KAAjD,EAAwDC,IAAxD,EAA+F;AAAA;;AAAA,yBAA5E,YAA4E;;AAAA,oBAAnC,QAAQ,OAAR,CAAmC;;AAAA,kCAApB,mBAAoB;;AAAA;;AAC7F,QAAIC,KAAJ;AACA,QAAIC,UAAU,KAAKV,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAAX,EAAnB,EAAuC,KAAKD,KAAL,CAAWE,CAAlD,EACXQ,OADW,CACH;AACPC,sBAAgBL,eADT;AAEPM,qBAAe,IAFR;AAGPC,oBAAc,IAHP;AAIPC,sBAAgB;AAJT,KADG,EAOXV,IAPW,CAON,gBAAQ;AAOZ,aANIG,KAAKQ,MAAL,KAAgB,CAMpB,KALEP,QAAQQ,IAKV,EAJE,OAAO,MAAKC,QAId,GADAD,KAAKE,IAAL,CAAUpB,QAAV,CACA,EAAOkB,IAAP;AACD,KAfW,CAAd;;AAiBIT,SAAKQ,MAAL,KAAgB,CAnByE,KAmBtE,KAAKE,QAAL,GAAgBR,OAnBsD;;;AAqB7F,UAAMU,OAAO,SAAPA,IAAO,GAAM;AACjB,YAAKC,SAAL,CAAeZ,KAAf,EAAsBC,OAAtB,CADiB;AAElB,KAFD;;AAIA,+BAAO;AACLU,UADK;AAELE,cAAQF,IAFH;AAGLf,YAAM,cAACkB,EAAD,EAAKC,KAAL;AAAA,eAAed,QAAQL,IAAR,CAAakB,EAAb,EAAiBC,KAAjB,CAAf;AAAA;AAHD,KAAP;AAKD;;AAEDH,YAAUJ,IAAV,EAAgBP,OAAhB,EAAyB;AACnBO,QADmB,GAErBA,KAAKQ,KAAL,EAFqB,GAGZf,OAHY,IAIrBA,QAAQL,IAAR,CAAa;AAAA,aAAQY,KAAKQ,KAAL,EAAR;AAAA,KAAb,CAJqB;AAMxB;AA3C4D,C;SAA1C5B,K","file":"Query.js","sourcesContent":["import AbstractQuery from '../store/AbstractQuery';\nimport RethinkStore from './RethinkStore';\n\ntype SubscribeReturnType = {\n  cancel: Function,\n  stop: Function,\n};\n\nexport default class Query extends AbstractQuery<RethinkStore> {\n  fetch(callback: ?Function): Promise<any> {\n    return this.queryCallback(this.store.query(), this.store.r).run().then(callback);\n  }\n\n  _subscribe(callback: Function, _includeInitial = false, args: Array<any>): SubscribeReturnType {\n    let _feed;\n    let promise = this.queryCallback(this.store.query(), this.store.r)\n      .changes({\n        includeInitial: _includeInitial,\n        includeStates: true,\n        includeTypes: true,\n        includeOffsets: true,\n      })\n      .then(feed => {\n        if (args.length === 0) {\n          _feed = feed;\n          delete this._promise;\n        }\n\n        feed.each(callback);\n        return feed;\n      });\n\n    if (args.length === 0) this._promise = promise;\n\n    const stop = () => {\n      this.closeFeed(_feed, promise);\n    };\n\n    return {\n      stop,\n      cancel: stop,\n      then: (cb, errCb) => promise.then(cb, errCb),\n    };\n  }\n\n  closeFeed(feed, promise) {\n    if (feed) {\n      feed.close();\n    } else if (promise) {\n      promise.then(feed => feed.close());\n    }\n  }\n}\n"]}