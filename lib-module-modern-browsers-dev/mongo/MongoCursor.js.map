{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":["Cursor","MongoStore","AbstractCursor","ResultType","MongoCursor","constructor","store","cursor","_cursor","advance","count","skip","next","then","_result","value","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","close","_store","toArray"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAAcC,yBAAd,QAAgC,UAAhC;;;;;;IAEqBC,W,GAAN,cAA0BF,cAA1B,CAAqD;AAClEG,cAAYC,KAAZ,EAA+BC,MAA/B,EAA+C;AAAA,qBAA9B,iBAA8B;;AAAA,sBAAV,aAAU;;AAAA,+FAC7C,MAAMD,KAAN,CAD6C,6BADO,iBACP,GAE7C,KAAKE,OAAL,GAAeD,MAF8B;AAG9C;;AAEDE,UAAQC,KAAR,EAA6B;AAAA,qBAAhB,UAAgB;;AAAA,aAAL,QAAK;AAAA,gDAC3B,KAAKF,OAAL,CAAaG,IAAb,CAAkBD,KAAlB,CAD2B;AAE5B;;AAEDE,SAAqB;AAAA;;AAAA,kCAAL,OAAK;;AACnB,WAAO,KAAKJ,OAAL,CAAaI,IAAb,GAAoBC,IAApB,CAAyB,iBAAS;AAGvC,aAFA,MAAKC,OAAL,GAAeC,KAEf,EADA,MAAKC,GAAL,GAAWD,SAASA,MAAME,GAC1B,EAAO,MAAKD,GAAZ;AACD,KAJM,CAAP;AAAA;AAAA;AAKD;;AAEDE,QAAMC,QAAN,EAAiC;AAAA,wBAAnB,UAAmB;;AAAA,kCAAR,gBAAQ;;AAE/B,gEADA,KAAKX,OAAL,CAAaU,KAAb,CAAmBC,QAAnB,CACA,sBAAOC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDX,QAAMY,aAAsB,KAA5B,EAAmC;AAAA,0BAAnB,WAAmB;;AACjC,sEAAO,KAAKd,OAAL,CAAaE,KAAb,CAAmBY,UAAnB,CAAP;AACD;;AAEDC,WAAS;AACP,WAAOH,QAAQC,OAAR,CAAgB,KAAKP,OAArB,CAAP;AACD;;AAEDU,UAAQ;;AAQN,WAPI,KAAKhB,OAOT,KANE,KAAKA,OAAL,CAAagB,KAAb,EAMF,EALE,KAAKhB,OAAL,SAKF,EAJE,KAAKiB,MAAL,SAIF,EAHE,KAAKX,OAAL,SAGF,GAAOM,QAAQC,OAAR,EAAP;AACD;;AAEDK,YAAsC;AAAA,kCAAnB,QAAM,iBAAN,CAAmB;;AACpC,WAAO,KAAKlB,OAAL,CAAakB,OAAb,EAAP;AAAA;AAAA;AACD;AA5CiE,C;SAA/CtB,W","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\nimport type { ResultType } from '../types';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n  constructor(store: MongoStore, cursor: Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this._cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this._cursor.next().then(value => {\n      this._result = value;\n      this.key = value && value._id;\n      return this.key;\n    });\n  }\n\n  limit(newLimit: number): Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = undefined;\n      this._store = undefined;\n      this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<ResultType>> {\n    return this._cursor.toArray();\n  }\n}\n"]}