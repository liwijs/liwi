{"version":3,"sources":["../../src/mongo/MongoCursor.js"],"names":["Cursor","MongoStore","AbstractCursor","ResultType","MongoCursor","constructor","store","cursor","_cursor","advance","count","skip","next","then","value","_result","key","_id","limit","newLimit","Promise","resolve","applyLimit","result","close","undefined","_store","toArray"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAAcC,yBAAd,QAAgC,UAAhC;;;;;;IAEqBC,W,GAAN,cAA0BF,cAA1B,CAAqD;AAClEG,cAAYC,KAAZ,EAA+BC,MAA/B,EAA+C;AAAA,qBAA9B,iBAA8B;;AAAA,sBAAV,aAAU;;AAAA;AAAA;;AAC7C,UAAMD,KAAN;AAD6C,+BADO,iBACP;AAE7C,SAAKE,OAAL,GAAeD,MAAf;AACD;;AAEDE,UAAQC,KAAR,EAA6B;AAAA,qBAAhB,UAAgB;;AAAA,aAAL,QAAK;AAAA;;AAC3B,SAAKF,OAAL,CAAaG,IAAb,CAAkBD,KAAlB;AACD;;AAEDE,SAAqB;AAAA;;AAAA,kCAAL,OAAK;;AACnB,WAAO,KAAKJ,OAAL,CAAaI,IAAb,GACJC,IADI,CACC,UAACC,KAAD,EAAW;AACf,YAAKC,OAAL,GAAeD,KAAf;AACA,YAAKE,GAAL,GAAWF,SAASA,MAAMG,GAA1B;AACA,aAAO,MAAKD,GAAZ;AACD,KALI,CAAP;AAAA;AAAA;AAMD;;AAEDE,QAAMC,QAAN,EAAiC;AAAA,wBAAnB,UAAmB;;AAAA,kCAAR,gBAAQ;;AAAA;;AAC/B,SAAKX,OAAL,CAAaU,KAAb,CAAmBC,QAAnB;AACA,+BAAOC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDX,QAAMY,aAAsB,KAA5B,EAAmC;AAAA,0BAAnB,WAAmB;;AAAA;;AACjC,WAAO,KAAKd,OAAL,CAAaE,KAAb,CAAmBY,UAAnB,CAAP;AACD;;AAEDC,WAAS;AACP,WAAOH,QAAQC,OAAR,CAAgB,KAAKN,OAArB,CAAP;AACD;;AAEDS,UAAQ;AACN,QAAI,KAAKhB,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAagB,KAAb;AACA,WAAKhB,OAAL,GAAeiB,SAAf;AACA,WAAKC,MAAL,GAAcD,SAAd;AACA,WAAKV,OAAL,GAAeU,SAAf;AACD;;AAED,WAAOL,QAAQC,OAAR,EAAP;AACD;;AAEDM,YAAsC;AAAA,kCAAnB,QAAM,iBAAN,CAAmB;;AACpC,WAAO,KAAKnB,OAAL,CAAamB,OAAb,EAAP;AAAA;AAAA;AACD;AA7CiE,C;SAA/CvB,W","file":"MongoCursor.js","sourcesContent":["import Cursor from 'mongodb/lib/cursor';\nimport MongoStore from './MongoStore';\nimport AbstractCursor from '../store/AbstractCursor';\nimport type { ResultType } from '../types';\n\nexport default class MongoCursor extends AbstractCursor<MongoStore> {\n  constructor(store: MongoStore, cursor: Cursor) {\n    super(store);\n    this._cursor = cursor;\n  }\n\n  advance(count: number): void {\n    this._cursor.skip(count);\n  }\n\n  next(): Promise<any> {\n    return this._cursor.next()\n      .then((value) => {\n        this._result = value;\n        this.key = value && value._id;\n        return this.key;\n      });\n  }\n\n  limit(newLimit: number): Promise {\n    this._cursor.limit(newLimit);\n    return Promise.resolve(this);\n  }\n\n  count(applyLimit: boolean = false) {\n    return this._cursor.count(applyLimit);\n  }\n\n  result() {\n    return Promise.resolve(this._result);\n  }\n\n  close() {\n    if (this._cursor) {\n      this._cursor.close();\n      this._cursor = undefined;\n      this._store = undefined;\n      this._result = undefined;\n    }\n\n    return Promise.resolve();\n  }\n\n  toArray(): Promise<Array<ResultType>> {\n    return this._cursor.toArray();\n  }\n}\n"]}