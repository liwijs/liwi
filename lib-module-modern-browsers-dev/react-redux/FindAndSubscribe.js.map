{"version":3,"sources":["../../src/react-redux/FindAndSubscribe.js"],"names":["React","Component","ReactNodeType","ReactComponentType","AbstractQuery","applyChange","FindAndSubscribeComponent","state","fetched","result","componentDidMount","query","props","_subscribe","fetchAndSubscribe","err","change","alert","newResult","setState","componentWillUnmount","stop","render","loadingComponent","createElement","component","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAcC,+BAAd,EAA6BC,yCAA7B,QAAuD,uBAAvD;AACA,OAAYC,cAAZ,MAA+B,wBAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;;;;;;;;;;AAEA,sCAAiB,SACf,mBAAM,UAAN,CADe,EAEf,oBAAO,oBAAP,CAFe,EAGf,wBAAW,yBAAX,CAHe,EAIf,+BAAkB,WAAC,yBAAD,CAAlB,CAJe,CAAjB;IAOqBC,yB,sBAAN,cAAwCL,SAAxC,CAAkD;AAAA;AAAA;;AAAA,wCAG/DM,KAH+D,GAGvD;AACNC,eAAS,KADH;AAENC;AAFM,KAHuD;AAAA;;AAQ/DC,sBAAoB;AAAA;;AAClB,UAAM,EAAEC,KAAF,KAAY,KAAKC,KAAvB;AACA,SAAKC,UAAL,GAAkBF,MAAMG,iBAAN,CAAwB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACzD,UAAID,GAAJ,EAAS;AACP;AACAE,cAAO,qBAAoBF,GAAI,EAA/B;AACA;AACD;;AAED,YAAMG,YAAYb,YAAY,MAAKE,KAAL,CAAWE,MAAvB,EAA+BO,MAA/B,CAAlB;;AAEA,UAAI,CAAC,MAAKT,KAAL,CAAWC,OAAhB,EAAyB;AACvB,cAAKW,QAAL,CAAc,EAAEX,SAAS,IAAX,EAAiBC,QAAQS,SAAzB,EAAd;AACD,OAFD,MAEO,IAAIA,cAAc,MAAKX,KAAL,CAAWE,MAA7B,EAAqC;AAC1C,cAAKU,QAAL,CAAc,EAAEV,QAAQS,SAAV,EAAd;AACD;AACF,KAdiB,CAAlB;AAeD;;AAEDE,yBAAuB;AACrB,QAAI,KAAKP,UAAT,EAAqB;AACnB,WAAKA,UAAL,CAAgBQ,IAAhB;AACA,aAAO,KAAKR,UAAZ;AACD;AACF;;AAEDS,WAAwB;AAAA,iCAAd,oBAAc;;AACtB,QAAI,CAAC,KAAKf,KAAL,CAAWC,OAAhB,EAAyB;AACvB,gCAAO,KAAKI,KAAL,CAAWW,gBAAX,GAA8BvB,MAAMwB,aAAN,CAAoB,KAAKZ,KAAL,CAAWW,gBAA/B,CAA9B,GAAiF,IAAxF;AACD;;AAED,8BAAOvB,MAAMwB,aAAN,CAAoB,KAAKZ,KAAL,CAAWa,SAA/B,EAA0C,EAAE,CAAC,KAAKb,KAAL,CAAWc,IAAZ,GAAmB,KAAKnB,KAAL,CAAWE,MAAhC,EAA1C,CAAP;AACD;AAxC8D,C,iCAC1D,S;SADcH,yB","file":"FindAndSubscribe.js","sourcesContent":["import React, { Component } from 'react';\nimport type { ReactNodeType, ReactComponentType } from 'alp-react-redux/types';\nimport type AbstractQuery from '../store/AbstractQuery';\nimport applyChange from './applyChange';\n\ntype PropsType = {\n  name: string,\n  query: AbstractQuery,\n  component: ReactComponentType,\n  loadingComponent: ?ReactComponentType,\n};\n\nexport default class FindAndSubscribeComponent extends Component {\n  props: PropsType;\n\n  state = {\n    fetched: false,\n    result: [],\n  };\n\n  componentDidMount() {\n    const { query } = this.props;\n    this._subscribe = query.fetchAndSubscribe((err, change) => {\n      if (err) {\n        // eslint-disable-next-line no-alert\n        alert(`Unexpected error: ${err}`);\n        return;\n      }\n\n      const newResult = applyChange(this.state.result, change);\n\n      if (!this.state.fetched) {\n        this.setState({ fetched: true, result: newResult });\n      } else if (newResult !== this.state.result) {\n        this.setState({ result: newResult });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._subscribe) {\n      this._subscribe.stop();\n      delete this._subscribe;\n    }\n  }\n\n  render(): ReactNodeType {\n    if (!this.state.fetched) {\n      return this.props.loadingComponent ? React.createElement(this.props.loadingComponent) : null;\n    }\n\n    return React.createElement(this.props.component, { [this.props.name]: this.state.result });\n  }\n}\n"]}