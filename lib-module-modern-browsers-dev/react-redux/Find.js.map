{"version":3,"sources":["../../src/react-redux/Find.js"],"names":["React","Component","ReactNodeType","ReactComponentType","AbstractQuery","FindComponent","state","fetched","result","componentDidMount","query","props","_find","fetch","setState","componentWillUnmount","render","createElement","component","name","loadingComponent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAcC,+BAAd,EAA6BC,yCAA7B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;;;;;;;;AAEA,sCAAiB,SACf,mBAAM,UAAN,CADe,EAEf,oBAAO,oBAAP,CAFe,EAGf,wBAAW,yBAAX,CAHe,EAIf,+BAAkB,WAAC,yBAAD,CAAlB,CAJe,CAAjB;IAOqBC,a,sBAAN,cAA4BJ,SAA5B,CAAsC;AAAA;AAAA;;AAAA,wCAGnDK,KAHmD,GAG3C;AACNC,eAAS,KADH;AAENC;AAFM,KAH2C;AAAA;;AAQnDC,sBAAoB;AAAA;;AAClB,UAAM,EAAEC,KAAF,KAAY,KAAKC,KAAvB;AACA,SAAKC,KAAL,GAAaF,MAAMG,KAAN,CAAY,UAACL,MAAD,EAAiB;AAAA,wBAAV,OAAU;;AAAA;AACnC,YAAKI,KAD8B,KAExC,MAAKE,QAAL,CAAc;AACZP,iBAAS,IADG;AAEZC;AAFY,OAAd,CAFwC,EAMxC,OAAO,MAAKI,KAN4B;AAOzC,KAPY,CAFK;AAUnB;;AAEDG,yBAAuB;AACjB,SAAKH,KADY,IAGnB,OAAO,KAAKA,KAHO;AAKtB;;AAEDI,WAAwB;AAAA,iCAAd,oBAAc;;AAAA,WACjB,KAAKV,KAAL,CAAWC,OADM,sBAKfP,MAAMiB,aAAN,CAAoB,KAAKN,KAAL,CAAWO,SAA/B,EAA0C,EAAE,CAAC,KAAKP,KAAL,CAAWQ,IAAZ,GAAmB,KAAKb,KAAL,CAAWE,MAAhC,EAA1C,CALe,uBAEb,KAAKG,KAAL,CAAWS,gBAAX,GAA8BpB,MAAMiB,aAAN,CAAoB,KAAKN,KAAL,CAAWS,gBAA/B,CAA9B,GAAiF,IAFpE;AAMvB;AAjCkD,C,iCAC9C,S;SADcf,a","file":"Find.js","sourcesContent":["import React, { Component } from 'react';\nimport type { ReactNodeType, ReactComponentType } from 'alp-react-redux/src/types';\nimport AbstractQuery from '../store/AbstractQuery';\n\ntype PropsType = {\n  name: string,\n  query: AbstractQuery,\n  component: ReactComponentType,\n  loadingComponent: ?ReactComponentType,\n};\n\nexport default class FindComponent extends Component {\n  props: PropsType;\n\n  state = {\n    fetched: false,\n    result: undefined,\n  };\n\n  componentDidMount() {\n    const { query } = this.props;\n    this._find = query.fetch((result: any) => {\n      if (!this._find) return;\n      this.setState({\n        fetched: true,\n        result,\n      });\n      delete this._find;\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._find) {\n      // this._find.cancel();\n      delete this._find;\n    }\n  }\n\n  render(): ReactNodeType {\n    if (!this.state.fetched) {\n      return this.props.loadingComponent ? React.createElement(this.props.loadingComponent) : null;\n    }\n\n    return React.createElement(this.props.component, { [this.props.name]: this.state.result });\n  }\n}\n"]}